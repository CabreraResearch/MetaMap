(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

riot = require('riot');
require('jquery');
require('lodash');
//require('./js/integrations/auth0');
require('./js/integrations/googleanalytics');
require('./js/integrations/newrelic');
require('./js/integrations/raygun');
require('./js/integrations/usersnap');

require('./tags/footer.tag');
riot.mount('*');
},{"./js/integrations/googleanalytics":2,"./js/integrations/newrelic":3,"./js/integrations/raygun":4,"./js/integrations/usersnap":5,"./tags/footer.tag":6,"jquery":"jquery","lodash":"lodash","riot":"riot"}],2:[function(require,module,exports){

var googleAnalytics = function (config) {
    var apiKey, e, r;
    if (config == null) {
        config = {};
    }
    apiKey = config.GOOGLE_ANALYTICS_TRACKING_ID;
    if (apiKey && window.location.hostname !== 'localhost') {
        window.GoogleAnalyticsObject = 'ga';
        window.ga || (window.ga = function () {
            (window.ga.q = window.ga.q || []).push(arguments);
        });
        window.ga.ga = +(new Date);
        e = document.createElement('script');
        r = document.getElementsByTagName('script')[0];
        e.src = '//www.google-analytics.com/analytics.js';
        r.parentNode.insertBefore(e, r);
        ga('create', apiKey);
        return ga('send', 'pageview');
    }
};

module.exports = googleAnalytics;



},{}],3:[function(require,module,exports){

var newRelic = function (config) {
    var appId, licenseKey;
    if (config == null) {
        config = {};
    }
    licenseKey = config.NEW_RELIC_LICENSE_KEY;
    appId = config.NEW_RELIC_APPLICATION_ID;
    if (licenseKey && appId && window.location.hostname !== 'localhost') {
        return window.NREUM || (NREUM = {}), __nr_require = function (t, e, n) { function r(n) { if (!e[n]) { var o = e[n] = { exports: {} }; t[n][0].call(o.exports, function (e) { var o = t[n][1][e]; return r(o ? o : e) }, o, o.exports) } return e[n].exports } if ("function" == typeof __nr_require) return __nr_require; for (var o = 0; o < n.length; o++) r(n[o]); return r }({ QJf3ax: [function (t, e) { function n(t) { function e(e, n, a) { t && t(e, n, a), a || (a = {}); for (var c = s(e), f = c.length, u = i(a, o, r), d = 0; f > d; d++) c[d].apply(u, n); return u } function a(t, e) { f[t] = s(t).concat(e) } function s(t) { return f[t] || [] } function c() { return n(e) } var f = {}; return { on: a, emit: e, create: c, listeners: s, _events: f } } function r() { return {} } var o = "nr@context", i = t("gos"); e.exports = n() }, { gos: "7eSDFh" }], ee: [function (t, e) { e.exports = t("QJf3ax") }, {}], 3: [function (t) { function e(t, e, n, i, s) { try { c ? c -= 1 : r("err", [s || new UncaughtException(t, e, n)]) } catch (f) { try { r("ierr", [f, (new Date).getTime(), !0]) } catch (u) { } } return "function" == typeof a ? a.apply(this, o(arguments)) : !1 } function UncaughtException(t, e, n) { this.message = t || "Uncaught error with no additional information", this.sourceURL = e, this.line = n } function n(t) { r("err", [t, (new Date).getTime()]) } var r = t("handle"), o = t(5), i = t("ee"), a = window.onerror, s = !1, c = 0; t("loader").features.err = !0, window.onerror = e, NREUM.noticeError = n; try { throw new Error } catch (f) { "stack" in f && (t(1), t(4), "addEventListener" in window && t(2), window.XMLHttpRequest && XMLHttpRequest.prototype && XMLHttpRequest.prototype.addEventListener && t(3), s = !0) } i.on("fn-start", function () { s && (c += 1) }), i.on("fn-err", function (t, e, r) { s && (this.thrown = !0, n(r)) }), i.on("fn-end", function () { s && !this.thrown && c > 0 && (c -= 1) }), i.on("internal-error", function (t) { r("ierr", [t, (new Date).getTime(), !0]) }) }, { 1: 8, 2: 5, 3: 9, 4: 7, 5: 21, ee: "QJf3ax", handle: "D5DuLP", loader: "G9z0Bl" }], 4: [function (t) { function e() { } if (window.performance && window.performance.timing && window.performance.getEntriesByType) { var n = t("ee"), r = t("handle"), o = t(2); t("loader").features.stn = !0, t(1), n.on("fn-start", function (t) { var e = t[0]; e instanceof Event && (this.bstStart = Date.now()) }), n.on("fn-end", function (t, e) { var n = t[0]; n instanceof Event && r("bst", [n, e, this.bstStart, Date.now()]) }), o.on("fn-start", function (t, e, n) { this.bstStart = Date.now(), this.bstType = n }), o.on("fn-end", function (t, e) { r("bstTimer", [e, this.bstStart, Date.now(), this.bstType]) }), n.on("pushState-start", function () { this.time = Date.now(), this.startPath = location.pathname + location.hash }), n.on("pushState-end", function () { r("bstHist", [location.pathname + location.hash, this.startPath, this.time]) }), "addEventListener" in window.performance && (window.performance.addEventListener("webkitresourcetimingbufferfull", function () { r("bstResource", [window.performance.getEntriesByType("resource")]), window.performance.webkitClearResourceTimings() }, !1), window.performance.addEventListener("resourcetimingbufferfull", function () { r("bstResource", [window.performance.getEntriesByType("resource")]), window.performance.clearResourceTimings() }, !1)), document.addEventListener("scroll", e, !1), document.addEventListener("keypress", e, !1), document.addEventListener("click", e, !1) } }, { 1: 6, 2: 8, ee: "QJf3ax", handle: "D5DuLP", loader: "G9z0Bl" }], 5: [function (t, e) { function n(t) { i.inPlace(t, ["addEventListener", "removeEventListener"], "-", r) } function r(t) { return t[1] } var o = (t(1), t("ee").create()), i = t(2)(o), a = t("gos"); if (e.exports = o, n(window), "getPrototypeOf" in Object) { for (var s = document; s && !s.hasOwnProperty("addEventListener") ;) s = Object.getPrototypeOf(s); s && n(s); for (var c = XMLHttpRequest.prototype; c && !c.hasOwnProperty("addEventListener") ;) c = Object.getPrototypeOf(c); c && n(c) } else XMLHttpRequest.prototype.hasOwnProperty("addEventListener") && n(XMLHttpRequest.prototype); o.on("addEventListener-start", function (t) { if (t[1]) { var e = t[1]; "function" == typeof e ? this.wrapped = t[1] = a(e, "nr@wrapped", function () { return i(e, "fn-", null, e.name || "anonymous") }) : "function" == typeof e.handleEvent && i.inPlace(e, ["handleEvent"], "fn-") } }), o.on("removeEventListener-start", function (t) { var e = this.wrapped; e && (t[1] = e) }) }, { 1: 21, 2: 22, ee: "QJf3ax", gos: "7eSDFh" }], 6: [function (t, e) { var n = (t(2), t("ee").create()), r = t(1)(n); e.exports = n, r.inPlace(window.history, ["pushState"], "-") }, { 1: 22, 2: 21, ee: "QJf3ax" }], 7: [function (t, e) { var n = (t(2), t("ee").create()), r = t(1)(n); e.exports = n, r.inPlace(window, ["requestAnimationFrame", "mozRequestAnimationFrame", "webkitRequestAnimationFrame", "msRequestAnimationFrame"], "raf-"), n.on("raf-start", function (t) { t[0] = r(t[0], "fn-") }) }, { 1: 22, 2: 21, ee: "QJf3ax" }], 8: [function (t, e) { function n(t, e, n) { var r = t[0]; "string" == typeof r && (r = new Function(r)), t[0] = o(r, "fn-", null, n) } var r = (t(2), t("ee").create()), o = t(1)(r); e.exports = r, o.inPlace(window, ["setTimeout", "setInterval", "setImmediate"], "setTimer-"), r.on("setTimer-start", n) }, { 1: 22, 2: 21, ee: "QJf3ax" }], 9: [function (t, e) { function n() { c.inPlace(this, d, "fn-") } function r(t, e) { c.inPlace(e, ["onreadystatechange"], "fn-") } function o(t, e) { return e } var i = t("ee").create(), a = t(1), s = t(2), c = s(i), f = s(a), u = window.XMLHttpRequest, d = ["onload", "onerror", "onabort", "onloadstart", "onloadend", "onprogress", "ontimeout"]; e.exports = i, window.XMLHttpRequest = function (t) { var e = new u(t); try { i.emit("new-xhr", [], e), f.inPlace(e, ["addEventListener", "removeEventListener"], "-", function (t, e) { return e }), e.addEventListener("readystatechange", n, !1) } catch (r) { try { i.emit("internal-error", [r]) } catch (o) { } } return e }, window.XMLHttpRequest.prototype = u.prototype, c.inPlace(XMLHttpRequest.prototype, ["open", "send"], "-xhr-", o), i.on("send-xhr-start", r), i.on("open-xhr-start", r) }, { 1: 5, 2: 22, ee: "QJf3ax" }], 10: [function (t) { function e(t) { if ("string" == typeof t && t.length) return t.length; if ("object" != typeof t) return void 0; if ("undefined" != typeof ArrayBuffer && t instanceof ArrayBuffer && t.byteLength) return t.byteLength; if ("undefined" != typeof Blob && t instanceof Blob && t.size) return t.size; if ("undefined" != typeof FormData && t instanceof FormData) return void 0; try { return JSON.stringify(t).length } catch (e) { return void 0 } } function n(t) { var n = this.params, r = this.metrics; if (!this.ended) { this.ended = !0; for (var i = 0; c > i; i++) t.removeEventListener(s[i], this.listener, !1); if (!n.aborted) { if (r.duration = (new Date).getTime() - this.startTime, 4 === t.readyState) { n.status = t.status; var a = t.responseType, f = "arraybuffer" === a || "blob" === a || "json" === a ? t.response : t.responseText, u = e(f); if (u && (r.rxSize = u), this.sameOrigin) { var d = t.getResponseHeader("X-NewRelic-App-Data"); d && (n.cat = d.split(", ").pop()) } } else n.status = 0; r.cbTime = this.cbTime, o("xhr", [n, r, this.startTime]) } } } function r(t, e) { var n = i(e), r = t.params; r.host = n.hostname + ":" + n.port, r.pathname = n.pathname, t.sameOrigin = n.sameOrigin } if (window.XMLHttpRequest && XMLHttpRequest.prototype && XMLHttpRequest.prototype.addEventListener && !/CriOS/.test(navigator.userAgent)) { t("loader").features.xhr = !0; var o = t("handle"), i = t(2), a = t("ee"), s = ["load", "error", "abort", "timeout"], c = s.length, f = t(1); t(4), t(3), a.on("new-xhr", function () { this.totalCbs = 0, this.called = 0, this.cbTime = 0, this.end = n, this.ended = !1, this.xhrGuids = {} }), a.on("open-xhr-start", function (t) { this.params = { method: t[0] }, r(this, t[1]), this.metrics = {} }), a.on("open-xhr-end", function (t, e) { "loader_config" in NREUM && "xpid" in NREUM.loader_config && this.sameOrigin && e.setRequestHeader("X-NewRelic-ID", NREUM.loader_config.xpid) }), a.on("send-xhr-start", function (t, n) { var r = this.metrics, o = t[0], i = this; if (r && o) { var f = e(o); f && (r.txSize = f) } this.startTime = (new Date).getTime(), this.listener = function (t) { try { "abort" === t.type && (i.params.aborted = !0), ("load" !== t.type || i.called === i.totalCbs && (i.onloadCalled || "function" != typeof n.onload)) && i.end(n) } catch (e) { try { a.emit("internal-error", [e]) } catch (r) { } } }; for (var u = 0; c > u; u++) n.addEventListener(s[u], this.listener, !1) }), a.on("xhr-cb-time", function (t, e, n) { this.cbTime += t, e ? this.onloadCalled = !0 : this.called += 1, this.called !== this.totalCbs || !this.onloadCalled && "function" == typeof n.onload || this.end(n) }), a.on("xhr-load-added", function (t, e) { var n = "" + f(t) + !!e; this.xhrGuids && !this.xhrGuids[n] && (this.xhrGuids[n] = !0, this.totalCbs += 1) }), a.on("xhr-load-removed", function (t, e) { var n = "" + f(t) + !!e; this.xhrGuids && this.xhrGuids[n] && (delete this.xhrGuids[n], this.totalCbs -= 1) }), a.on("addEventListener-end", function (t, e) { e instanceof XMLHttpRequest && "load" === t[0] && a.emit("xhr-load-added", [t[1], t[2]], e) }), a.on("removeEventListener-end", function (t, e) { e instanceof XMLHttpRequest && "load" === t[0] && a.emit("xhr-load-removed", [t[1], t[2]], e) }), a.on("fn-start", function (t, e, n) { e instanceof XMLHttpRequest && ("onload" === n && (this.onload = !0), ("load" === (t[0] && t[0].type) || this.onload) && (this.xhrCbStart = (new Date).getTime())) }), a.on("fn-end", function (t, e) { this.xhrCbStart && a.emit("xhr-cb-time", [(new Date).getTime() - this.xhrCbStart, this.onload, e], e) }) } }, { 1: "XL7HBI", 2: 11, 3: 9, 4: 5, ee: "QJf3ax", handle: "D5DuLP", loader: "G9z0Bl" }], 11: [function (t, e) { e.exports = function (t) { var e = document.createElement("a"), n = window.location, r = {}; e.href = t, r.port = e.port; var o = e.href.split("://"); return !r.port && o[1] && (r.port = o[1].split("/")[0].split("@").pop().split(":")[1]), r.port && "0" !== r.port || (r.port = "https" === o[0] ? "443" : "80"), r.hostname = e.hostname || n.hostname, r.pathname = e.pathname, r.protocol = o[0], "/" !== r.pathname.charAt(0) && (r.pathname = "/" + r.pathname), r.sameOrigin = !e.hostname || e.hostname === document.domain && e.port === n.port && e.protocol === n.protocol, r } }, {}], gos: [function (t, e) { e.exports = t("7eSDFh") }, {}], "7eSDFh": [function (t, e) { function n(t, e, n) { if (r.call(t, e)) return t[e]; var o = n(); if (Object.defineProperty && Object.keys) try { return Object.defineProperty(t, e, { value: o, writable: !0, enumerable: !1 }), o } catch (i) { } return t[e] = o, o } var r = Object.prototype.hasOwnProperty; e.exports = n }, {}], D5DuLP: [function (t, e) { function n(t, e, n) { return r.listeners(t).length ? r.emit(t, e, n) : (o[t] || (o[t] = []), void o[t].push(e)) } var r = t("ee").create(), o = {}; e.exports = n, n.ee = r, r.q = o }, { ee: "QJf3ax" }], handle: [function (t, e) { e.exports = t("D5DuLP") }, {}], XL7HBI: [function (t, e) { function n(t) { var e = typeof t; return !t || "object" !== e && "function" !== e ? -1 : t === window ? 0 : i(t, o, function () { return r++ }) } var r = 1, o = "nr@id", i = t("gos"); e.exports = n }, { gos: "7eSDFh" }], id: [function (t, e) { e.exports = t("XL7HBI") }, {}], loader: [function (t, e) { e.exports = t("G9z0Bl") }, {}], G9z0Bl: [function (t, e) { function n() { var t = l.info = NREUM.info; if (t && t.licenseKey && t.applicationID && f && f.body) { s(h, function (e, n) { e in t || (t[e] = n) }), l.proto = "https" === p.split(":")[0] || t.sslForHttp ? "https://" : "http://", a("mark", ["onload", i()]); var e = f.createElement("script"); e.src = l.proto + t.agent, f.body.appendChild(e) } } function r() { "complete" === f.readyState && o() } function o() { a("mark", ["domContent", i()]) } function i() { return (new Date).getTime() } var a = t("handle"), s = t(1), c = window, f = c.document, u = "addEventListener", d = "attachEvent", p = ("" + location).split("?")[0], h = { beacon: "bam.nr-data.net", errorBeacon: "bam.nr-data.net", agent: "js-agent.newrelic.com/nr-515.min.js" }, l = e.exports = { offset: i(), origin: p, features: {} }; f[u] ? (f[u]("DOMContentLoaded", o, !1), c[u]("load", n, !1)) : (f[d]("onreadystatechange", r), c[d]("onload", n)), a("mark", ["firstbyte", i()]) }, { 1: 20, handle: "D5DuLP" }], 20: [function (t, e) { function n(t, e) { var n = [], o = "", i = 0; for (o in t) r.call(t, o) && (n[i] = e(o, t[o]), i += 1); return n } var r = Object.prototype.hasOwnProperty; e.exports = n }, {}], 21: [function (t, e) { function n(t, e, n) { e || (e = 0), "undefined" == typeof n && (n = t ? t.length : 0); for (var r = -1, o = n - e || 0, i = Array(0 > o ? 0 : o) ; ++r < o;) i[r] = t[e + r]; return i } e.exports = n }, {}], 22: [function (t, e) { function n(t) { return !(t && "function" == typeof t && t.apply && !t[i]) } var r = t("ee"), o = t(1), i = "nr@wrapper", a = Object.prototype.hasOwnProperty; e.exports = function (t) { function e(t, e, r, a) { function nrWrapper() { var n, i, s, f; try { i = this, n = o(arguments), s = r && r(n, i) || {} } catch (d) { u([d, "", [n, i, a], s]) } c(e + "start", [n, i, a], s); try { return f = t.apply(i, n) } catch (p) { throw c(e + "err", [n, i, p], s), p } finally { c(e + "end", [n, i, f], s) } } return n(t) ? t : (e || (e = ""), nrWrapper[i] = !0, f(t, nrWrapper), nrWrapper) } function s(t, r, o, i) { o || (o = ""); var a, s, c, f = "-" === o.charAt(0); for (c = 0; c < r.length; c++) s = r[c], a = t[s], n(a) || (t[s] = e(a, f ? s + o : o, i, s, t)) } function c(e, n, r) { try { t.emit(e, n, r) } catch (o) { u([o, e, n, r]) } } function f(t, e) { if (Object.defineProperty && Object.keys) try { var n = Object.keys(t); return n.forEach(function (n) { Object.defineProperty(e, n, { get: function () { return t[n] }, set: function (e) { return t[n] = e, e } }) }), e } catch (r) { u([r]) } for (var o in t) a.call(t, o) && (e[o] = t[o]); return e } function u(e) { try { t.emit("internal-error", e) } catch (n) { } } return t || (t = r), e.inPlace = s, e.flag = i, e } }, { 1: 21, ee: "QJf3ax" }] }, {}, ["G9z0Bl", 3, 10, 4]);
        ; NREUM.info = { beacon: "bam.nr-data.net", errorBeacon: "bam.nr-data.net", licenseKey: licenseKey, applicationID: appId, sa: 1, agent: "js-agent.newrelic.com/nr-515.min.js" }
        ;
    }
};

module.exports = newRelic;

},{}],4:[function(require,module,exports){

var Raygun, rayGun;
Raygun = require('raygun4js');

rayGun = function (config) {
    var apiKey;
    if (config == null) {
        config = {};
    }
    apiKey = config.RAYGUN_API_KEY;
    if (apiKey && window.location.hostname !== 'localhost') {
        if (Raygun != null) {
            Raygun.init(apiKey, {
                ignore3rdPartyErrors: true
            }).attach();
        }
        return Raygun != null ? Raygun.filterSensitiveData(['password']) : void 0;
    }
};

module.exports = rayGun;
},{"raygun4js":"raygun4js"}],5:[function(require,module,exports){

var userSnap = function (config) {
    var apiKey, s, x;
    if (config == null) {
        config = {};
    }
    apiKey = config.USER_SNAP_API_KEY;
    if (apiKey && window.location.hostname !== 'localhost') {
        window.usersnapconfig = {
            mode: 'report',
            shortcut: true,
            beforeOpen: function (obj) {
                return UserSnap.setEmailBox(Doc.app.user.userName);
            }
        };
        s = document.createElement('script');
        s.type = 'text/javascript';
        s.async = true;
        s.src = '//api.usersnap.com/load/' + apiKey + '.js';
        x = document.getElementsByTagName('head')[0];
        return x.appendChild(s);
    }
};

module.exports = userSnap;



},{}],6:[function(require,module,exports){
var riot = require('riot');
riot.tag('mm-footer', '<div class="page-footer"> <div class="page-footer-inner"> 2015 &copy; Cabrera Research Lab </div> <div class="scroll-to-top"> <i class="icon-arrow-up"></i> </div> </div>', function(opts) {


});
},{"riot":"riot"}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvZW50cnkuanMiLCJzcmMvanMvaW50ZWdyYXRpb25zL2dvb2dsZWFuYWx5dGljcy5qcyIsInNyYy9qcy9pbnRlZ3JhdGlvbnMvbmV3cmVsaWMuanMiLCJzcmMvanMvaW50ZWdyYXRpb25zL3JheWd1bi5qcyIsInNyYy9qcy9pbnRlZ3JhdGlvbnMvdXNlcnNuYXAuanMiLCJzcmMvdGFncy9mb290ZXIudGFnIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiXHJcbnJpb3QgPSByZXF1aXJlKCdyaW90Jyk7XHJcbnJlcXVpcmUoJ2pxdWVyeScpO1xyXG5yZXF1aXJlKCdsb2Rhc2gnKTtcclxuLy9yZXF1aXJlKCcuL2pzL2ludGVncmF0aW9ucy9hdXRoMCcpO1xyXG5yZXF1aXJlKCcuL2pzL2ludGVncmF0aW9ucy9nb29nbGVhbmFseXRpY3MnKTtcclxucmVxdWlyZSgnLi9qcy9pbnRlZ3JhdGlvbnMvbmV3cmVsaWMnKTtcclxucmVxdWlyZSgnLi9qcy9pbnRlZ3JhdGlvbnMvcmF5Z3VuJyk7XHJcbnJlcXVpcmUoJy4vanMvaW50ZWdyYXRpb25zL3VzZXJzbmFwJyk7XHJcblxyXG5yZXF1aXJlKCcuL3RhZ3MvZm9vdGVyLnRhZycpO1xyXG5yaW90Lm1vdW50KCcqJyk7IiwiXG52YXIgZ29vZ2xlQW5hbHl0aWNzID0gZnVuY3Rpb24gKGNvbmZpZykge1xyXG4gICAgdmFyIGFwaUtleSwgZSwgcjtcbiAgICBpZiAoY29uZmlnID09IG51bGwpIHtcclxuICAgICAgICBjb25maWcgPSB7fTtcclxuICAgIH1cbiAgICBhcGlLZXkgPSBjb25maWcuR09PR0xFX0FOQUxZVElDU19UUkFDS0lOR19JRDtcbiAgICBpZiAoYXBpS2V5ICYmIHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSAhPT0gJ2xvY2FsaG9zdCcpIHtcclxuICAgICAgICB3aW5kb3cuR29vZ2xlQW5hbHl0aWNzT2JqZWN0ID0gJ2dhJztcbiAgICAgICAgd2luZG93LmdhIHx8ICh3aW5kb3cuZ2EgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICh3aW5kb3cuZ2EucSA9IHdpbmRvdy5nYS5xIHx8IFtdKS5wdXNoKGFyZ3VtZW50cyk7XHJcbiAgICAgICAgfSk7XG4gICAgICAgIHdpbmRvdy5nYS5nYSA9ICsobmV3IERhdGUpO1xuICAgICAgICBlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICAgIHIgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0JylbMF07XG4gICAgICAgIGUuc3JjID0gJy8vd3d3Lmdvb2dsZS1hbmFseXRpY3MuY29tL2FuYWx5dGljcy5qcyc7XG4gICAgICAgIHIucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZSwgcik7XG4gICAgICAgIGdhKCdjcmVhdGUnLCBhcGlLZXkpO1xuICAgICAgICByZXR1cm4gZ2EoJ3NlbmQnLCAncGFnZXZpZXcnKTtcclxuICAgIH1cclxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBnb29nbGVBbmFseXRpY3M7XG5cblxuIiwiXG52YXIgbmV3UmVsaWMgPSBmdW5jdGlvbiAoY29uZmlnKSB7XHJcbiAgICB2YXIgYXBwSWQsIGxpY2Vuc2VLZXk7XG4gICAgaWYgKGNvbmZpZyA9PSBudWxsKSB7XHJcbiAgICAgICAgY29uZmlnID0ge307XHJcbiAgICB9XG4gICAgbGljZW5zZUtleSA9IGNvbmZpZy5ORVdfUkVMSUNfTElDRU5TRV9LRVk7XG4gICAgYXBwSWQgPSBjb25maWcuTkVXX1JFTElDX0FQUExJQ0FUSU9OX0lEO1xuICAgIGlmIChsaWNlbnNlS2V5ICYmIGFwcElkICYmIHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSAhPT0gJ2xvY2FsaG9zdCcpIHtcclxuICAgICAgICByZXR1cm4gd2luZG93Lk5SRVVNIHx8IChOUkVVTSA9IHt9KSwgX19ucl9yZXF1aXJlID0gZnVuY3Rpb24gKHQsIGUsIG4pIHsgZnVuY3Rpb24gcihuKSB7IGlmICghZVtuXSkgeyB2YXIgbyA9IGVbbl0gPSB7IGV4cG9ydHM6IHt9IH07IHRbbl1bMF0uY2FsbChvLmV4cG9ydHMsIGZ1bmN0aW9uIChlKSB7IHZhciBvID0gdFtuXVsxXVtlXTsgcmV0dXJuIHIobyA/IG8gOiBlKSB9LCBvLCBvLmV4cG9ydHMpIH0gcmV0dXJuIGVbbl0uZXhwb3J0cyB9IGlmIChcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIF9fbnJfcmVxdWlyZSkgcmV0dXJuIF9fbnJfcmVxdWlyZTsgZm9yICh2YXIgbyA9IDA7IG8gPCBuLmxlbmd0aDsgbysrKSByKG5bb10pOyByZXR1cm4gciB9KHsgUUpmM2F4OiBbZnVuY3Rpb24gKHQsIGUpIHsgZnVuY3Rpb24gbih0KSB7IGZ1bmN0aW9uIGUoZSwgbiwgYSkgeyB0ICYmIHQoZSwgbiwgYSksIGEgfHwgKGEgPSB7fSk7IGZvciAodmFyIGMgPSBzKGUpLCBmID0gYy5sZW5ndGgsIHUgPSBpKGEsIG8sIHIpLCBkID0gMDsgZiA+IGQ7IGQrKykgY1tkXS5hcHBseSh1LCBuKTsgcmV0dXJuIHUgfSBmdW5jdGlvbiBhKHQsIGUpIHsgZlt0XSA9IHModCkuY29uY2F0KGUpIH0gZnVuY3Rpb24gcyh0KSB7IHJldHVybiBmW3RdIHx8IFtdIH0gZnVuY3Rpb24gYygpIHsgcmV0dXJuIG4oZSkgfSB2YXIgZiA9IHt9OyByZXR1cm4geyBvbjogYSwgZW1pdDogZSwgY3JlYXRlOiBjLCBsaXN0ZW5lcnM6IHMsIF9ldmVudHM6IGYgfSB9IGZ1bmN0aW9uIHIoKSB7IHJldHVybiB7fSB9IHZhciBvID0gXCJuckBjb250ZXh0XCIsIGkgPSB0KFwiZ29zXCIpOyBlLmV4cG9ydHMgPSBuKCkgfSwgeyBnb3M6IFwiN2VTREZoXCIgfV0sIGVlOiBbZnVuY3Rpb24gKHQsIGUpIHsgZS5leHBvcnRzID0gdChcIlFKZjNheFwiKSB9LCB7fV0sIDM6IFtmdW5jdGlvbiAodCkgeyBmdW5jdGlvbiBlKHQsIGUsIG4sIGksIHMpIHsgdHJ5IHsgYyA/IGMgLT0gMSA6IHIoXCJlcnJcIiwgW3MgfHwgbmV3IFVuY2F1Z2h0RXhjZXB0aW9uKHQsIGUsIG4pXSkgfSBjYXRjaCAoZikgeyB0cnkgeyByKFwiaWVyclwiLCBbZiwgKG5ldyBEYXRlKS5nZXRUaW1lKCksICEwXSkgfSBjYXRjaCAodSkgeyB9IH0gcmV0dXJuIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgYSA/IGEuYXBwbHkodGhpcywgbyhhcmd1bWVudHMpKSA6ICExIH0gZnVuY3Rpb24gVW5jYXVnaHRFeGNlcHRpb24odCwgZSwgbikgeyB0aGlzLm1lc3NhZ2UgPSB0IHx8IFwiVW5jYXVnaHQgZXJyb3Igd2l0aCBubyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXCIsIHRoaXMuc291cmNlVVJMID0gZSwgdGhpcy5saW5lID0gbiB9IGZ1bmN0aW9uIG4odCkgeyByKFwiZXJyXCIsIFt0LCAobmV3IERhdGUpLmdldFRpbWUoKV0pIH0gdmFyIHIgPSB0KFwiaGFuZGxlXCIpLCBvID0gdCg1KSwgaSA9IHQoXCJlZVwiKSwgYSA9IHdpbmRvdy5vbmVycm9yLCBzID0gITEsIGMgPSAwOyB0KFwibG9hZGVyXCIpLmZlYXR1cmVzLmVyciA9ICEwLCB3aW5kb3cub25lcnJvciA9IGUsIE5SRVVNLm5vdGljZUVycm9yID0gbjsgdHJ5IHsgdGhyb3cgbmV3IEVycm9yIH0gY2F0Y2ggKGYpIHsgXCJzdGFja1wiIGluIGYgJiYgKHQoMSksIHQoNCksIFwiYWRkRXZlbnRMaXN0ZW5lclwiIGluIHdpbmRvdyAmJiB0KDIpLCB3aW5kb3cuWE1MSHR0cFJlcXVlc3QgJiYgWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlICYmIFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyICYmIHQoMyksIHMgPSAhMCkgfSBpLm9uKFwiZm4tc3RhcnRcIiwgZnVuY3Rpb24gKCkgeyBzICYmIChjICs9IDEpIH0pLCBpLm9uKFwiZm4tZXJyXCIsIGZ1bmN0aW9uICh0LCBlLCByKSB7IHMgJiYgKHRoaXMudGhyb3duID0gITAsIG4ocikpIH0pLCBpLm9uKFwiZm4tZW5kXCIsIGZ1bmN0aW9uICgpIHsgcyAmJiAhdGhpcy50aHJvd24gJiYgYyA+IDAgJiYgKGMgLT0gMSkgfSksIGkub24oXCJpbnRlcm5hbC1lcnJvclwiLCBmdW5jdGlvbiAodCkgeyByKFwiaWVyclwiLCBbdCwgKG5ldyBEYXRlKS5nZXRUaW1lKCksICEwXSkgfSkgfSwgeyAxOiA4LCAyOiA1LCAzOiA5LCA0OiA3LCA1OiAyMSwgZWU6IFwiUUpmM2F4XCIsIGhhbmRsZTogXCJENUR1TFBcIiwgbG9hZGVyOiBcIkc5ejBCbFwiIH1dLCA0OiBbZnVuY3Rpb24gKHQpIHsgZnVuY3Rpb24gZSgpIHsgfSBpZiAod2luZG93LnBlcmZvcm1hbmNlICYmIHdpbmRvdy5wZXJmb3JtYW5jZS50aW1pbmcgJiYgd2luZG93LnBlcmZvcm1hbmNlLmdldEVudHJpZXNCeVR5cGUpIHsgdmFyIG4gPSB0KFwiZWVcIiksIHIgPSB0KFwiaGFuZGxlXCIpLCBvID0gdCgyKTsgdChcImxvYWRlclwiKS5mZWF0dXJlcy5zdG4gPSAhMCwgdCgxKSwgbi5vbihcImZuLXN0YXJ0XCIsIGZ1bmN0aW9uICh0KSB7IHZhciBlID0gdFswXTsgZSBpbnN0YW5jZW9mIEV2ZW50ICYmICh0aGlzLmJzdFN0YXJ0ID0gRGF0ZS5ub3coKSkgfSksIG4ub24oXCJmbi1lbmRcIiwgZnVuY3Rpb24gKHQsIGUpIHsgdmFyIG4gPSB0WzBdOyBuIGluc3RhbmNlb2YgRXZlbnQgJiYgcihcImJzdFwiLCBbbiwgZSwgdGhpcy5ic3RTdGFydCwgRGF0ZS5ub3coKV0pIH0pLCBvLm9uKFwiZm4tc3RhcnRcIiwgZnVuY3Rpb24gKHQsIGUsIG4pIHsgdGhpcy5ic3RTdGFydCA9IERhdGUubm93KCksIHRoaXMuYnN0VHlwZSA9IG4gfSksIG8ub24oXCJmbi1lbmRcIiwgZnVuY3Rpb24gKHQsIGUpIHsgcihcImJzdFRpbWVyXCIsIFtlLCB0aGlzLmJzdFN0YXJ0LCBEYXRlLm5vdygpLCB0aGlzLmJzdFR5cGVdKSB9KSwgbi5vbihcInB1c2hTdGF0ZS1zdGFydFwiLCBmdW5jdGlvbiAoKSB7IHRoaXMudGltZSA9IERhdGUubm93KCksIHRoaXMuc3RhcnRQYXRoID0gbG9jYXRpb24ucGF0aG5hbWUgKyBsb2NhdGlvbi5oYXNoIH0pLCBuLm9uKFwicHVzaFN0YXRlLWVuZFwiLCBmdW5jdGlvbiAoKSB7IHIoXCJic3RIaXN0XCIsIFtsb2NhdGlvbi5wYXRobmFtZSArIGxvY2F0aW9uLmhhc2gsIHRoaXMuc3RhcnRQYXRoLCB0aGlzLnRpbWVdKSB9KSwgXCJhZGRFdmVudExpc3RlbmVyXCIgaW4gd2luZG93LnBlcmZvcm1hbmNlICYmICh3aW5kb3cucGVyZm9ybWFuY2UuYWRkRXZlbnRMaXN0ZW5lcihcIndlYmtpdHJlc291cmNldGltaW5nYnVmZmVyZnVsbFwiLCBmdW5jdGlvbiAoKSB7IHIoXCJic3RSZXNvdXJjZVwiLCBbd2luZG93LnBlcmZvcm1hbmNlLmdldEVudHJpZXNCeVR5cGUoXCJyZXNvdXJjZVwiKV0pLCB3aW5kb3cucGVyZm9ybWFuY2Uud2Via2l0Q2xlYXJSZXNvdXJjZVRpbWluZ3MoKSB9LCAhMSksIHdpbmRvdy5wZXJmb3JtYW5jZS5hZGRFdmVudExpc3RlbmVyKFwicmVzb3VyY2V0aW1pbmdidWZmZXJmdWxsXCIsIGZ1bmN0aW9uICgpIHsgcihcImJzdFJlc291cmNlXCIsIFt3aW5kb3cucGVyZm9ybWFuY2UuZ2V0RW50cmllc0J5VHlwZShcInJlc291cmNlXCIpXSksIHdpbmRvdy5wZXJmb3JtYW5jZS5jbGVhclJlc291cmNlVGltaW5ncygpIH0sICExKSksIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgZSwgITEpLCBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5cHJlc3NcIiwgZSwgITEpLCBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZSwgITEpIH0gfSwgeyAxOiA2LCAyOiA4LCBlZTogXCJRSmYzYXhcIiwgaGFuZGxlOiBcIkQ1RHVMUFwiLCBsb2FkZXI6IFwiRzl6MEJsXCIgfV0sIDU6IFtmdW5jdGlvbiAodCwgZSkgeyBmdW5jdGlvbiBuKHQpIHsgaS5pblBsYWNlKHQsIFtcImFkZEV2ZW50TGlzdGVuZXJcIiwgXCJyZW1vdmVFdmVudExpc3RlbmVyXCJdLCBcIi1cIiwgcikgfSBmdW5jdGlvbiByKHQpIHsgcmV0dXJuIHRbMV0gfSB2YXIgbyA9ICh0KDEpLCB0KFwiZWVcIikuY3JlYXRlKCkpLCBpID0gdCgyKShvKSwgYSA9IHQoXCJnb3NcIik7IGlmIChlLmV4cG9ydHMgPSBvLCBuKHdpbmRvdyksIFwiZ2V0UHJvdG90eXBlT2ZcIiBpbiBPYmplY3QpIHsgZm9yICh2YXIgcyA9IGRvY3VtZW50OyBzICYmICFzLmhhc093blByb3BlcnR5KFwiYWRkRXZlbnRMaXN0ZW5lclwiKSA7KSBzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHMpOyBzICYmIG4ocyk7IGZvciAodmFyIGMgPSBYTUxIdHRwUmVxdWVzdC5wcm90b3R5cGU7IGMgJiYgIWMuaGFzT3duUHJvcGVydHkoXCJhZGRFdmVudExpc3RlbmVyXCIpIDspIGMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoYyk7IGMgJiYgbihjKSB9IGVsc2UgWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KFwiYWRkRXZlbnRMaXN0ZW5lclwiKSAmJiBuKFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZSk7IG8ub24oXCJhZGRFdmVudExpc3RlbmVyLXN0YXJ0XCIsIGZ1bmN0aW9uICh0KSB7IGlmICh0WzFdKSB7IHZhciBlID0gdFsxXTsgXCJmdW5jdGlvblwiID09IHR5cGVvZiBlID8gdGhpcy53cmFwcGVkID0gdFsxXSA9IGEoZSwgXCJuckB3cmFwcGVkXCIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGkoZSwgXCJmbi1cIiwgbnVsbCwgZS5uYW1lIHx8IFwiYW5vbnltb3VzXCIpIH0pIDogXCJmdW5jdGlvblwiID09IHR5cGVvZiBlLmhhbmRsZUV2ZW50ICYmIGkuaW5QbGFjZShlLCBbXCJoYW5kbGVFdmVudFwiXSwgXCJmbi1cIikgfSB9KSwgby5vbihcInJlbW92ZUV2ZW50TGlzdGVuZXItc3RhcnRcIiwgZnVuY3Rpb24gKHQpIHsgdmFyIGUgPSB0aGlzLndyYXBwZWQ7IGUgJiYgKHRbMV0gPSBlKSB9KSB9LCB7IDE6IDIxLCAyOiAyMiwgZWU6IFwiUUpmM2F4XCIsIGdvczogXCI3ZVNERmhcIiB9XSwgNjogW2Z1bmN0aW9uICh0LCBlKSB7IHZhciBuID0gKHQoMiksIHQoXCJlZVwiKS5jcmVhdGUoKSksIHIgPSB0KDEpKG4pOyBlLmV4cG9ydHMgPSBuLCByLmluUGxhY2Uod2luZG93Lmhpc3RvcnksIFtcInB1c2hTdGF0ZVwiXSwgXCItXCIpIH0sIHsgMTogMjIsIDI6IDIxLCBlZTogXCJRSmYzYXhcIiB9XSwgNzogW2Z1bmN0aW9uICh0LCBlKSB7IHZhciBuID0gKHQoMiksIHQoXCJlZVwiKS5jcmVhdGUoKSksIHIgPSB0KDEpKG4pOyBlLmV4cG9ydHMgPSBuLCByLmluUGxhY2Uod2luZG93LCBbXCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWVcIiwgXCJtb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWVcIiwgXCJ3ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWVcIiwgXCJtc1JlcXVlc3RBbmltYXRpb25GcmFtZVwiXSwgXCJyYWYtXCIpLCBuLm9uKFwicmFmLXN0YXJ0XCIsIGZ1bmN0aW9uICh0KSB7IHRbMF0gPSByKHRbMF0sIFwiZm4tXCIpIH0pIH0sIHsgMTogMjIsIDI6IDIxLCBlZTogXCJRSmYzYXhcIiB9XSwgODogW2Z1bmN0aW9uICh0LCBlKSB7IGZ1bmN0aW9uIG4odCwgZSwgbikgeyB2YXIgciA9IHRbMF07IFwic3RyaW5nXCIgPT0gdHlwZW9mIHIgJiYgKHIgPSBuZXcgRnVuY3Rpb24ocikpLCB0WzBdID0gbyhyLCBcImZuLVwiLCBudWxsLCBuKSB9IHZhciByID0gKHQoMiksIHQoXCJlZVwiKS5jcmVhdGUoKSksIG8gPSB0KDEpKHIpOyBlLmV4cG9ydHMgPSByLCBvLmluUGxhY2Uod2luZG93LCBbXCJzZXRUaW1lb3V0XCIsIFwic2V0SW50ZXJ2YWxcIiwgXCJzZXRJbW1lZGlhdGVcIl0sIFwic2V0VGltZXItXCIpLCByLm9uKFwic2V0VGltZXItc3RhcnRcIiwgbikgfSwgeyAxOiAyMiwgMjogMjEsIGVlOiBcIlFKZjNheFwiIH1dLCA5OiBbZnVuY3Rpb24gKHQsIGUpIHsgZnVuY3Rpb24gbigpIHsgYy5pblBsYWNlKHRoaXMsIGQsIFwiZm4tXCIpIH0gZnVuY3Rpb24gcih0LCBlKSB7IGMuaW5QbGFjZShlLCBbXCJvbnJlYWR5c3RhdGVjaGFuZ2VcIl0sIFwiZm4tXCIpIH0gZnVuY3Rpb24gbyh0LCBlKSB7IHJldHVybiBlIH0gdmFyIGkgPSB0KFwiZWVcIikuY3JlYXRlKCksIGEgPSB0KDEpLCBzID0gdCgyKSwgYyA9IHMoaSksIGYgPSBzKGEpLCB1ID0gd2luZG93LlhNTEh0dHBSZXF1ZXN0LCBkID0gW1wib25sb2FkXCIsIFwib25lcnJvclwiLCBcIm9uYWJvcnRcIiwgXCJvbmxvYWRzdGFydFwiLCBcIm9ubG9hZGVuZFwiLCBcIm9ucHJvZ3Jlc3NcIiwgXCJvbnRpbWVvdXRcIl07IGUuZXhwb3J0cyA9IGksIHdpbmRvdy5YTUxIdHRwUmVxdWVzdCA9IGZ1bmN0aW9uICh0KSB7IHZhciBlID0gbmV3IHUodCk7IHRyeSB7IGkuZW1pdChcIm5ldy14aHJcIiwgW10sIGUpLCBmLmluUGxhY2UoZSwgW1wiYWRkRXZlbnRMaXN0ZW5lclwiLCBcInJlbW92ZUV2ZW50TGlzdGVuZXJcIl0sIFwiLVwiLCBmdW5jdGlvbiAodCwgZSkgeyByZXR1cm4gZSB9KSwgZS5hZGRFdmVudExpc3RlbmVyKFwicmVhZHlzdGF0ZWNoYW5nZVwiLCBuLCAhMSkgfSBjYXRjaCAocikgeyB0cnkgeyBpLmVtaXQoXCJpbnRlcm5hbC1lcnJvclwiLCBbcl0pIH0gY2F0Y2ggKG8pIHsgfSB9IHJldHVybiBlIH0sIHdpbmRvdy5YTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUgPSB1LnByb3RvdHlwZSwgYy5pblBsYWNlKFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZSwgW1wib3BlblwiLCBcInNlbmRcIl0sIFwiLXhoci1cIiwgbyksIGkub24oXCJzZW5kLXhoci1zdGFydFwiLCByKSwgaS5vbihcIm9wZW4teGhyLXN0YXJ0XCIsIHIpIH0sIHsgMTogNSwgMjogMjIsIGVlOiBcIlFKZjNheFwiIH1dLCAxMDogW2Z1bmN0aW9uICh0KSB7IGZ1bmN0aW9uIGUodCkgeyBpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgdCAmJiB0Lmxlbmd0aCkgcmV0dXJuIHQubGVuZ3RoOyBpZiAoXCJvYmplY3RcIiAhPSB0eXBlb2YgdCkgcmV0dXJuIHZvaWQgMDsgaWYgKFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIEFycmF5QnVmZmVyICYmIHQgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciAmJiB0LmJ5dGVMZW5ndGgpIHJldHVybiB0LmJ5dGVMZW5ndGg7IGlmIChcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBCbG9iICYmIHQgaW5zdGFuY2VvZiBCbG9iICYmIHQuc2l6ZSkgcmV0dXJuIHQuc2l6ZTsgaWYgKFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIEZvcm1EYXRhICYmIHQgaW5zdGFuY2VvZiBGb3JtRGF0YSkgcmV0dXJuIHZvaWQgMDsgdHJ5IHsgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHQpLmxlbmd0aCB9IGNhdGNoIChlKSB7IHJldHVybiB2b2lkIDAgfSB9IGZ1bmN0aW9uIG4odCkgeyB2YXIgbiA9IHRoaXMucGFyYW1zLCByID0gdGhpcy5tZXRyaWNzOyBpZiAoIXRoaXMuZW5kZWQpIHsgdGhpcy5lbmRlZCA9ICEwOyBmb3IgKHZhciBpID0gMDsgYyA+IGk7IGkrKykgdC5yZW1vdmVFdmVudExpc3RlbmVyKHNbaV0sIHRoaXMubGlzdGVuZXIsICExKTsgaWYgKCFuLmFib3J0ZWQpIHsgaWYgKHIuZHVyYXRpb24gPSAobmV3IERhdGUpLmdldFRpbWUoKSAtIHRoaXMuc3RhcnRUaW1lLCA0ID09PSB0LnJlYWR5U3RhdGUpIHsgbi5zdGF0dXMgPSB0LnN0YXR1czsgdmFyIGEgPSB0LnJlc3BvbnNlVHlwZSwgZiA9IFwiYXJyYXlidWZmZXJcIiA9PT0gYSB8fCBcImJsb2JcIiA9PT0gYSB8fCBcImpzb25cIiA9PT0gYSA/IHQucmVzcG9uc2UgOiB0LnJlc3BvbnNlVGV4dCwgdSA9IGUoZik7IGlmICh1ICYmIChyLnJ4U2l6ZSA9IHUpLCB0aGlzLnNhbWVPcmlnaW4pIHsgdmFyIGQgPSB0LmdldFJlc3BvbnNlSGVhZGVyKFwiWC1OZXdSZWxpYy1BcHAtRGF0YVwiKTsgZCAmJiAobi5jYXQgPSBkLnNwbGl0KFwiLCBcIikucG9wKCkpIH0gfSBlbHNlIG4uc3RhdHVzID0gMDsgci5jYlRpbWUgPSB0aGlzLmNiVGltZSwgbyhcInhoclwiLCBbbiwgciwgdGhpcy5zdGFydFRpbWVdKSB9IH0gfSBmdW5jdGlvbiByKHQsIGUpIHsgdmFyIG4gPSBpKGUpLCByID0gdC5wYXJhbXM7IHIuaG9zdCA9IG4uaG9zdG5hbWUgKyBcIjpcIiArIG4ucG9ydCwgci5wYXRobmFtZSA9IG4ucGF0aG5hbWUsIHQuc2FtZU9yaWdpbiA9IG4uc2FtZU9yaWdpbiB9IGlmICh3aW5kb3cuWE1MSHR0cFJlcXVlc3QgJiYgWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlICYmIFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyICYmICEvQ3JpT1MvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpIHsgdChcImxvYWRlclwiKS5mZWF0dXJlcy54aHIgPSAhMDsgdmFyIG8gPSB0KFwiaGFuZGxlXCIpLCBpID0gdCgyKSwgYSA9IHQoXCJlZVwiKSwgcyA9IFtcImxvYWRcIiwgXCJlcnJvclwiLCBcImFib3J0XCIsIFwidGltZW91dFwiXSwgYyA9IHMubGVuZ3RoLCBmID0gdCgxKTsgdCg0KSwgdCgzKSwgYS5vbihcIm5ldy14aHJcIiwgZnVuY3Rpb24gKCkgeyB0aGlzLnRvdGFsQ2JzID0gMCwgdGhpcy5jYWxsZWQgPSAwLCB0aGlzLmNiVGltZSA9IDAsIHRoaXMuZW5kID0gbiwgdGhpcy5lbmRlZCA9ICExLCB0aGlzLnhockd1aWRzID0ge30gfSksIGEub24oXCJvcGVuLXhoci1zdGFydFwiLCBmdW5jdGlvbiAodCkgeyB0aGlzLnBhcmFtcyA9IHsgbWV0aG9kOiB0WzBdIH0sIHIodGhpcywgdFsxXSksIHRoaXMubWV0cmljcyA9IHt9IH0pLCBhLm9uKFwib3Blbi14aHItZW5kXCIsIGZ1bmN0aW9uICh0LCBlKSB7IFwibG9hZGVyX2NvbmZpZ1wiIGluIE5SRVVNICYmIFwieHBpZFwiIGluIE5SRVVNLmxvYWRlcl9jb25maWcgJiYgdGhpcy5zYW1lT3JpZ2luICYmIGUuc2V0UmVxdWVzdEhlYWRlcihcIlgtTmV3UmVsaWMtSURcIiwgTlJFVU0ubG9hZGVyX2NvbmZpZy54cGlkKSB9KSwgYS5vbihcInNlbmQteGhyLXN0YXJ0XCIsIGZ1bmN0aW9uICh0LCBuKSB7IHZhciByID0gdGhpcy5tZXRyaWNzLCBvID0gdFswXSwgaSA9IHRoaXM7IGlmIChyICYmIG8pIHsgdmFyIGYgPSBlKG8pOyBmICYmIChyLnR4U2l6ZSA9IGYpIH0gdGhpcy5zdGFydFRpbWUgPSAobmV3IERhdGUpLmdldFRpbWUoKSwgdGhpcy5saXN0ZW5lciA9IGZ1bmN0aW9uICh0KSB7IHRyeSB7IFwiYWJvcnRcIiA9PT0gdC50eXBlICYmIChpLnBhcmFtcy5hYm9ydGVkID0gITApLCAoXCJsb2FkXCIgIT09IHQudHlwZSB8fCBpLmNhbGxlZCA9PT0gaS50b3RhbENicyAmJiAoaS5vbmxvYWRDYWxsZWQgfHwgXCJmdW5jdGlvblwiICE9IHR5cGVvZiBuLm9ubG9hZCkpICYmIGkuZW5kKG4pIH0gY2F0Y2ggKGUpIHsgdHJ5IHsgYS5lbWl0KFwiaW50ZXJuYWwtZXJyb3JcIiwgW2VdKSB9IGNhdGNoIChyKSB7IH0gfSB9OyBmb3IgKHZhciB1ID0gMDsgYyA+IHU7IHUrKykgbi5hZGRFdmVudExpc3RlbmVyKHNbdV0sIHRoaXMubGlzdGVuZXIsICExKSB9KSwgYS5vbihcInhoci1jYi10aW1lXCIsIGZ1bmN0aW9uICh0LCBlLCBuKSB7IHRoaXMuY2JUaW1lICs9IHQsIGUgPyB0aGlzLm9ubG9hZENhbGxlZCA9ICEwIDogdGhpcy5jYWxsZWQgKz0gMSwgdGhpcy5jYWxsZWQgIT09IHRoaXMudG90YWxDYnMgfHwgIXRoaXMub25sb2FkQ2FsbGVkICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2Ygbi5vbmxvYWQgfHwgdGhpcy5lbmQobikgfSksIGEub24oXCJ4aHItbG9hZC1hZGRlZFwiLCBmdW5jdGlvbiAodCwgZSkgeyB2YXIgbiA9IFwiXCIgKyBmKHQpICsgISFlOyB0aGlzLnhockd1aWRzICYmICF0aGlzLnhockd1aWRzW25dICYmICh0aGlzLnhockd1aWRzW25dID0gITAsIHRoaXMudG90YWxDYnMgKz0gMSkgfSksIGEub24oXCJ4aHItbG9hZC1yZW1vdmVkXCIsIGZ1bmN0aW9uICh0LCBlKSB7IHZhciBuID0gXCJcIiArIGYodCkgKyAhIWU7IHRoaXMueGhyR3VpZHMgJiYgdGhpcy54aHJHdWlkc1tuXSAmJiAoZGVsZXRlIHRoaXMueGhyR3VpZHNbbl0sIHRoaXMudG90YWxDYnMgLT0gMSkgfSksIGEub24oXCJhZGRFdmVudExpc3RlbmVyLWVuZFwiLCBmdW5jdGlvbiAodCwgZSkgeyBlIGluc3RhbmNlb2YgWE1MSHR0cFJlcXVlc3QgJiYgXCJsb2FkXCIgPT09IHRbMF0gJiYgYS5lbWl0KFwieGhyLWxvYWQtYWRkZWRcIiwgW3RbMV0sIHRbMl1dLCBlKSB9KSwgYS5vbihcInJlbW92ZUV2ZW50TGlzdGVuZXItZW5kXCIsIGZ1bmN0aW9uICh0LCBlKSB7IGUgaW5zdGFuY2VvZiBYTUxIdHRwUmVxdWVzdCAmJiBcImxvYWRcIiA9PT0gdFswXSAmJiBhLmVtaXQoXCJ4aHItbG9hZC1yZW1vdmVkXCIsIFt0WzFdLCB0WzJdXSwgZSkgfSksIGEub24oXCJmbi1zdGFydFwiLCBmdW5jdGlvbiAodCwgZSwgbikgeyBlIGluc3RhbmNlb2YgWE1MSHR0cFJlcXVlc3QgJiYgKFwib25sb2FkXCIgPT09IG4gJiYgKHRoaXMub25sb2FkID0gITApLCAoXCJsb2FkXCIgPT09ICh0WzBdICYmIHRbMF0udHlwZSkgfHwgdGhpcy5vbmxvYWQpICYmICh0aGlzLnhockNiU3RhcnQgPSAobmV3IERhdGUpLmdldFRpbWUoKSkpIH0pLCBhLm9uKFwiZm4tZW5kXCIsIGZ1bmN0aW9uICh0LCBlKSB7IHRoaXMueGhyQ2JTdGFydCAmJiBhLmVtaXQoXCJ4aHItY2ItdGltZVwiLCBbKG5ldyBEYXRlKS5nZXRUaW1lKCkgLSB0aGlzLnhockNiU3RhcnQsIHRoaXMub25sb2FkLCBlXSwgZSkgfSkgfSB9LCB7IDE6IFwiWEw3SEJJXCIsIDI6IDExLCAzOiA5LCA0OiA1LCBlZTogXCJRSmYzYXhcIiwgaGFuZGxlOiBcIkQ1RHVMUFwiLCBsb2FkZXI6IFwiRzl6MEJsXCIgfV0sIDExOiBbZnVuY3Rpb24gKHQsIGUpIHsgZS5leHBvcnRzID0gZnVuY3Rpb24gKHQpIHsgdmFyIGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKSwgbiA9IHdpbmRvdy5sb2NhdGlvbiwgciA9IHt9OyBlLmhyZWYgPSB0LCByLnBvcnQgPSBlLnBvcnQ7IHZhciBvID0gZS5ocmVmLnNwbGl0KFwiOi8vXCIpOyByZXR1cm4gIXIucG9ydCAmJiBvWzFdICYmIChyLnBvcnQgPSBvWzFdLnNwbGl0KFwiL1wiKVswXS5zcGxpdChcIkBcIikucG9wKCkuc3BsaXQoXCI6XCIpWzFdKSwgci5wb3J0ICYmIFwiMFwiICE9PSByLnBvcnQgfHwgKHIucG9ydCA9IFwiaHR0cHNcIiA9PT0gb1swXSA/IFwiNDQzXCIgOiBcIjgwXCIpLCByLmhvc3RuYW1lID0gZS5ob3N0bmFtZSB8fCBuLmhvc3RuYW1lLCByLnBhdGhuYW1lID0gZS5wYXRobmFtZSwgci5wcm90b2NvbCA9IG9bMF0sIFwiL1wiICE9PSByLnBhdGhuYW1lLmNoYXJBdCgwKSAmJiAoci5wYXRobmFtZSA9IFwiL1wiICsgci5wYXRobmFtZSksIHIuc2FtZU9yaWdpbiA9ICFlLmhvc3RuYW1lIHx8IGUuaG9zdG5hbWUgPT09IGRvY3VtZW50LmRvbWFpbiAmJiBlLnBvcnQgPT09IG4ucG9ydCAmJiBlLnByb3RvY29sID09PSBuLnByb3RvY29sLCByIH0gfSwge31dLCBnb3M6IFtmdW5jdGlvbiAodCwgZSkgeyBlLmV4cG9ydHMgPSB0KFwiN2VTREZoXCIpIH0sIHt9XSwgXCI3ZVNERmhcIjogW2Z1bmN0aW9uICh0LCBlKSB7IGZ1bmN0aW9uIG4odCwgZSwgbikgeyBpZiAoci5jYWxsKHQsIGUpKSByZXR1cm4gdFtlXTsgdmFyIG8gPSBuKCk7IGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmtleXMpIHRyeSB7IHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkodCwgZSwgeyB2YWx1ZTogbywgd3JpdGFibGU6ICEwLCBlbnVtZXJhYmxlOiAhMSB9KSwgbyB9IGNhdGNoIChpKSB7IH0gcmV0dXJuIHRbZV0gPSBvLCBvIH0gdmFyIHIgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5OyBlLmV4cG9ydHMgPSBuIH0sIHt9XSwgRDVEdUxQOiBbZnVuY3Rpb24gKHQsIGUpIHsgZnVuY3Rpb24gbih0LCBlLCBuKSB7IHJldHVybiByLmxpc3RlbmVycyh0KS5sZW5ndGggPyByLmVtaXQodCwgZSwgbikgOiAob1t0XSB8fCAob1t0XSA9IFtdKSwgdm9pZCBvW3RdLnB1c2goZSkpIH0gdmFyIHIgPSB0KFwiZWVcIikuY3JlYXRlKCksIG8gPSB7fTsgZS5leHBvcnRzID0gbiwgbi5lZSA9IHIsIHIucSA9IG8gfSwgeyBlZTogXCJRSmYzYXhcIiB9XSwgaGFuZGxlOiBbZnVuY3Rpb24gKHQsIGUpIHsgZS5leHBvcnRzID0gdChcIkQ1RHVMUFwiKSB9LCB7fV0sIFhMN0hCSTogW2Z1bmN0aW9uICh0LCBlKSB7IGZ1bmN0aW9uIG4odCkgeyB2YXIgZSA9IHR5cGVvZiB0OyByZXR1cm4gIXQgfHwgXCJvYmplY3RcIiAhPT0gZSAmJiBcImZ1bmN0aW9uXCIgIT09IGUgPyAtMSA6IHQgPT09IHdpbmRvdyA/IDAgOiBpKHQsIG8sIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHIrKyB9KSB9IHZhciByID0gMSwgbyA9IFwibnJAaWRcIiwgaSA9IHQoXCJnb3NcIik7IGUuZXhwb3J0cyA9IG4gfSwgeyBnb3M6IFwiN2VTREZoXCIgfV0sIGlkOiBbZnVuY3Rpb24gKHQsIGUpIHsgZS5leHBvcnRzID0gdChcIlhMN0hCSVwiKSB9LCB7fV0sIGxvYWRlcjogW2Z1bmN0aW9uICh0LCBlKSB7IGUuZXhwb3J0cyA9IHQoXCJHOXowQmxcIikgfSwge31dLCBHOXowQmw6IFtmdW5jdGlvbiAodCwgZSkgeyBmdW5jdGlvbiBuKCkgeyB2YXIgdCA9IGwuaW5mbyA9IE5SRVVNLmluZm87IGlmICh0ICYmIHQubGljZW5zZUtleSAmJiB0LmFwcGxpY2F0aW9uSUQgJiYgZiAmJiBmLmJvZHkpIHsgcyhoLCBmdW5jdGlvbiAoZSwgbikgeyBlIGluIHQgfHwgKHRbZV0gPSBuKSB9KSwgbC5wcm90byA9IFwiaHR0cHNcIiA9PT0gcC5zcGxpdChcIjpcIilbMF0gfHwgdC5zc2xGb3JIdHRwID8gXCJodHRwczovL1wiIDogXCJodHRwOi8vXCIsIGEoXCJtYXJrXCIsIFtcIm9ubG9hZFwiLCBpKCldKTsgdmFyIGUgPSBmLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7IGUuc3JjID0gbC5wcm90byArIHQuYWdlbnQsIGYuYm9keS5hcHBlbmRDaGlsZChlKSB9IH0gZnVuY3Rpb24gcigpIHsgXCJjb21wbGV0ZVwiID09PSBmLnJlYWR5U3RhdGUgJiYgbygpIH0gZnVuY3Rpb24gbygpIHsgYShcIm1hcmtcIiwgW1wiZG9tQ29udGVudFwiLCBpKCldKSB9IGZ1bmN0aW9uIGkoKSB7IHJldHVybiAobmV3IERhdGUpLmdldFRpbWUoKSB9IHZhciBhID0gdChcImhhbmRsZVwiKSwgcyA9IHQoMSksIGMgPSB3aW5kb3csIGYgPSBjLmRvY3VtZW50LCB1ID0gXCJhZGRFdmVudExpc3RlbmVyXCIsIGQgPSBcImF0dGFjaEV2ZW50XCIsIHAgPSAoXCJcIiArIGxvY2F0aW9uKS5zcGxpdChcIj9cIilbMF0sIGggPSB7IGJlYWNvbjogXCJiYW0ubnItZGF0YS5uZXRcIiwgZXJyb3JCZWFjb246IFwiYmFtLm5yLWRhdGEubmV0XCIsIGFnZW50OiBcImpzLWFnZW50Lm5ld3JlbGljLmNvbS9uci01MTUubWluLmpzXCIgfSwgbCA9IGUuZXhwb3J0cyA9IHsgb2Zmc2V0OiBpKCksIG9yaWdpbjogcCwgZmVhdHVyZXM6IHt9IH07IGZbdV0gPyAoZlt1XShcIkRPTUNvbnRlbnRMb2FkZWRcIiwgbywgITEpLCBjW3VdKFwibG9hZFwiLCBuLCAhMSkpIDogKGZbZF0oXCJvbnJlYWR5c3RhdGVjaGFuZ2VcIiwgciksIGNbZF0oXCJvbmxvYWRcIiwgbikpLCBhKFwibWFya1wiLCBbXCJmaXJzdGJ5dGVcIiwgaSgpXSkgfSwgeyAxOiAyMCwgaGFuZGxlOiBcIkQ1RHVMUFwiIH1dLCAyMDogW2Z1bmN0aW9uICh0LCBlKSB7IGZ1bmN0aW9uIG4odCwgZSkgeyB2YXIgbiA9IFtdLCBvID0gXCJcIiwgaSA9IDA7IGZvciAobyBpbiB0KSByLmNhbGwodCwgbykgJiYgKG5baV0gPSBlKG8sIHRbb10pLCBpICs9IDEpOyByZXR1cm4gbiB9IHZhciByID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTsgZS5leHBvcnRzID0gbiB9LCB7fV0sIDIxOiBbZnVuY3Rpb24gKHQsIGUpIHsgZnVuY3Rpb24gbih0LCBlLCBuKSB7IGUgfHwgKGUgPSAwKSwgXCJ1bmRlZmluZWRcIiA9PSB0eXBlb2YgbiAmJiAobiA9IHQgPyB0Lmxlbmd0aCA6IDApOyBmb3IgKHZhciByID0gLTEsIG8gPSBuIC0gZSB8fCAwLCBpID0gQXJyYXkoMCA+IG8gPyAwIDogbykgOyArK3IgPCBvOykgaVtyXSA9IHRbZSArIHJdOyByZXR1cm4gaSB9IGUuZXhwb3J0cyA9IG4gfSwge31dLCAyMjogW2Z1bmN0aW9uICh0LCBlKSB7IGZ1bmN0aW9uIG4odCkgeyByZXR1cm4gISh0ICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgdCAmJiB0LmFwcGx5ICYmICF0W2ldKSB9IHZhciByID0gdChcImVlXCIpLCBvID0gdCgxKSwgaSA9IFwibnJAd3JhcHBlclwiLCBhID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTsgZS5leHBvcnRzID0gZnVuY3Rpb24gKHQpIHsgZnVuY3Rpb24gZSh0LCBlLCByLCBhKSB7IGZ1bmN0aW9uIG5yV3JhcHBlcigpIHsgdmFyIG4sIGksIHMsIGY7IHRyeSB7IGkgPSB0aGlzLCBuID0gbyhhcmd1bWVudHMpLCBzID0gciAmJiByKG4sIGkpIHx8IHt9IH0gY2F0Y2ggKGQpIHsgdShbZCwgXCJcIiwgW24sIGksIGFdLCBzXSkgfSBjKGUgKyBcInN0YXJ0XCIsIFtuLCBpLCBhXSwgcyk7IHRyeSB7IHJldHVybiBmID0gdC5hcHBseShpLCBuKSB9IGNhdGNoIChwKSB7IHRocm93IGMoZSArIFwiZXJyXCIsIFtuLCBpLCBwXSwgcyksIHAgfSBmaW5hbGx5IHsgYyhlICsgXCJlbmRcIiwgW24sIGksIGZdLCBzKSB9IH0gcmV0dXJuIG4odCkgPyB0IDogKGUgfHwgKGUgPSBcIlwiKSwgbnJXcmFwcGVyW2ldID0gITAsIGYodCwgbnJXcmFwcGVyKSwgbnJXcmFwcGVyKSB9IGZ1bmN0aW9uIHModCwgciwgbywgaSkgeyBvIHx8IChvID0gXCJcIik7IHZhciBhLCBzLCBjLCBmID0gXCItXCIgPT09IG8uY2hhckF0KDApOyBmb3IgKGMgPSAwOyBjIDwgci5sZW5ndGg7IGMrKykgcyA9IHJbY10sIGEgPSB0W3NdLCBuKGEpIHx8ICh0W3NdID0gZShhLCBmID8gcyArIG8gOiBvLCBpLCBzLCB0KSkgfSBmdW5jdGlvbiBjKGUsIG4sIHIpIHsgdHJ5IHsgdC5lbWl0KGUsIG4sIHIpIH0gY2F0Y2ggKG8pIHsgdShbbywgZSwgbiwgcl0pIH0gfSBmdW5jdGlvbiBmKHQsIGUpIHsgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3Qua2V5cykgdHJ5IHsgdmFyIG4gPSBPYmplY3Qua2V5cyh0KTsgcmV0dXJuIG4uZm9yRWFjaChmdW5jdGlvbiAobikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgbiwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRbbl0gfSwgc2V0OiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gdFtuXSA9IGUsIGUgfSB9KSB9KSwgZSB9IGNhdGNoIChyKSB7IHUoW3JdKSB9IGZvciAodmFyIG8gaW4gdCkgYS5jYWxsKHQsIG8pICYmIChlW29dID0gdFtvXSk7IHJldHVybiBlIH0gZnVuY3Rpb24gdShlKSB7IHRyeSB7IHQuZW1pdChcImludGVybmFsLWVycm9yXCIsIGUpIH0gY2F0Y2ggKG4pIHsgfSB9IHJldHVybiB0IHx8ICh0ID0gciksIGUuaW5QbGFjZSA9IHMsIGUuZmxhZyA9IGksIGUgfSB9LCB7IDE6IDIxLCBlZTogXCJRSmYzYXhcIiB9XSB9LCB7fSwgW1wiRzl6MEJsXCIsIDMsIDEwLCA0XSk7XG4gICAgICAgIDsgTlJFVU0uaW5mbyA9IHsgYmVhY29uOiBcImJhbS5uci1kYXRhLm5ldFwiLCBlcnJvckJlYWNvbjogXCJiYW0ubnItZGF0YS5uZXRcIiwgbGljZW5zZUtleTogbGljZW5zZUtleSwgYXBwbGljYXRpb25JRDogYXBwSWQsIHNhOiAxLCBhZ2VudDogXCJqcy1hZ2VudC5uZXdyZWxpYy5jb20vbnItNTE1Lm1pbi5qc1wiIH1cbiAgICAgICAgO1xyXG4gICAgfVxyXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5ld1JlbGljO1xuIiwiXG52YXIgUmF5Z3VuLCByYXlHdW47XG5SYXlndW4gPSByZXF1aXJlKCdyYXlndW40anMnKTtcblxucmF5R3VuID0gZnVuY3Rpb24gKGNvbmZpZykge1xyXG4gICAgdmFyIGFwaUtleTtcbiAgICBpZiAoY29uZmlnID09IG51bGwpIHtcclxuICAgICAgICBjb25maWcgPSB7fTtcclxuICAgIH1cbiAgICBhcGlLZXkgPSBjb25maWcuUkFZR1VOX0FQSV9LRVk7XG4gICAgaWYgKGFwaUtleSAmJiB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUgIT09ICdsb2NhbGhvc3QnKSB7XHJcbiAgICAgICAgaWYgKFJheWd1biAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIFJheWd1bi5pbml0KGFwaUtleSwge1xyXG4gICAgICAgICAgICAgICAgaWdub3JlM3JkUGFydHlFcnJvcnM6IHRydWVcclxuICAgICAgICAgICAgfSkuYXR0YWNoKCk7XHJcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUmF5Z3VuICE9IG51bGwgPyBSYXlndW4uZmlsdGVyU2Vuc2l0aXZlRGF0YShbJ3Bhc3N3b3JkJ10pIDogdm9pZCAwO1xyXG4gICAgfVxyXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJheUd1bjsiLCJcbnZhciB1c2VyU25hcCA9IGZ1bmN0aW9uIChjb25maWcpIHtcclxuICAgIHZhciBhcGlLZXksIHMsIHg7XG4gICAgaWYgKGNvbmZpZyA9PSBudWxsKSB7XHJcbiAgICAgICAgY29uZmlnID0ge307XHJcbiAgICB9XG4gICAgYXBpS2V5ID0gY29uZmlnLlVTRVJfU05BUF9BUElfS0VZO1xuICAgIGlmIChhcGlLZXkgJiYgd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lICE9PSAnbG9jYWxob3N0Jykge1xyXG4gICAgICAgIHdpbmRvdy51c2Vyc25hcGNvbmZpZyA9IHtcclxuICAgICAgICAgICAgbW9kZTogJ3JlcG9ydCcsXG4gICAgICAgICAgICBzaG9ydGN1dDogdHJ1ZSxcbiAgICAgICAgICAgIGJlZm9yZU9wZW46IGZ1bmN0aW9uIChvYmopIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBVc2VyU25hcC5zZXRFbWFpbEJveChEb2MuYXBwLnVzZXIudXNlck5hbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcbiAgICAgICAgcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgICBzLnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JztcbiAgICAgICAgcy5hc3luYyA9IHRydWU7XG4gICAgICAgIHMuc3JjID0gJy8vYXBpLnVzZXJzbmFwLmNvbS9sb2FkLycgKyBhcGlLZXkgKyAnLmpzJztcbiAgICAgICAgeCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF07XG4gICAgICAgIHJldHVybiB4LmFwcGVuZENoaWxkKHMpO1xyXG4gICAgfVxyXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHVzZXJTbmFwO1xuXG5cbiIsInZhciByaW90ID0gcmVxdWlyZSgncmlvdCcpO1xucmlvdC50YWcoJ21tLWZvb3RlcicsICc8ZGl2IGNsYXNzPVwicGFnZS1mb290ZXJcIj4gPGRpdiBjbGFzcz1cInBhZ2UtZm9vdGVyLWlubmVyXCI+IDIwMTUgJmNvcHk7IENhYnJlcmEgUmVzZWFyY2ggTGFiIDwvZGl2PiA8ZGl2IGNsYXNzPVwic2Nyb2xsLXRvLXRvcFwiPiA8aSBjbGFzcz1cImljb24tYXJyb3ctdXBcIj48L2k+IDwvZGl2PiA8L2Rpdj4nLCBmdW5jdGlvbihvcHRzKSB7XHJcblxyXG5cbn0pOyJdfQ==

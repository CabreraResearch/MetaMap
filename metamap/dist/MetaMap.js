(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.MetaMap = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

require('babel/polyfill');
require('core-js');
window.$ = window.jQuery = require('jquery');
require('jquery-ui');
require('bootstrap');
window.riot = require('riot');
window._ = require('lodash');
window.Promise = require('bluebird');

var Auth0 = require('./js/app/auth0');
var User = require('./js/app/user.js');
var Router = require('./js/app/Router.js');
var Eventer = require('./js/app/Eventer.js');
var PageFactory = require('./js/pages/PageFactory.js');
var NProgress = window.NProgress;
var Config = require('./js/app//Config.js');
var ga = require('./js/integrations/google.js');
var shims = require('./js/tools/shims.js');
var AirbrakeClient = require('airbrake-js');
var Integrations = require('./js/app/Integrations');

var MetaMap = (function () {
    function MetaMap() {
        _classCallCheck(this, MetaMap);

        this.Config = new Config();
        this.config = this.Config.config;
        this.MetaFire = this.Config.MetaFire;
        this.Eventer = new Eventer(this);
        this.airbrake = new AirbrakeClient({ projectId: 114900, projectKey: 'dc9611db6f77120ccecd1a273745a5ae' });
        this.onReady();
        var that = this;
        Promise.onPossiblyUnhandledRejection(function (error) {
            that.error(error);
            return this;
        });
    }

    _createClass(MetaMap, [{
        key: 'onReady',
        value: function onReady() {
            var _this = this;

            if (!this._onReady) {
                this._onReady = new Promise(function (fulfill, reject) {
                    _this.Config.onReady().then(function (config) {
                        _this.Auth0 = new Auth0(config.auth0);
                        fulfill();
                    })['catch'](function (err) {
                        reject(err);
                    });
                });
            }
            return this._onReady;
        }
    }, {
        key: 'init',
        value: function init() {
            var _this2 = this;

            this.onReady().then(function () {
                _this2.Auth0.login().then(function (profile) {
                    _this2.MetaFire.login().then(function (auth) {
                        _this2.User = new User(profile, auth, _this2.Eventer, _this2.MetaFire);
                        _this2.Integrations = new Integrations(_this2, _this2.User);
                        _this2.User.onReady().then(function (user) {
                            _this2.PageFactory = new PageFactory(_this2.Eventer, _this2.MetaFire);
                            _this2.Router = new Router(_this2);
                            _this2.Router.init();
                            _this2.Integrations.init();
                        });
                    });
                });
            });
        }
    }, {
        key: 'log',
        value: function log(val) {
            this.Integrations.sendEvent(val, 'event', 'log', 'label');
            window.console.info(val);
        }
    }, {
        key: 'error',
        value: function error(val) {
            window.console.error(val);
            this.Integrations.sendEvent(val, 'exception');
            this.airbrake.notify(val);
        }
    }, {
        key: 'logout',
        value: function logout() {
            this.MetaFire.logout();
            this.Auth0.logout();
        }
    }]);

    return MetaMap;
})();

var mm = new MetaMap();
module.exports = mm;

},{"./js/app//Config.js":13,"./js/app/Eventer.js":14,"./js/app/Integrations":16,"./js/app/Router.js":17,"./js/app/auth0":18,"./js/app/user.js":19,"./js/integrations/google.js":57,"./js/pages/PageFactory.js":58,"./js/tools/shims.js":78,"airbrake-js":undefined,"babel/polyfill":"babel/polyfill","bluebird":undefined,"bootstrap":undefined,"core-js":undefined,"jquery":undefined,"jquery-ui":undefined,"lodash":undefined,"riot":"riot"}],2:[function(require,module,exports){
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ActionBase = require('./ActionBase.js');
var ACTIONS = require('../constants/actions');

var Action = (function (_ActionBase) {
    _inherits(Action, _ActionBase);

    function Action() {
        _classCallCheck(this, Action);

        for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
            params[_key] = arguments[_key];
        }

        _get(Object.getPrototypeOf(Action.prototype), 'constructor', this).apply(this, params);
        this._actions = {};
    }

    _createClass(Action, [{
        key: '_getAction',
        value: function _getAction(action) {
            var ret = this._actions[action];
            if (!ret) {
                var Method = null;
                switch (action) {
                    case ACTIONS.MAP:
                        Method = require('./OpenMap.js');
                        break;
                    case ACTIONS.NEW_MAP:
                        Method = require('./NewMap.js');
                        break;
                    case ACTIONS.COPY_MAP:
                        Method = require('./CopyMap.js');
                        break;
                    case ACTIONS.DELETE_MAP:
                        Method = require('./DeleteMap.js');
                        break;
                    case ACTIONS.MY_MAPS:
                        Method = require('./MyMaps.js');
                        break;
                    case ACTIONS.LOGOUT:
                        Method = require('./Logout.js');
                        break;
                    case ACTIONS.TERMS_AND_CONDITIONS:
                        Method = require('./Terms.js');
                        break;
                        break;
                    case ACTIONS.FEEDBACK:
                        Method = require('./Feedback');
                        break;
                    default:
                        Method = require('./Home.js');
                        break;
                }
                if (Method) {
                    ret = new Method(this.metaFire, this.eventer, this.pageFactory);
                    this._actions[action] = ret;
                }
            }
            return ret;
        }
    }, {
        key: 'act',
        value: function act(action) {
            _get(Object.getPrototypeOf(Action.prototype), 'act', this).call(this);
            var method = this._getAction(action);
            if (method) {
                for (var _len2 = arguments.length, params = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                    params[_key2 - 1] = arguments[_key2];
                }

                return method.act.apply(method, params);
            }
        }
    }]);

    return Action;
})(ActionBase);

module.exports = Action;

},{"../constants/actions":39,"./ActionBase.js":3,"./CopyMap.js":4,"./DeleteMap.js":5,"./Feedback":6,"./Home.js":7,"./Logout.js":8,"./MyMaps.js":9,"./NewMap.js":10,"./OpenMap.js":11,"./Terms.js":12}],3:[function(require,module,exports){
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var EVENTS = require('../constants/events');

var ActionBase = (function () {
    function ActionBase(metaFire, eventer, pageFactory) {
        _classCallCheck(this, ActionBase);

        this.metaFire = metaFire;
        this.eventer = eventer;
        this.pageFactory = pageFactory;
        this.metaMap = require('../../MetaMap.js');
    }

    _createClass(ActionBase, [{
        key: 'act',
        value: function act() {}
    }, {
        key: 'toggleSidebar',
        value: function toggleSidebar() {
            if (this.sidebarOpen) {
                this.openSidebar();
            } else {
                this.closeSidebar();
            }
        }
    }, {
        key: 'openSidebar',
        value: function openSidebar() {
            this.sidebarOpen = true;
            this.eventer['do'](EVENTS.SIDEBAR_OPEN);
        }
    }, {
        key: 'closeSidebar',
        value: function closeSidebar() {
            this.sidebarOpen = false;
            this.eventer['do'](EVENTS.SIDEBAR_CLOSE);
        }
    }]);

    return ActionBase;
})();

module.exports = ActionBase;

},{"../../MetaMap.js":1,"../constants/events":44}],4:[function(require,module,exports){
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ActionBase = require('./ActionBase.js');
var ROUTES = require('../constants/routes.js');

var CopyMap = (function (_ActionBase) {
    _inherits(CopyMap, _ActionBase);

    function CopyMap() {
        _classCallCheck(this, CopyMap);

        for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
            params[_key] = arguments[_key];
        }

        _get(Object.getPrototypeOf(CopyMap.prototype), 'constructor', this).apply(this, params);
    }

    _createClass(CopyMap, [{
        key: 'act',
        value: function act(id) {
            var _get2,
                _this = this;

            for (var _len2 = arguments.length, params = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                params[_key2 - 1] = arguments[_key2];
            }

            (_get2 = _get(Object.getPrototypeOf(CopyMap.prototype), 'act', this)).call.apply(_get2, [this, id].concat(params));
            if (!id) {
                return new Error('Must have a map in order to copy.');
            }
            this.metaFire.getData('' + ROUTES.MAPS_LIST + id).then(function (oldMap) {
                var newMap = {
                    created_at: new Date(),
                    owner: _this.metaMap.User.userId,
                    name: _this.appendCopy(oldMap.name)
                };
                _this.metaFire.getData('' + ROUTES.MAPS_DATA + id).then(function (oldMapData) {
                    var pushState = _this.metaFire.pushData(newMap, '' + ROUTES.MAPS_LIST);
                    var mapId = pushState.key();
                    _this.metaFire.setData(oldMapData, '' + ROUTES.MAPS_DATA + mapId);
                    _this.metaMap.Router.to('map/' + mapId);
                });
            });
            return true;
        }
    }, {
        key: 'appendCopy',
        value: function appendCopy(str) {
            var ret = str;
            if (!_.contains(str, '(Copy')) {
                ret = ret + ' (Copy 1)';
            } else {
                var mess = str.split(' ');
                var cnt = 2;
                if (mess[mess.length - 2] == '(Copy') {
                    var grbg = mess[mess.length - 1];
                    if (grbg) {
                        grbg = grbg.replace(')', '');
                        cnt = +grbg + 1;
                        ret = mess.slice(0, mess.length - 2).join(' ');
                    }
                }
                ret += ' (Copy ' + cnt + ')';
            }
            return ret;
        }
    }]);

    return CopyMap;
})(ActionBase);

module.exports = CopyMap;

},{"../constants/routes.js":46,"./ActionBase.js":3}],5:[function(require,module,exports){
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ActionBase = require('./ActionBase.js');
var ROUTES = require('../constants/routes.js');
var _ = require('lodash');
var PAGES = require('../constants/pages.js');

var DeleteMap = (function (_ActionBase) {
    _inherits(DeleteMap, _ActionBase);

    function DeleteMap() {
        _classCallCheck(this, DeleteMap);

        for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
            params[_key] = arguments[_key];
        }

        _get(Object.getPrototypeOf(DeleteMap.prototype), 'constructor', this).apply(this, params);
    }

    _createClass(DeleteMap, [{
        key: 'act',
        value: function act(id) {
            var _get2;

            for (var _len2 = arguments.length, params = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                params[_key2 - 1] = arguments[_key2];
            }

            (_get2 = _get(Object.getPrototypeOf(DeleteMap.prototype), 'act', this)).call.apply(_get2, [this, id].concat(params));
            DeleteMap.deleteAll([id]);
            return true;
        }
    }], [{
        key: 'deleteAll',
        value: function deleteAll(ids) {
            var path = arguments.length <= 1 || arguments[1] === undefined ? PAGES.HOME : arguments[1];

            var metaMap = require('../../MetaMap.js');
            try {
                _.each(ids, function (id) {
                    metaMap.MetaFire.deleteData('' + ROUTES.MAPS_DATA + id);
                    metaMap.MetaFire.deleteData('' + ROUTES.MAPS_LIST + id);
                });
            } catch (e) {} finally {
                metaMap.Router.to(path);
            }
        }
    }]);

    return DeleteMap;
})(ActionBase);

module.exports = DeleteMap;

},{"../../MetaMap.js":1,"../constants/pages.js":45,"../constants/routes.js":46,"./ActionBase.js":3,"lodash":undefined}],6:[function(require,module,exports){
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ActionBase = require('./ActionBase.js');
var ROUTES = require('../constants/routes.js');

var Feedback = (function (_ActionBase) {
    _inherits(Feedback, _ActionBase);

    function Feedback() {
        _classCallCheck(this, Feedback);

        for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
            params[_key] = arguments[_key];
        }

        _get(Object.getPrototypeOf(Feedback.prototype), 'constructor', this).apply(this, params);
        this.userSnap = window.UserSnap;
    }

    _createClass(Feedback, [{
        key: 'act',
        value: function act() {
            _get(Object.getPrototypeOf(Feedback.prototype), 'act', this).call(this);
            this.userSnap.openReportWindow();
            return true;
        }
    }]);

    return Feedback;
})(ActionBase);

module.exports = Feedback;

},{"../constants/routes.js":46,"./ActionBase.js":3}],7:[function(require,module,exports){
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var riot = require('riot');
var ActionBase = require('./ActionBase.js');
var ROUTES = require('../constants/routes.js');
var ELEMENTS = require('../constants/elements.js');
var TAGS = require('../constants/tags.js');
var home = require('../tags/pages/home');
var EVENTS = require('../constants/events.js');

var Home = (function (_ActionBase) {
    _inherits(Home, _ActionBase);

    function Home() {
        _classCallCheck(this, Home);

        for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
            params[_key] = arguments[_key];
        }

        _get(Object.getPrototypeOf(Home.prototype), 'constructor', this).apply(this, params);
    }

    _createClass(Home, [{
        key: 'act',
        value: function act(id) {
            var _get2, _eventer;

            for (var _len2 = arguments.length, params = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                params[_key2 - 1] = arguments[_key2];
            }

            (_get2 = _get(Object.getPrototypeOf(Home.prototype), 'act', this)).call.apply(_get2, [this, id].concat(params));
            $('#' + ELEMENTS.APP_CONTAINER).empty();
            riot.mount(document.getElementById(ELEMENTS.APP_CONTAINER), TAGS.HOME);
            (_eventer = this.eventer)['do'].apply(_eventer, [EVENTS.PAGE_NAME, { name: 'Home' }].concat(params));
            this.closeSidebar();
            return true;
        }
    }]);

    return Home;
})(ActionBase);

module.exports = Home;

},{"../constants/elements.js":43,"../constants/events.js":44,"../constants/routes.js":46,"../constants/tags.js":48,"../tags/pages/home":74,"./ActionBase.js":3,"riot":"riot"}],8:[function(require,module,exports){
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ActionBase = require('./ActionBase.js');
var ROUTES = require('../constants/routes.js');
var _ = require('lodash');
var PAGES = require('../constants/pages.js');

var Logout = (function (_ActionBase) {
    _inherits(Logout, _ActionBase);

    function Logout() {
        _classCallCheck(this, Logout);

        for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
            params[_key] = arguments[_key];
        }

        _get(Object.getPrototypeOf(Logout.prototype), 'constructor', this).apply(this, params);
        this.metaMap = require('../../MetaMap.js');
    }

    _createClass(Logout, [{
        key: 'act',
        value: function act(id) {
            var _get2;

            for (var _len2 = arguments.length, params = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                params[_key2 - 1] = arguments[_key2];
            }

            (_get2 = _get(Object.getPrototypeOf(Logout.prototype), 'act', this)).call.apply(_get2, [this, id].concat(params));
            this.metaMap.logout();
            return true;
        }
    }]);

    return Logout;
})(ActionBase);

module.exports = Logout;

},{"../../MetaMap.js":1,"../constants/pages.js":45,"../constants/routes.js":46,"./ActionBase.js":3,"lodash":undefined}],9:[function(require,module,exports){
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var riot = require('riot');
var ActionBase = require('./ActionBase.js');
var ROUTES = require('../constants/routes.js');
var PAGES = require('../constants/pages.js');
var TAGS = require('../constants/tags.js');
var ELEMENTS = require('../constants/elements.js');
var EVENTS = require('../constants/events.js');
var home = require('../tags/pages/my-maps');

var MyMaps = (function (_ActionBase) {
    _inherits(MyMaps, _ActionBase);

    function MyMaps() {
        _classCallCheck(this, MyMaps);

        for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
            params[_key] = arguments[_key];
        }

        _get(Object.getPrototypeOf(MyMaps.prototype), 'constructor', this).apply(this, params);
    }

    _createClass(MyMaps, [{
        key: 'act',
        value: function act(id) {
            var _get2, _eventer, _eventer2;

            for (var _len2 = arguments.length, params = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                params[_key2 - 1] = arguments[_key2];
            }

            (_get2 = _get(Object.getPrototypeOf(MyMaps.prototype), 'act', this)).call.apply(_get2, [this, id].concat(params));
            $('#' + ELEMENTS.APP_CONTAINER).empty();
            riot.mount(document.getElementById(ELEMENTS.APP_CONTAINER), TAGS.MY_MAPS);
            (_eventer = this.eventer)['do'].apply(_eventer, [PAGES.MY_MAPS, { id: id }].concat(params));
            (_eventer2 = this.eventer)['do'].apply(_eventer2, [EVENTS.PAGE_NAME, { name: 'My Maps' }].concat(params));
            this.closeSidebar();

            return true;
        }
    }]);

    return MyMaps;
})(ActionBase);

module.exports = MyMaps;

},{"../constants/elements.js":43,"../constants/events.js":44,"../constants/pages.js":45,"../constants/routes.js":46,"../constants/tags.js":48,"../tags/pages/my-maps":75,"./ActionBase.js":3,"riot":"riot"}],10:[function(require,module,exports){
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ActionBase = require('./ActionBase.js');
var ROUTES = require('../constants/routes.js');

var NewMap = (function (_ActionBase) {
    _inherits(NewMap, _ActionBase);

    function NewMap() {
        _classCallCheck(this, NewMap);

        for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
            params[_key] = arguments[_key];
        }

        _get(Object.getPrototypeOf(NewMap.prototype), 'constructor', this).apply(this, params);
    }

    _createClass(NewMap, [{
        key: 'act',
        value: function act() {
            var _this = this;

            _get(Object.getPrototypeOf(NewMap.prototype), 'act', this).call(this);
            this.metaFire.getData('' + ROUTES.MAPS_NEW_MAP).then(function (blankMap) {
                var newMap = {
                    created_at: new Date(),
                    owner: _this.metaMap.User.userId,
                    name: 'Untitled Map'
                };
                var pushState = _this.metaFire.pushData(newMap, '' + ROUTES.MAPS_LIST);
                var mapId = pushState.key();
                _this.metaFire.setData(blankMap, '' + ROUTES.MAPS_DATA + mapId);
                _this.metaMap.Router.to('map/' + mapId);
            });
            return true;
        }
    }]);

    return NewMap;
})(ActionBase);

module.exports = NewMap;

},{"../constants/routes.js":46,"./ActionBase.js":3}],11:[function(require,module,exports){
/// <reference path="../../../../typings/riotjs/riotjs.d.ts" />

'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var riot = require('riot');
var ActionBase = require('./ActionBase.js');
var ELEMENTS = require('../constants/elements.js');
var TAGS = require('../constants/tags.js');
var ROUTES = require('../constants/routes.js');
var EVENTS = require('../constants/events.js');
var metaCanvas = require('../tags/canvas/meta-canvas.js');

var OpenMap = (function (_ActionBase) {
    _inherits(OpenMap, _ActionBase);

    function OpenMap() {
        _classCallCheck(this, OpenMap);

        for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
            params[_key] = arguments[_key];
        }

        _get(Object.getPrototypeOf(OpenMap.prototype), 'constructor', this).apply(this, params);
    }

    _createClass(OpenMap, [{
        key: 'act',
        value: function act(id) {
            var _get2,
                _this = this;

            for (var _len2 = arguments.length, params = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                params[_key2 - 1] = arguments[_key2];
            }

            (_get2 = _get(Object.getPrototypeOf(OpenMap.prototype), 'act', this)).call.apply(_get2, [this, id].concat(params));
            $('#' + ELEMENTS.APP_CONTAINER).empty();
            this.metaFire.getData('' + ROUTES.MAPS_LIST + id).then(function (map) {
                if (map) {
                    var _eventer, _eventer2, _eventer3;

                    riot.mount(document.getElementById(ELEMENTS.APP_CONTAINER), TAGS.META_CANVAS);
                    map.id = id;
                    (_eventer = _this.eventer)['do'].apply(_eventer, [EVENTS.NAV, 'map', map].concat(params));
                    (_eventer2 = _this.eventer)['do'].apply(_eventer2, [EVENTS.PAGE_NAME, map].concat(params));
                    (_eventer3 = _this.eventer)['do'].apply(_eventer3, [EVENTS.MAP, map].concat(params));
                    _this.openSidebar();
                }
            });
            return true;
        }
    }]);

    return OpenMap;
})(ActionBase);

module.exports = OpenMap;

},{"../constants/elements.js":43,"../constants/events.js":44,"../constants/routes.js":46,"../constants/tags.js":48,"../tags/canvas/meta-canvas.js":59,"./ActionBase.js":3,"riot":"riot"}],12:[function(require,module,exports){
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var riot = require('riot');
var ActionBase = require('./ActionBase.js');
var ROUTES = require('../constants/routes.js');
var EVENTS = require('../constants/events.js');
var ELEMENTS = require('../constants/elements.js');
var TAGS = require('../constants/tags.js');
var terms = require('../tags/pages/terms');

var Terms = (function (_ActionBase) {
    _inherits(Terms, _ActionBase);

    function Terms() {
        _classCallCheck(this, Terms);

        for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
            params[_key] = arguments[_key];
        }

        _get(Object.getPrototypeOf(Terms.prototype), 'constructor', this).apply(this, params);
    }

    _createClass(Terms, [{
        key: 'act',
        value: function act(id) {
            var _get2, _eventer;

            for (var _len2 = arguments.length, params = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                params[_key2 - 1] = arguments[_key2];
            }

            (_get2 = _get(Object.getPrototypeOf(Terms.prototype), 'act', this)).call.apply(_get2, [this, id].concat(params));
            $('#' + ELEMENTS.APP_CONTAINER).empty();
            riot.mount(document.getElementById(ELEMENTS.APP_CONTAINER), TAGS.TERMS);
            (_eventer = this.eventer)['do'].apply(_eventer, [EVENTS.PAGE_NAME, { name: 'Terms and Conditions' }].concat(params));
            this.closeSidebar();
            return true;
        }
    }]);

    return Terms;
})(ActionBase);

module.exports = Terms;

},{"../constants/elements.js":43,"../constants/events.js":44,"../constants/routes.js":46,"../constants/tags.js":48,"../tags/pages/terms":76,"./ActionBase.js":3,"riot":"riot"}],13:[function(require,module,exports){
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var MetaFire = require('./Firebase');
var _ = require('lodash');

var config = function config() {
    var SITES = {
        CRL: {
            db: 'meta-map-production'
        },
        CRL_STAGING: {
            db: 'meta-map-staging'
        },
        THINK_WATER: {
            db: 'thinkwater-production'
        }
    };

    var ret = {
        host: window.location.host,
        site: {}
    };
    var segments = ret.host.split('.');
    var first = segments[0];
    if (first === 'www') {
        first = segments[1];
    }
    switch (first.toLowerCase()) {
        case 'localhost':
        case 'meta-map-staging':
            ret.site = SITES.CRL_STAGING;
            break;

        case 'crlab':
        case 'frontend':
            ret.site = SITES.CRL;
            break;

        case 'thinkwater-production':
        case 'thinkwater-staging':
        case 'thinkwater':
            ret.site = SITES.THINK_WATER;
            break;
    }

    return ret;
};

var Config = (function () {
    function Config(tags) {
        _classCallCheck(this, Config);

        this.tags = tags;
        this.config = config();
        this.MetaFire = new MetaFire(this.config);
    }

    _createClass(Config, [{
        key: 'onReady',
        value: function onReady() {
            var _this = this;

            if (!this._onReady) {
                this._onReady = new Promise(function (fulfill, reject) {
                    _this.MetaFire.on('config', function (data) {
                        _this.MetaFire.on('metamap/canvas', function (canvas) {
                            try {
                                _.extend(_this.config.site, data);
                                _this.config.canvas = canvas;
                                document.title = _this.config.site.title;
                                var favico = document.getElementById('favico');
                                favico.setAttribute('href', _this.config.site.imageUrl + 'favicon.ico');
                                _this.init();
                                fulfill(_this.config.site);
                            } catch (e) {
                                reject(e);
                            }
                        });
                    });
                });
            }

            return this._onReady;
        }
    }, {
        key: 'init',
        value: function init() {
            return this.onReady();
        }
    }, {
        key: 'site',
        get: function get() {
            return 'frontend';
        }
    }]);

    return Config;
})();

module.exports = Config;

},{"./Firebase":15,"lodash":undefined}],14:[function(require,module,exports){
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var riot = require('riot');
var _ = require('lodash');

var Eventer = (function () {
    function Eventer(metaMap) {
        _classCallCheck(this, Eventer);

        riot.observable(this);

        this.events = {};
    }

    _createClass(Eventer, [{
        key: 'every',
        value: function every(event, reaction) {
            var _this = this;

            //let callback = reaction;
            //if (this.events[event]) {
            //    let piggyback = this.events[event];
            //    callback = (...params) => {
            //        piggyback(...params);
            //        reaction(...params);
            //    }
            //}
            var events = event.split(' ');
            _.each(events, function () {
                _this.events[event] = reaction;
                _this.on(event, reaction);
            });
        }
    }, {
        key: 'forget',
        value: function forget(event, callback) {
            var _this2 = this;

            var events = event.split(' ');
            _.each(events, function () {
                if (!callback) {
                    delete _this2.events[event];
                    _this2.off(event);
                } else {
                    _this2.off(event, callback);
                }
            });
        }
    }, {
        key: 'do',
        value: function _do(event) {
            var _this3 = this;

            for (var _len = arguments.length, params = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                params[_key - 1] = arguments[_key];
            }

            var events = event.split(' ');
            _.each(events, function () {
                _this3.trigger.apply(_this3, [event].concat(params));
            });
        }
    }]);

    return Eventer;
})();

module.exports = Eventer;

},{"lodash":undefined,"riot":"riot"}],15:[function(require,module,exports){
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Firebase = window.Firebase;
var Promise = require('bluebird');
var localforage = require('localforage');

var MetaFire = (function () {
    function MetaFire(config) {
        _classCallCheck(this, MetaFire);

        this.config = config;
        this.fb = new Firebase('https://' + this.config.site.db + '.firebaseio.com');
    }

    _createClass(MetaFire, [{
        key: 'login',
        value: function login() {
            var _this = this;

            if (!this._login) {
                this._login = new Promise(function (fulfill, reject) {
                    window.MetaMap.Auth0.getSession().then(function (profile) {

                        window.MetaMap.Auth0.lock.getClient().getDelegationToken({
                            target: _this.config.site.auth0.api,
                            id_token: profile.id_token,
                            api_type: 'firebase'
                        }, function (err, delegationResult) {
                            if (err) {
                                reject(err);
                            } else {
                                profile.firebase_token = delegationResult.id_token;
                                _this.firebase_token = delegationResult.id_token;
                                localforage.setItem('firebase_token', _this.firebase_token);
                                _this.fb.authWithCustomToken(_this.firebase_token, function (error, authData) {
                                    if (error) {
                                        _this.metaMap.error(error);
                                        reject(error);
                                    } else {
                                        fulfill(authData);
                                    }
                                });
                            }
                        });
                    })['catch'](function (err) {
                        console.log(err);
                        debugger;
                    });
                });
                this._onReady = this._login;
            }
            return this._login;
        }
    }, {
        key: 'onReady',
        value: function onReady() {
            if (!this._onReady) {
                this._onReady = new Promise(function (fulfill, reject) {
                    fulfill();
                });
            }
            return this._onReady;
        }
    }, {
        key: 'getChild',
        value: function getChild(path) {
            return this.fb.child(path);
        }
    }, {
        key: 'getData',
        value: function getData(path) {
            var _this2 = this;

            return this.onReady().then(function () {
                var child = _this2.fb;
                if (path) {
                    child = _this2.getChild(path);
                }
                return new Promise(function (resolve, reject) {

                    child.once('value', function (snapshot) {
                        var data = snapshot.val();
                        try {
                            resolve(data);
                        } catch (e) {
                            _this2.metaMap.error(e);
                        }
                    }, function (error) {
                        _this2.error(e, path);
                        reject(error);
                    });
                });
            });
        }
    }, {
        key: 'on',
        value: function on(path, callback) {
            var _this3 = this;

            var event = arguments.length <= 2 || arguments[2] === undefined ? 'value' : arguments[2];

            if (path) {
                this.onReady().then(function () {
                    var child = _this3.getChild(path);
                    var method = function method(snapshot) {
                        try {
                            if (!snapshot.exists()) {
                                child.off(event, method);
                                throw new Error('There is no data at ' + path);
                            }
                            var data = snapshot.val();
                            callback(data);
                        } catch (e) {
                            child.off(event, method);
                            _this3.error(e, path);
                        }
                    };
                    child.on(event, method);
                });
            }
        }
    }, {
        key: 'off',
        value: function off(path, method, callback) {
            var _this4 = this;

            if (method === undefined) method = 'value';

            if (path) {
                this.onReady().then(function () {
                    var child = _this4.getChild(path);
                    if (callback) {
                        child.off(method, callback);
                    } else {
                        child.off(method);
                    }
                });
            }
        }
    }, {
        key: 'setData',
        value: function setData(data, path) {
            var _this5 = this;

            var child = this.fb;
            if (path) {
                child = this.getChild(path);
            }
            try {
                return child.set(data, function (e) {
                    if (e) {
                        _this5.error(e, path);
                    }
                });
            } catch (e) {
                this.error(e, path);
            }
        }
    }, {
        key: 'deleteData',
        value: function deleteData(path) {
            return this.setData(null, path);
        }
    }, {
        key: 'pushData',
        value: function pushData(data, path) {
            var _this6 = this;

            var child = this.fb;
            if (path) {
                child = this.getChild(path);
            }
            try {
                return child.push(data, function (e) {
                    if (e) {
                        _this6.error(e, path);
                    }
                });
            } catch (e) {
                this.error(e, path);
            }
        }
    }, {
        key: 'setDataInTransaction',
        value: function setDataInTransaction(data, path, callback) {
            var _this7 = this;

            var child = this.fb;
            if (path) {
                child = this.getChild(path);
            }
            try {
                return child.transaction(function (currentValue) {
                    try {
                        return data;
                    } catch (e) {
                        _this7.error(e, path);
                    }
                });
            } catch (e) {
                this.error(e, path);
            }
        }
    }, {
        key: 'error',
        value: function error(e, path) {
            if (e) {
                this.metaMap.error(e);
            }
            if (path) {
                this.metaMap.error({ message: 'Permission denied to ' + path });
            }
        }
    }, {
        key: 'logout',
        value: function logout() {
            this._login = null;
            this._onReady = null;
            localforage.removeItem('firebase_token');
            this.fb.unauth();
        }
    }, {
        key: 'metaMap',
        get: function get() {
            if (!this._metaMap) {
                this._metaMap = require('../../MetaMap.js');
            }
            return this._metaMap;
        }
    }]);

    return MetaFire;
})();

module.exports = MetaFire;

},{"../../MetaMap.js":1,"bluebird":undefined,"localforage":undefined}],16:[function(require,module,exports){
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _ = require('lodash');

var UserSnap = require('../integrations/UserSnap');
var ZenDesk = require('../integrations/Zendesk');
var Google = require('../integrations/Google');
var Twiiter = require('../integrations/Twitter');
var Facebook = require('../integrations/Facebook');
var AddThis = require('../integrations/addthis');
var Intercom = require('../integrations/Intercom');

var Integrations = (function () {
	function Integrations(metaMap, user) {
		_classCallCheck(this, Integrations);

		this.config = metaMap.config;
		this.metaMap = metaMap;
		this.user = user;
		this._features = {};

		this._features.google = Google;
		this._features.usersnap = UserSnap;
		this._features.intercom = Intercom;
		this._features.zendesk = ZenDesk;
		this._features.addthis = AddThis;
	}

	_createClass(Integrations, [{
		key: 'init',
		value: function init() {
			var _this = this;

			_.each(this._features, function (Feature, name) {
				if (Feature) {
					try {
						var config = _this.config.site[name];
						_this[name] = new Feature(config, _this.user);
						_this[name].init();
						_this[name].setUser();
					} catch (e) {
						_this.metaMap.error(e);
					}
				}
			});
		}
	}, {
		key: 'setUser',
		value: function setUser() {
			var _this2 = this;

			_.each(this._features, function (Feature, name) {
				if (name) {
					_this2[name].setUser();
				}
			});
		}
	}, {
		key: 'sendEvent',
		value: function sendEvent(val) {
			var _this3 = this;

			for (var _len = arguments.length, params = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
				params[_key - 1] = arguments[_key];
			}

			_.each(this._features, function (Feature, name) {
				if (name) {
					var _name;

					(_name = _this3[name]).sendEvent.apply(_name, [val].concat(params));
				}
			});
		}
	}, {
		key: 'updatePath',
		value: function updatePath() {}
	}]);

	return Integrations;
})();

module.exports = Integrations;

},{"../integrations/Facebook":49,"../integrations/Google":50,"../integrations/Intercom":51,"../integrations/Twitter":52,"../integrations/UserSnap":53,"../integrations/Zendesk":54,"../integrations/addthis":56,"lodash":undefined}],17:[function(require,module,exports){
/// <reference path="../../../../typings/riotjs/riotjs.d.ts" />
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var riot = require('riot');
var ACTIONS = require('../constants/actions');

var Router = (function () {
    function Router(metaMap) {
        _classCallCheck(this, Router);

        this.integrations = metaMap.Integrations;
        this.user = metaMap.User;
        this.PageFactory = metaMap.PageFactory;
        this.eventer = metaMap.Eventer;
        this.isHidden = false;
    }

    _createClass(Router, [{
        key: 'init',
        value: function init() {
            var _this = this;

            riot.route.start();
            riot.route(function (target) {
                for (var _len = arguments.length, params = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
                    params[_key - 3] = arguments[_key];
                }

                var _PageFactory;

                var id = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];
                var action = arguments.length <= 2 || arguments[2] === undefined ? '' : arguments[2];

                _this.path = _this.getPath(target);

                _this.toggleMain(true, _this.path);
                (_PageFactory = _this.PageFactory).navigate.apply(_PageFactory, [_this.path, id, action].concat(params));

                _this.eventer['do']('history', window.location.hash);
            });
            this.to(this.currentPage);
        }
    }, {
        key: 'getPreviousPage',
        value: function getPreviousPage() {
            var pageNo = arguments.length <= 0 || arguments[0] === undefined ? 2 : arguments[0];

            var page = 'home';
            var pageCnt = this.user.history.length;
            if (pageCnt > 0) {
                page = this.getPath(this.user.history[pageCnt - pageNo]);
            }
            return page;
        }
    }, {
        key: 'track',
        value: function track(path) {
            this.integrations.updatePath(path);
        }
    }, {
        key: 'toggleMain',
        value: function toggleMain(hide, path) {
            this.track(path);
            if (hide) {
                this.isHidden = true;
            } else {
                this.isHidden = false;
            }
        }
    }, {
        key: 'getPath',
        value: function getPath(path) {
            if (path) {
                while (path.startsWith('!') || path.startsWith('#')) {
                    path = path.substr(1);
                }
            }
            return path;
        }
    }, {
        key: 'to',
        value: function to(path) {
            path = this.getPath(path);
            if (path) {
                this.toggleMain(true, path);
                riot.route('' + path);
            }
        }
    }, {
        key: 'back',
        value: function back() {
            var path = 'home';
            var pageCnt = this.user.history.length;
            if (pageCnt > 1 && (this.currentPage != 'mymaps' || this.currentPage != this.previousPage)) {
                path = this.previousPage;
                var backNo = 2;
                while (!this.isTracked(path) && this.user.history[backNo]) {
                    backNo += 1;
                    path = this.getPreviousPage(backNo);
                }
            }
            return this.to(path);
        }
    }, {
        key: 'isTracked',
        value: function isTracked(path) {
            var pth = this.getPath(path);
            return _.any(this.doNotTrack, function (p) {
                return !pth.startsWith(p);
            });
        }
    }, {
        key: 'currentPage',
        get: function get() {
            var page = window.location.hash || 'home';
            if (!this.isTracked(page)) {
                var pageCnt = this.user.history.length;
                if (pageCnt > 0) {
                    page = this.getPath(this.user.history[pageCnt - 1]);
                }
            }
            return page;
        }
    }, {
        key: 'currentPath',
        get: function get() {
            return this.path;
        }
    }, {
        key: 'previousPage',
        get: function get() {
            return this.getPreviousPage(2);
        }
    }, {
        key: 'doNotTrack',
        get: function get() {
            if (!this._doNotTrack) {
                this._doNotTrack = [ACTIONS.DELETE_MAP, ACTIONS.COPY_MAP, ACTIONS.LOGOUT, ACTIONS.NEW_MAP, ACTIONS.FEEDBACK];
            }
            return this._doNotTrack;
        }
    }]);

    return Router;
})();

module.exports = Router;

},{"../constants/actions":39,"riot":"riot"}],18:[function(require,module,exports){
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Auth0Lock = window.Auth0Lock; //require('auth0-lock');
var localforage = require('localforage');
var _ = require('lodash');
var Promise = require('bluebird');

var Auth0 = (function () {
    function Auth0(config, metaMap) {
        _classCallCheck(this, Auth0);

        this.config = config;
        this.metaMap = metaMap;
        this.lock = new Auth0Lock(config.api, config.app);
        this.lock.on('loading ready', function () {});
    }

    _createClass(Auth0, [{
        key: 'login',
        value: function login() {
            var _this = this;

            if (!this._login) {
                this._login = new Promise(function (fulfill, reject) {
                    var showLogin = function showLogin() {
                        _this.lock.show({
                            closable: false,
                            loginAfterSignup: true,
                            authParams: {
                                scope: 'openid offline_access'
                            }
                        }, function (err, profile, id_token, ctoken, opt, refresh_token) {
                            if (err) {
                                _this.onFail(err, reject);
                            } else {
                                localforage.setItem('id_token', id_token);
                                localforage.setItem('profile', profile);

                                _this.ctoken = profile.ctoken = ctoken;
                                _this.id_token = profile.id_token = id_token;
                                _this.profile = profile;
                                _this.refresh_token = profile.refresh_token = refresh_token;
                                _this._getSession = fulfill(profile);
                            }
                        });
                    };
                    _this.getSession().then(function (profile) {
                        if (profile) {
                            fulfill(profile);
                        } else {
                            showLogin();
                        }
                    })['catch'](function (err) {
                        showLogin();
                    });
                });
            }
            return this._login;
        }
    }, {
        key: 'linkAccount',
        value: function linkAccount() {
            this.lock.show({
                callbackURL: location.href.replace(location.hash, ''),
                dict: {
                    signin: {
                        title: 'Link with another account'
                    }
                },
                authParams: {
                    access_token: this.ctoken
                }
            });
        }
    }, {
        key: 'onFail',
        value: function onFail(err, reject) {
            this.metaMap.error(err);
            if (reject) {
                reject(err);
                this.logout();
            }
        }
    }, {
        key: 'getSession',
        value: function getSession() {
            var _this2 = this;

            if (this.profile) {
                this._getSession = new Promise(function (fulfill, reject) {
                    fulfill(_this2.profile);
                });
            } else if (!this._getSession) {
                this._getSession = new Promise(function (fulfill, reject) {
                    return localforage.getItem('id_token').then(function (id_token) {
                        if (id_token) {
                            return _this2.lock.getProfile(id_token, function (err, profile) {
                                if (err) {
                                    _this2.onFail(err, reject);
                                } else {
                                    localforage.setItem('id_token', id_token);
                                    localforage.setItem('profile', profile);
                                    _this2.id_token = profile.id_token = id_token;
                                    _this2.profile = profile;
                                    return fulfill(profile);
                                }
                            });
                        } else {
                            return reject(new Error('No session'));
                        }
                    });
                });
            }
            return this._getSession;
        }
    }, {
        key: 'logout',
        value: function logout() {
            var _this3 = this;

            localforage.removeItem('id_token').then(function () {
                return localforage.removeItem('profile');
            }).then(function () {
                _this3.profile = null;
                _this3.ctoken = null;
                _this3.id_token = null;
                _this3.refresh_token = null;
                _this3._login = null;
                _this3._getSession = null;
                window.location.reload();
            });
        }
    }]);

    return Auth0;
})();

module.exports = Auth0;

},{"bluebird":undefined,"localforage":undefined,"lodash":undefined}],19:[function(require,module,exports){
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var uuid = require('../tools/uuid.js');
var Common = require('../tools/Common');

var User = (function () {
    function User(profile, auth, eventer, metaFire) {
        _classCallCheck(this, User);

        this.auth = auth;
        this.eventer = eventer;
        this.metaFire = metaFire;
        this.userKey = uuid();
        this.onReady();
        this.metaMap = require('../../MetaMap');
    }

    _createClass(User, [{
        key: 'onReady',
        value: function onReady() {
            var _this = this;

            if (!this._onReady) {
                (function () {
                    var trackHistory = _.once(function () {
                        _this.eventer.every('history', function (page) {
                            if (_this.history.length == 0 || page != _this.history[_this.history.length - 1]) {
                                _this.history.push(page);
                                _this.metaFire.setData(_this.history, 'users/' + _this.auth.uid + '/history');
                            }
                        });
                    });
                    _this._onReady = new Promise(function (fulfill, reject) {
                        _this.metaFire.on('users/' + _this.auth.uid, function (user) {
                            if (user) {
                                try {
                                    if (!user.history) {
                                        user.history = [];
                                    }
                                    _this.profile = user;
                                    trackHistory();
                                } catch (e) {
                                    _this.metaMap.error(e);
                                }
                                fulfill(user);
                            }
                        });
                    });
                })();
            }
            return this._onReady;
        }
    }, {
        key: 'saveUserEditorOptions',
        value: function saveUserEditorOptions(options) {
            var data = {
                user: {
                    editor_options: JSON.stringify(options)
                }
            };
        }
    }, {
        key: '_identity',
        get: function get() {
            var ret = {};
            if (this.profile && this.profile.identity) {
                ret = this.profile.identity;
            }
            return ret;
        }
    }, {
        key: 'createdOn',
        get: function get() {
            if (null == this._createdOn) {
                if (this._identity.created_at) {
                    var dt = new Date(this._identity.created_at);
                    this._createdOn = {
                        date: dt,
                        ticks: Common.getTicksFromDate(dt)
                    };
                }
            }
            return this._createdOn || { date: null, ticks: null };
        }
    }, {
        key: 'displayName',
        get: function get() {
            var ret = this.fullName;
            if (ret) {
                ret = ret.split(' ')[0];
            }
            if (!ret && this._identity.nickname) {
                ret = this._identity.nickname;
            }

            return ret;
        }
    }, {
        key: 'fullName',
        get: function get() {
            var ret = '';
            if (this._identity.name) {
                ret = this._identity.name;
            }
            return ret;
        }
    }, {
        key: 'email',
        get: function get() {
            var ret = '';
            if (this._identity.email) {
                ret = this._identity.email;
            }
            return ret;
        }
    }, {
        key: 'picture',
        get: function get() {
            var ret = '';
            if (this._identity.picture) {
                ret = this._identity.picture;
            }
            return ret;
        }
    }, {
        key: 'userId',
        get: function get() {
            return this.auth.uid;
        }
    }, {
        key: 'isAdmin',
        get: function get() {
            var ret = false;
            if (this._identity.roles) {
                ret = this._identity.roles.indexOf('admin') !== -1;
            }
            return ret;
        }
    }, {
        key: 'history',
        get: function get() {
            return this.profile.history || [];
        }
    }]);

    return User;
})();

module.exports = User;

},{"../../MetaMap":1,"../tools/Common":77,"../tools/uuid.js":79}],20:[function(require,module,exports){
'use strict';

var SandbankEditor = require('./sbEditor');
// functions handling analytics
// analytics display is in views/maps/_analytics_tab_map and _analytics_tab_thing
SandbankEditor.Analytics = function ($scope, $http, map) {

    var self = this;

    this.init = function () {};

    this.handleDiagramEvent = function (eventName, e) {
        if (eventName == 'ChangedSelection') {
            if (map.ui.currentTabIs(map.ui.TAB_ID_ANALYTICS_THING)) {
                self.updateContextualAnalytics();
            }
        }
    };

    // called when a tab is opened or closed
    this.currentTabChanged = function (newValue, oldValue) {
        if (newValue == map.ui.TAB_ID_ANALYTICS_THING) {
            // opening thing analytics tab
            self.updateContextualAnalytics();
        }
    };

    // this gets populated by map.loadMapExtraData, on load and after every autosave
    this.mapAnalytics = null;

    // --------- contextual analytics --------------
    // - these are all calculated here, unlike map analytics which are calculated on the server and connected with badges and points

    // this gets calculated by updateContextualAnalytics
    this.contextualAnalytics = {
        thingName: '',

        // thing stuff
        distinctFrom: 0,
        intentionallyDistinctFrom: 0,
        partOf: 0,
        includesParts: 0,
        relatedTo: 0,
        isRelationship: 0,
        lookingAt: 0,
        lookedAtFrom: 0,

        // R stuff
        rFromThingName: '',
        rToThingName: '',
        isRThing: false,
        isRSystem: false,
        isRPoint: false,
        isRView: false
    };

    this.updateContextualAnalytics = function () {
        //console.log('updateContextualAnalytics');
        if (!map.ui.currentTabIs(map.ui.TAB_ID_ANALYTICS_THING)) {
            return;
        }

        var diagram = map.diagram;
        var part = diagram.selection.first();
        var a = self.contextualAnalytics;

        if (part && part instanceof go.Group) {
            var thing = part;

            // thing name
            a.thingName = thing.data.text;

            // distinct from
            a.distinctFrom = _.where(diagram.model.nodeDataArray, { isGroup: true }).length - 1;

            // part of
            var level = 0;
            var thing2 = thing;
            while (thing2 = getContainingGroup(thing2)) {
                level++;
            }
            a.partOf = level;

            // includes parts
            a.includesParts = countGroups(thing);

            // related to / looking at / looked at from / intentionally distinct from
            a.relatedTo = 0;
            a.lookingAt = 0;
            a.lookedAtFrom = 0;
            a.intentionallyDistinctFrom = 0;
            var links = thing.linksConnected;
            var rConnectedThingKeys = [];
            while (links.next()) {
                var link = links.value;
                // P link
                if (link.data.category == 'P') {
                    if (link.fromNode == thing) {
                        a.lookingAt++;
                    } else if (link.toNode == thing) {
                        a.lookedAtFrom++;
                    }
                }
                // D link
                else if (link.data.category == 'D') {
                        a.intentionallyDistinctFrom++;
                    }
                    // R link
                    else if (!link.data.category) {
                            // track keys of related things so we don't count them multiple times
                            if (link.fromNode == thing) {
                                rConnectedThingKeys.push(link.toNode.data.key);
                            } else if (link.toNode == thing) {
                                rConnectedThingKeys.push(link.fromNode.data.key);
                            }
                        }
            }
            a.relatedTo = _.uniq(rConnectedThingKeys).length;

            // isRelationship
            a.isRelationship = thing.isLinkLabel;
        } else if (part && part instanceof go.Link) {
            var rel = part;

            // thing names
            a.rFromThingName = rel.fromNode.data.text;
            a.rToThingName = rel.toNode.data.text;

            // is R thing
            a.isRThing = rel.isLabeledLink;

            // is R system
            a.isRSystem = rel.isLabeledLink && countGroups(rel.labelNodes.first()) > 0;

            // is R point
            a.isRPoint = rel.isLabeledLink && isPoint(rel.labelNodes.first());

            // is R view
            a.isRView = rel.isLabeledLink && isView(rel.labelNodes.first());
        }
    };

    // returns either the containingGroup or the rThingContainingGroup, whichever is non-null
    function getContainingGroup(group) {
        return group.containingGroup || getRThingContainingGroup(group);
    }

    // if group is an R-thing between two sibling parts of a whole, returns the whole; else returns null
    function getRThingContainingGroup(group) {
        if (group.isLinkLabel) {
            var fromParent = group.labeledLink.fromNode.containingGroup;
            var toParent = group.labeledLink.toNode.containingGroup;
            if (fromParent !== null && toParent !== null && fromParent == toParent) {
                return fromParent;
            }
        }
        return null;
    }

    // counts the member parts of the group that are groups, recursively (not including the group itself)
    function countGroups(group) {
        var count = 0;
        var it = getMemberGroups(group).iterator;
        while (it.next()) {
            var part = it.value;
            count += 1 + countGroups(part);
        }

        return count;
    }

    // returns the collection of groups that are either a memberPart of this group, or an R-thing between sibling memberParts
    function getMemberGroups(group) {
        var members = new go.List();
        var it = group.memberParts;
        while (it.next()) {
            var part = it.value;
            if (part instanceof go.Group) {
                members.add(part);
                var rthing = getRThingToSibling(part); // NB: should not get duplication here, as this checks for r-things in only one direction
                if (rthing) {
                    members.add(rthing);
                }
            }
        }
        return members;
    }

    // if the group is linked by an R-thing to a sibling (with the group as the fromNode), returns the R-thing; else returns null
    function getRThingToSibling(group) {
        var it = group.findLinksOutOf();
        while (it.next()) {
            var link = it.value;
            if (link.labelNodes.count > 0 && link.toNode.containingGroup == group.containingGroup) {
                return link.labelNodes.first();
            }
        }
        return null;
    }

    function isPoint(group) {
        var it = group.findLinksOutOf();
        while (it.next()) {
            var link = it.value;
            if (link.data.category == 'P') {
                return true;
            }
        }
        return false;
    }

    function isView(group) {
        var it = group.findLinksInto();
        while (it.next()) {
            var link = it.value;
            if (link.data.category == 'P') {
                return true;
            }
        }
        return false;
    }
};

},{"./sbEditor":31}],21:[function(require,module,exports){
'use strict';

var SandbankEditor = require('./sbEditor');

// functions handling attachments

SandbankEditor.Attachments = function ($scope, $http, $resource, map) {

    var self = this;

    this.selectedThing = null;
    this.attachments = null;

    this.attachmentTypes = [{ name: 'note', labelSingular: 'Note', labelPlural: 'Notes' }, { name: 'link', labelSingular: 'Web Link', labelPlural: 'Web Links' }, { name: 'task', labelSingular: 'Task', labelPlural: 'Tasks' }, { name: 'map', labelSingular: 'Linked MetaMap', labelPlural: 'Linked MetaMaps' }
    //        {name: 'doc', labelSingular: 'Document', labelPlural: 'Documents'}  // limit overall storage space OR simpler rules?
    // limit file types - pdf, jpg, gif, png, office?...  whitelist vs. blacklist
    ];

    this.init = function () {};

    this.handleDiagramEvent = function (eventName, e) {
        if (eventName == 'ChangedSelection') {
            if (map.ui.currentTabIs(map.ui.TAB_ID_ATTACHMENTS)) {
                self.stopEditingAll();
                self.saveAttachments();
                self.loadSelectedThingAttachments();
            }
        }
    };

    // called when a tab is opened or closed
    this.currentTabChanged = function (newValue, oldValue) {
        if (newValue == map.ui.TAB_ID_ATTACHMENTS) {
            // opening tab
            self.loadSelectedThingAttachments();
        }
        if (oldValue == map.ui.TAB_ID_ATTACHMENTS) {
            // closing tab
            self.saveAttachments();
        }
    };

    this.loadSelectedThingAttachments = function () {
        $scope.safeApply(function () {
            if (map.thingSelected()) {
                self.selectedThing = map.getUniqueThingSelected();
                self.attachments = self.selectedThing.data.attachments;
                if (self.attachments === undefined) {
                    self.attachments = [];
                }
            }
        });
    };

    // set all attachments to editing = false
    this.stopEditingAll = function () {
        $scope.safeApply(function () {
            if (self.attachments) {
                _.each(self.attachments, function (att) {
                    att.editing = false;
                });
            }
        });
    };

    this.editingAnItem = function () {
        return self.attachments && _.findWhere(self.attachments, { editing: true }) !== undefined;
    };

    // set all other attachments to editing = false
    this.startEditing = function (attachment) {
        $scope.safeApply(function () {
            self.stopEditingAll();
            attachment.editing = true;
        });
    };

    this.saveItem = function (attachment) {
        $scope.safeApply(function () {
            attachment.editing = false;
            self.saveAttachments();
        });
    };

    this.saveAttachments = function () {
        $scope.safeApply(function () {
            //console.log('saveAttachments, selected: ' + self.selectedThing);
            if (self.selectedThing) {
                map.diagram.model.setDataProperty(self.selectedThing.data, 'attachments', self.attachments);
                self.selectedThing.updateTargetBindings();
            }
            map.autosave.saveNow('edit_attachments');
        });
    };

    this.listAttachments = function (type) {
        var atts = _.where(self.attachments, { type: type });
        return atts;
    };

    this.addAttachment = function (type) {
        var item = { type: type, editing: true };
        if (type == 'note') {
            self.attachments.push(_.extend(item, { text: '', url: '' }));
        } else if (type == 'link') {
            self.attachments.push(_.extend(item, { label: '', url: '' }));
        } else if (type == 'task') {
            self.attachments.push(_.extend(item, { text: '' }));
        } else if (type == 'doc') {
            self.attachments.push(_.extend(item, { name: '' }));
        } else if (type == 'map') {
            self.attachments.push(_.extend(item, { mapRef: { id: 0, name: '' } }));
        }
    };

    this.isValid = function (attachment) {
        if (attachment.type == 'link') {
            return attachment.label && attachment.url && attachment.label.trim() !== '' && attachment.url.trim() !== '';
        } else if (attachment.type == 'note') {
            return attachment.text && attachment.text.trim() !== '';
        } else if (attachment.type == 'task') {
            return attachment.text && attachment.text.trim() !== '';
        } else if (attachment.type == 'doc') {
            return attachment.name && attachment.name.trim() !== '';
        } else if (attachment.type == 'map') {
            return attachment.mapRef && attachment.mapRef.id !== null && attachment.mapRef.id !== undefined;
        }
    };

    this.deleteAttachment = function (att) {
        var typeLabel = _.findWhere(self.attachmentTypes, { name: att.type }).labelSingular;
        if (confirm('Delete ' + typeLabel + '?')) {
            var i = _.indexOf(self.attachments, att);
            self.attachments.splice(i, 1);
        }
    };

    // query server for maps containing the given text in the map name
    this.getOtherMaps = function (viewValue) {
        // NB: this URL is constructed to match the one generated by the search form on the maps page...
        var url = '/maps/visible_maps.json?utf8=%E2%9C%93&q%5Bname_cont%5D=' + viewValue;
        return $http.get(url).then(function (response) {
            return response.data.maps;
        });
    };

    this.otherMapSelected = function (viewValue, modelValue) {
        //console.log('otherMapSelected, viewValue: ' + viewValue.id + ', modelValue: ' + modelValue);
    };

    this.formatOtherMap = function (model) {
        return model ? model.name : '';
    };
};

},{"./sbEditor":31}],22:[function(require,module,exports){
'use strict';

var SandbankEditor = require('./sbEditor');
// functions handling editor autosave function

SandbankEditor.Autosave = function ($scope, $http, map) {

    var self = this;

    var MetaMap = require('../../MetaMap');

    var changeTypes = [];

    this.saveOnModelChanged = true;

    // do a save next time the set interval passes with no save requests
    this.save = function (changeType) {
        changeTypes.push(changeType);
        delayedAutosave();
    };

    // do a save right now
    this.saveNow = function (changeType) {
        changeTypes.push(changeType);
        autosave();
    };

    // don't let autosave be triggered more than every N milliseconds...
    var delayedAutosave = _.debounce(autosave, 2000);

    // compile the current list of change type descriptions, process them
    // to remove duplicates, and save the current data
    function autosave() {
        // stop right here if we're in the sandbox and/or we don't have edit permissions
        if ($scope.sandbox || !$scope.canEdit) {
            return;
        }

        if (!changeTypes.length) {
            //console.log('autosave: nothing to save!'); // shouldn't happen
            return;
        }

        // de-dupe the list of change types
        var changeList = _.uniq(changeTypes);
        //console.log('changeList: ' + changeList);
        // don't show move events unless that's all we have
        var changeListWithoutMoves = _.without(changeList, 'move');
        if (changeListWithoutMoves.length > 0) {
            changeList = changeListWithoutMoves;
        }
        //console.log('changeList without moves: ' + changeList);
        // get descriptions
        var descriptionList = _.map(changeList, function (ct) {
            return _.result(changeDescriptions, ct);
        });

        //console.log('autosave, changeList: ' + changeList + ', descriptionList: ' + descriptionList);
        var postData = {
            data: JSON.parse(map.diagram.model.toJson()),
            state_data: map.ui.getStateData(),
            editor_options: map.ui.getMapEditorOptions(),
            presenter_slides: map.presenter.getSlideCount(),
            activity_slides: map.presenter.getActivitySlideCount(),
            change_type: changeList.join(';'),
            change_description: descriptionList.join('; '),
            thumbnail_png: map.presenter.getMapThumbnail(),
            changed_by: MetaMap.User.userKey
        };
        var url = $scope.mapUrl + '.json';

        $scope.updateEditStatus($scope.SAVING);

        changeTypes = [];
        $scope.updateEditStatus($scope.SAVE_OK);
        // load returned data for analytics, points, badges, versions
        // $scope.map.loadMapExtraData(response.data.map);
        MetaMap.MetaFire.setDataInTransaction(postData, 'maps/data/' + $scope.mapId);
        MetaMap.Integrations.sendEvent($scope.mapId, 'event', 'autosave', 'autosave');
    }

    // -------------- handle model changes - trigger autosave ------------------

    var changeDescriptions = {
        move: 'Moved Objects',
        undo_redo: 'Performed Undo/Redo',
        edit_title: 'Edited MetaMap Title',
        edit_description: 'Edited MetaMap Description',
        edit_usertags: 'Edit MetaMap Tags',
        edit_d: 'Edited Distinctions',
        edit_s: 'Edited Systems',
        edit_r: 'Edited Relationships',
        edit_p: 'Edited Perspectives',
        add_thing: 'Added Ideas',
        rename_thing: 'Renamed Ideas',
        delete_thing: 'Deleted Ideas',
        edit_attachments: 'Edited Attachments',
        edit_presenter: 'Edited Presenter Slides',
        edit_generator: 'Inserted Ideas from ThinkQuery',
        edit_standards: 'Edited Links to Common Core Standards'
    };

    // e is a go.ChangedEvent
    this.modelChanged = function (e) {

        if (!self.saveOnModelChanged) {
            return;
        }

        var changeType = null;
        var changeDescription = null;

        if (e.propertyName == 'type') {
            // change R type
            // modelChange: , change: ChangedEvent.Property, oldParam: null, oldValue: [0,n,1,o,2,A,3,r,4,r,5,o,6,w,7,s] , newParam: null, newValue: [0,t,1,o] , propertyName: type
            changeType = 'edit_r';
            changeDescription = 'Changed Relationship Types';
        } else if (e.propertyName == 'layout') {
            // change system layout
            // modelChange: , change: ChangedEvent.Property, oldParam: null, oldValue: [0,l,1,e,2,f,3,t] , newParam: null, newValue: [0,r,1,i,2,g,3,h,4,t] , propertyName: layout
            changeType = 'edit_s';
        } else if (e.change == go.ChangedEvent.Insert && propertyEquals(e.newValue, 'fromPort', 'R')) {
            // add link
            // modelChange: linkDataArray, change: ChangedEvent.Insert, oldParam: null, oldValue: [] , newParam: 1, newValue: [type,noArrows,__gohashid,6005,from,-2,to,-4,labelKeys,,fromPort,R,toPort,P] , propertyName: linkDataArray
            // modelChange: linkToPortId, change: ChangedEvent.Property, oldParam: null, oldValue: [0,P] , newParam: null, newValue: [0,R] , propertyName: toPort
            changeType = 'edit_r';
        } else if (e.change == go.ChangedEvent.Remove && propertyEquals(e.oldValue, 'fromPort', 'R')) {
            // delete link
            // modelChange: linkDataArray, change: ChangedEvent.Remove, oldParam: 1, oldValue: [type,noArrows,__gohashid,6005,from,-2,to,-4,labelKeys,,fromPort,R,toPort,R] , newParam: null, newValue: [] , propertyName: linkDataArray
            changeType = 'edit_r';
        } else if (e.propertyName == 'linkDataArray') {
            // change P/D links
            // add P link
            // modelChange: linkDataArray, change: ChangedEvent.Insert, oldParam: null, oldValue: [] , newParam: 2, newValue: [type,noArrows,__gohashid,19122,from,-2,to,-4,labelKeys,,fromPort,P,toPort,P] , propertyName: linkDataArray
            // modelChange: linkCategory, change: ChangedEvent.Property, oldParam: null, oldValue: [] , newParam: null, newValue: [0,P] , propertyName: category
            // delete P link
            // modelChange: linkDataArray, change: ChangedEvent.Remove, oldParam: 2, oldValue: [type,noArrows,__gohashid,19122,from,-2,to,-4,labelKeys,,fromPort,P,toPort,P,category,P] , newParam: null, newValue: [] , propertyName: linkDataArray
            // add D link
            // modelChange: linkDataArray, change: ChangedEvent.Insert, oldParam: null, oldValue: [] , newParam: 1, newValue: [from,-7,to,-5,fromPort,D,toPort,D,category,D,__gohashid,19522] , propertyName: linkDataArray
            // remove D link
            // modelChange: linkDataArray, change: ChangedEvent.Remove, oldParam: 1, oldValue: [from,-7,to,-5,fromPort,D,toPort,D,category,D,__gohashid,19522] , newParam: null, newValue: [] , propertyName: linkDataArray

            if (e.newValue && e.newValue.category == 'P' || e.oldValue && e.oldValue.category == 'P') {
                changeType = 'edit_p';
            } else if (e.newValue && e.newValue.category == 'D' || e.oldValue && e.oldValue.category == 'D') {
                changeType = 'edit_d';
            }
        } else if (e.propertyName == 'category') {
            // add P link
            // modelChanged, modelChange: linkCategory, change: ChangedEvent.Property, oldParam: null, oldValue: [] , newParam: null, newValue: [0,P] , propertyName: category
            changeType = 'edit_p';
        } else if (e.propertyName == 'group') {
            // drag into S
            // modelChanged, modelChange: nodeGroupKey, change: ChangedEvent.Property, oldParam: null, oldValue: [] , newParam: null, newValue: [] , propertyName: group
            // reorder part
            // modelChanged, modelChange: nodeGroupKey, change: ChangedEvent.Property, oldParam: null, oldValue: [] , newParam: null, newValue: [] , propertyName: group
            // drag to D
            // modelChanged, modelChange: nodeGroupKey, change: ChangedEvent.Property, oldParam: null, oldValue: [] , newParam: null, newValue: [] , propertyName: group

            changeType = 'edit_s';
        } else if (e.propertyName == 'nodeDataArray' && e.change == go.ChangedEvent.Insert && propertyEquals(e.newValue, 'isGroup', true)) {
            // add thing
            // modelChange: nodeDataArray, change: ChangedEvent.Insert, oldParam: null, oldValue: [] , newParam: 5, newValue: [text,New Idea,isGroup,true,level,0,layout,left,sExpanded,true,pExpanded,false,dExpanded,false,__gohashid,54688,group,,key,-7] , propertyName: nodeDataArray
            // modelChange: , change: ChangedEvent.Property, oldParam: null, oldValue: [] , newParam: null, newValue: [0,2,1,2,2,8,3,.,4,5,5,6,6,2,7,5,8, ,9,-,10,1,11,4,12,9,13,.,14,6,15,8,16,7,17,5] , propertyName: loc
            // modelChange: , change: ChangedEvent.Property, oldParam: null, oldValue: [] , newParam: null, newValue: [] , propertyName: children
            changeType = 'add_thing';
        } else if (e.propertyName == 'text') {
            // move thing
            // modelChange: , change: ChangedEvent.Property, oldParam: null, oldValue: [0,b,1,b,2,b,3,b,4,b] , newParam: null, newValue: [0,a,1,a,2,a,3,a,4,a] , propertyName: text
            changeType = 'rename_thing';
            changeDescription = 'Renamed Ideas';
        } else if (e.propertyName == 'nodeDataArray' && e.change == go.ChangedEvent.Remove && propertyEquals(e.oldValue, 'isGroup', true)) {
            // delete thing
            // modelChange: nodeDataArray, change: ChangedEvent.Remove, oldParam: 5, oldValue: [text,New Idea,isGroup,true,level,0,layout,left,sExpanded,true,pExpanded,false,dExpanded,false,__gohashid,54688,group,,key,-7,loc,228.5625 -149.6875,children,0,attachments,] , newParam: null, newValue: [] , propertyName: nodeDataArray
            changeType = 'delete_thing';
        } else if (e.propertyName == 'nodeDataArray' && e.change == go.ChangedEvent.Insert && propertyEquals(e.newValue, 'isGroup', false)) {
            // add slide
            // modelChange: nodeDataArray, change: ChangedEvent.Insert, oldParam: null, oldValue: [] , newParam: 5, newValue: [key,slide-0,category,slide,index,0,isGroup,false,width,200,height,200,loc,156.5625 -97.6875,level,0,children,0,title,,notes,,__gohashid,63877] , propertyName: nodeDataArray
            changeType = 'edit_presenter';
        } else if (e.propertyName == 'nodeDataArray' && e.change == go.ChangedEvent.Remove && propertyEquals(e.oldValue, 'isGroup', false)) {
            // delete slide
            //modelChange: nodeDataArray, change: ChangedEvent.Remove, oldParam: 5, oldValue: [key,slide-0,category,slide,index,0,isGroup,false,width,200,height,200,loc,156.5625 -97.6875,level,0,children,0,title,,notes,,__gohashid,63877,$$hashKey,0XN] , newParam: null, newValue: [] , propertyName: nodeDataArray
            changeType = 'edit_presenter';
        } else if (e.propertyName == 'loc' || e.propertyName == 'width' || e.propertyName == 'height') {
            // move thing or resize slide
            // move slide
            // modelChange: , change: ChangedEvent.Property, oldParam: null, oldValue: [0,2,1,4,2,3,3, ,4,-,5,1,6,2,7,8] , newParam: null, newValue: [0,2,1,4,2,3,3, ,4,-,5,1,6,2,7,7] , propertyName: loc
            // resize slide
            // modelChange: , change: ChangedEvent.Property, oldParam: null, oldValue: [] , newParam: null, newValue: [] , propertyName: height
            // move thing
            // modelChange: , change: ChangedEvent.Property, oldParam: null, oldValue: [0,4,1,7,2,9,3,.,4,8,5,7,6,5,7, ,8,-,9,1,10,2,11,2,12,.,13,8,14,7,15,5] , newParam: null, newValue: [0,5,1,4,2,0,3,.,4,3,5,1,6,2,7,5,8, ,9,-,10,1,11,2,12,1,13,.,14,1,15,8,16,7,17,5] ,            
            changeType = 'move';
        } else if (e.propertyName == 'level' || e.propertyName == 'children') {
            // these attributes are updated as a result of other actions; ignore
            changeType = null;
        } else if (e.propertyName == 'attachments') {
            // edited attachments
            changeType = 'edit_attachments';
        } else if (e.propertyName == 'sExpanded' || e.propertyName == 'pExpanded') {
            // ignore expand/collapse
            changeType = 'move';
        } else if (e.propertyName == 'FinishedUndo' || e.propertyName == 'FinishedRedo') {
            changeType = 'undo_redo';
            map.refresh();
        } else if (e.change != go.ChangedEvent.Transaction) {
            //console.log('modelChanged, modelChange: ' + e.modelChange +
            //    ', change: ' + e.change +
            //    ', oldParam: ' + e.oldParam +
            //    ', oldValue: [' + _.pairs(e.oldValue) + '] ' +
            //    ', newParam: ' + e.newParam +
            //    ', newValue: [' + _.pairs(e.newValue) + '] ' +
            //    ', propertyName: ' + e.propertyName
            //);
        }

        if (changeType) {
            map.analytics.updateContextualAnalytics();
            //console.log('calling delayedAutosave, changeType: ' + changeType);
            self.save(changeType);
        }
    };

    // convenience function for checking properties
    function propertyEquals(obj, key, value) {
        return obj !== null && _.has(obj, key) && _.result(obj, key) == value;
    }
};

},{"../../MetaMap":1,"./sbEditor":31}],23:[function(require,module,exports){
'use strict';

require('./user.js');
require('./editor_options.js');
require('./analytics.js');
require('./attachments.js');
require('./autosave.js');
require('./generator.js');
require('./layouts.js');
require('./map.js');
require('./perspectives.js');
require('./presenter.js');
require('./sharing.js');
require('./standards.js');
require('./tagging.js');
require('./templates.js');
require('./tests.js');
require('./ui.js');

var SandbankEditor = require('./sbEditor');
var moment = require('moment');

window.MapEditorCtrl = function ($rootScope, $scope, $http, $resource, $timeout, $modal, $log) {

    $scope.map = new SandbankEditor.Map($scope, $http, $resource, $timeout, $modal, $log);

    // window.mapData is set in _form view
    var metadata = $scope.mapData.metadata;
    $scope.sandbox = metadata.sandbox;
    //$scope.mapData = window.mapData.map.data; // this gets overwritten by load() unless we are in the sandbox with no map ID
    //$scope.mapId = metadata.id;
    $scope.mapTitle = metadata.name;
    $scope.mapUserTags = metadata.userTags;
    $scope.mapUrl = metadata.url;
    $scope.canEdit = metadata.canEdit;
    $scope.updatedAt = metadata.updatedAt;
    $scope.updatedBy = metadata.updatedBy; // ID
    $scope.updatedByName = metadata.updatedByName;

    $scope.editingTitle = false;

    $scope.showImageExport = false;
    $scope.imageExportLoading = true;

    $scope.currentTab = null;

    // override parent scope (see user.js) since we're editing a map
    $scope.ccsTagging.mapId = $scope.mapId;

    $scope.maybeStartEditingTitle = function () {
        if ($scope.canEdit) {
            $scope.editingTitle = true;
        }
    };

    $scope.doneEditingTitle = function () {
        //console.log('doneEditingTitle');
        $scope.editingTitle = false;
        $scope.map.autosave.save('edit_title');
    };

    $scope.editingTitleKeypress = function (e) {
        if (e.which == 13) {
            $scope.doneEditingTitle();
        }
    };

    $scope.print = function () {
        window.print();
    };

    // ------------ save sandbox map (sign up/sign in) ---------------

    $scope.saveSandboxMap = function () {
        var modalInstance = $modal.open({
            templateUrl: 'template_sandbox_save_modal.html', // see views/users/_template_sandbox_save_modal
            backdrop: 'static',
            controller: sandboxSaveModalCtrl,
            windowClass: 'sandbox-save-modal',
            resolve: {
                outerScope: function outerScope() {
                    return $scope;
                },
                map: function map() {
                    return $scope.map;
                },
                userProfile: function userProfile() {
                    return $scope.userProfile;
                }
            }
        });

        modalInstance.result.then(function () {});
    };

    var sandboxSaveModalCtrl = function sandboxSaveModalCtrl($scope, $modalInstance, outerScope, map, userProfile) {

        $scope.map = map;
        $scope.userProfile = userProfile;

        $scope.mapData = map.diagram.model.toJson();
        $scope.thumbnailPng = map.presenter.getMapThumbnail();

        function getDefaultLoginData() {
            return {
                email: '',
                password: ''
            };
        }

        // this structure is used to store the form data, as well as the validation errors returned from the server...
        function getDefaultSignupData() {
            return {
                email: '',
                first_name: '',
                last_name: '',
                password: '',
                password_confirmation: ''
            };
        }

        $scope.loginData = getDefaultLoginData();
        $scope.loginError = '';

        $scope.signupData = getDefaultSignupData();
        $scope.signupErrors = getDefaultSignupData();

        $scope.doLogin = function () {
            $scope.loginErrors = getDefaultLoginData(); // reset errors
            $http.post('/sign_in.json', {
                user: $scope.loginData
            }).then(function (response) {
                // data is {id:XX, ...}
                outerScope.setUserId(response.data.id);
                outerScope.loadUserProfile(function () {
                    $scope.userProfile = outerScope.userProfile;
                });
            }, function (response) {
                // data is {"error": "Invalid email or password"}
                $scope.loginError = response.data.error;
            });
        };

        $scope.doSignup = function () {
            $scope.signupErrors = getDefaultSignupData(); // reset errors
            $http.post('/users.json', {
                user: $scope.signupData
            }).then(function (response) {
                // data is new user ID
                outerScope.setUserId(response.data);
                outerScope.loadUserProfile(function () {
                    $scope.userProfile = outerScope.userProfile;
                });
            }, function (response) {
                // data is e.g. {"first_name":["can't be blank"], ...}
                _.each(_.keys(response.data), function (key) {
                    $scope.signupErrors[key] = response.data[key].join('; ');
                });
            });
        };

        $scope.cancel = function () {
            $modalInstance.dismiss('cancel');
        };
    };

    sandboxSaveModalCtrl.$inject = ['$scope', '$modalInstance', 'outerScope', 'map', 'userProfile'];

    // ------------- edit status message for header bar ------------------

    $scope.editStatus = '';

    $scope.LAST_UPDATED = '';
    $scope.READ_ONLY = 'View only';
    $scope.SAVING = 'Saving...';
    $scope.SAVE_OK = 'All changes saved';
    $scope.SAVE_FAILED = 'Changes could not be saved';

    $scope.updateEditStatus = function (s) {
        //console.log('updateEditStatus: ' + s);
        $scope.editStatus = s;
        if (s == $scope.SAVE_FAILED) {
            alert('Changes could not be saved - please check your network connection.');
        } else if (s == $scope.LAST_UPDATED) {
            var time = moment($scope.updatedAt).fromNow();
            var by = '';
            if ($scope.updatedBy == $scope.userId) {
                by = 'by me';
            } else if ($scope.updatedByName) {
                by = 'by ' + $scope.updatedByName;
            }
            // TODO: show 'by me' only for editable shared maps?

            $scope.editStatus = 'Last updated ' + time + ' ' + by;
        }

        // Last edit was XX ago by YY
    };

    // -------------------------------------------------------------

    function init() {
        $scope.safeApply(function () {
            $scope.map.init();

            if (!$scope.sandbox) {
                // overview diagram
                var overview = go.GraphObject.make(go.Overview, "overview-diagram", {
                    observed: $scope.map.diagram,
                    contentAlignment: go.Spot.Center
                });
                var outline = overview.box.elements.first();
                outline.stroke = "#333";
            }

            //if ($scope.mapUrl) {
            $scope.map.load();
            //} else {
            //    $scope.map.loadForSandbox();
            //}

            addBehaviors();
            handleNavigation();
            handleBackspace();
        });
    }

    // misc. UI behaviors for tooltips, popups etc.
    // TODO: figure out which of these need to be reapplied after dynamic data changes (e.g. LessonBook popovers)
    function addBehaviors() {

        // NOTE: we have to use regular bootstrap tooltips for toolbar buttons (instead of ng-bootstrap ones)
        // so we can turn them off for mobile. We also put the tooltips on wrappers rather than on the actual
        // buttons, so we can avoid the issue of stuck tooltips if a button gets disabled while the tooltip is showing.

        if (!$scope.isTouchDevice()) {
            // $('.tooltip-wrapper').tooltip({
            //     placement: 'top',
            //     container: 'body'
            // });

            // $('.dropdown-menu .btn').tooltip({
            //     placement: 'left',
            //     container: 'body'
            // }); // for layout options

            $('header, #map-title').hover(function () {
                $('body.presenter-playing').addClass('hide-header');
            }, function () {
                $('body.presenter-playing').removeClass('hide-header');
            });
        }
    }

    function handleNavigation() {
        // cross-browser tweaks:
        try {
            // http://www.opera.com/support/kb/view/827/
            opera.setOverrideHistoryNavigationMode('compatible');
            history.navigationMode = 'compatible';
        } catch (e) {}
        // no biggie.

        // install before-unload handler:

        function exitMessage() {
            return "Navigating away from your Map will cause any unsaved changes to be lost " + "(any changes you make are automatically saved, but it takes a couple of seconds).";
        }

        //        $(window).bind('beforeunload', exitMessage);

        // prevent exit prompt when the user deliberately navigates away:

        $('#header-right a').click(function () {
            $(window).unbind('beforeunload', exitMessage);
        });
    }

    function handleBackspace() {
        var BACKSPACE = 8;

        $(document).on('keydown', function (event) {
            if (event.keyCode === BACKSPACE) {
                if (!$('body :focus').is(':input')) {
                    // prevent accidental backspace when no input has focus:
                    event.preventDefault();
                    event.stopPropagation();
                }
            }
        });
    }

    init();

    return $scope;
};

window.MapEditorCtrl.$inject = ['$rootScope', '$scope', '$http', '$resource', '$timeout', '$modal', '$log'];

},{"./analytics.js":20,"./attachments.js":21,"./autosave.js":22,"./editor_options.js":24,"./generator.js":26,"./layouts.js":27,"./map.js":28,"./perspectives.js":29,"./presenter.js":30,"./sbEditor":31,"./sharing.js":32,"./standards.js":33,"./tagging.js":34,"./templates.js":35,"./tests.js":36,"./ui.js":37,"./user.js":38,"moment":undefined}],24:[function(require,module,exports){
'use strict';

var SandbankEditor = require('./sbEditor');

var SandbankEditorOptions = function SandbankEditorOptions($scope, $http, $resource, $modal, $log) {

    this.openModal = function (_options, _onSaveDefaults, _onUpdate) {
        var modalInstance = $modal.open({
            templateUrl: 'template_editor_options_modal.html', // see views/maps/_template_editor_options_modal
            backdrop: 'static',
            controller: optionsModalCtrl,
            windowClass: 'options-modal',
            resolve: {
                options: function options() {
                    return _options;
                },
                onSaveDefaults: function onSaveDefaults() {
                    return _onSaveDefaults;
                },
                onUpdate: function onUpdate() {
                    return _onUpdate;
                }
            }
        });

        modalInstance.result.then(function () {});
    };

    // --------------- controller for options modal ---------------------

    var optionsModalCtrl = function optionsModalCtrl($scope, $modalInstance, options, onSaveDefaults, onUpdate) {

        $scope.options = options;

        $scope.setDefaults = {
            value: false
        };

        $scope.ok = function () {
            onUpdate($scope.options);
            if ($scope.setDefaults.value) {
                onSaveDefaults($scope.options);
            }
            $modalInstance.close();
        };

        $scope.cancel = function () {
            $modalInstance.dismiss('cancel');
        };
    };

    optionsModalCtrl.$inject = ['$scope', '$modalInstance', 'options', 'onSaveDefaults', 'onUpdate'];
};

module.exports = SandbankEditorOptions;

},{"./sbEditor":31}],25:[function(require,module,exports){
"use strict";
/*
*  Copyright (C) 1998-2015 by Northwoods Software Corporation. All Rights Reserved.
*/

// A custom Tool for moving a label on a Node

/**
* @constructor
* @extends Tool
* @class
* This tool only works when the Node has a label (any GraphObject) marked with
* { _isNodeLabel: true } that is positioned in a Spot Panel.
* It works by modifying that label's GraphObject.alignment property to have an
* offset from the center of the panel.
*/
function NodeLabelDraggingTool() {
  go.Tool.call(this);
  this.name = "NodeLabelDragging";

  /** @type {GraphObject} */
  this.label = null;
  /** @type {Point} */
  this._originalAlignment = null;
  /** @type {Point} */
  this._originalCenter = null;
}
go.Diagram.inherit(NodeLabelDraggingTool, go.Tool);

/**
* This tool can only start if the mouse has moved enough so that it is not a click,
* and if the mouse down point is on a GraphObject "label" in a Spot Panel,
* as determined by findLabel().
* @this {NodeLabelDraggingTool}
* @return {boolean}
*/
NodeLabelDraggingTool.prototype.canStart = function () {
  if (!go.Tool.prototype.canStart.call(this)) return false;
  var diagram = this.diagram;
  if (diagram === null) return false;
  // require left button & that it has moved far enough away from the mouse down point, so it isn't a click
  var e = diagram.lastInput;
  if (!e.left) return false;
  if (!this.isBeyondDragSize()) return false;

  return this.findLabel() !== null;
};

/**
* From the GraphObject at the mouse point, search up the visual tree until we get to
* an object that has the "_isNodeLabel" property set to true, that is in a Spot Panel,
* and that is not the first element of that Panel (i.e. not the main element of the panel).
* @this {NodeLabelDraggingTool}
* @return {GraphObject} This returns null if no such label is at the mouse down point.
*/
NodeLabelDraggingTool.prototype.findLabel = function () {
  var diagram = this.diagram;
  var e = diagram.firstInput;
  var elt = diagram.findObjectAt(e.documentPoint, null, null);

  if (elt === null || !(elt.part instanceof go.Node)) return null;
  while (elt.panel !== null && elt.panel.type === go.Panel.Spot && elt.panel.elt(0) !== elt) {
    if (elt._isNodeLabel) return elt;
    elt = elt.panel;
  }
  return null;
};

/**
* Start a transaction, call findLabel and remember it as the "label" property,
* and remember the original value for the label's alignment property.
* @this {NodeLabelDraggingTool}
*/
NodeLabelDraggingTool.prototype.doActivate = function () {
  this.startTransaction("Shifted Label");
  this.label = this.findLabel();
  if (this.label !== null) {
    this._originalAlignment = this.label.alignment.copy();
    var main = this.label.panel.findMainElement();
    this._originalCenter = main.getDocumentPoint(go.Spot.Center);
  }
  go.Tool.prototype.doActivate.call(this);
};

/**
* Stop any ongoing transaction.
* @this {NodeLabelDraggingTool}
*/
NodeLabelDraggingTool.prototype.doDeactivate = function () {
  go.Tool.prototype.doDeactivate.call(this);
  this.stopTransaction();
};

/**
* Clear any reference to a label element.
* @this {NodeLabelDraggingTool}
*/
NodeLabelDraggingTool.prototype.doStop = function () {
  this.label = null;
  go.Tool.prototype.doStop.call(this);
};

/**
* Restore the label's original value for GraphObject.alignment.
* @this {NodeLabelDraggingTool}
*/
NodeLabelDraggingTool.prototype.doCancel = function () {
  if (this.label !== null) {
    this.label.alignment = this._originalAlignment;
  }
  go.Tool.prototype.doCancel.call(this);
};

/**
* During the drag, call updateAlignment in order to set the GraphObject.alignment of the label.
* @this {NodeLabelDraggingTool}
*/
NodeLabelDraggingTool.prototype.doMouseMove = function () {
  if (!this.isActive) return;
  this.updateAlignment();
};

/**
* At the end of the drag, update the alignment of the label and finish the tool,
* completing a transaction.
* @this {NodeLabelDraggingTool}
*/
NodeLabelDraggingTool.prototype.doMouseUp = function () {
  if (!this.isActive) return;
  this.updateAlignment();
  this.transactionResult = "Shifted Label";
  this.stopTool();
};

/**
* Save the label's GraphObject.alignment as an absolute offset from the center of the Spot Panel
* that the label is in.
* @this {NodeLabelDraggingTool}
*/
NodeLabelDraggingTool.prototype.updateAlignment = function () {
  if (this.label === null) return;
  var last = this.diagram.lastInput.documentPoint;
  var cntr = this._originalCenter;
  this.label.alignment = new go.Spot(0.5, 0.5, last.x - cntr.x, last.y - cntr.y);
};

module.exports = NodeLabelDraggingTool;

},{}],26:[function(require,module,exports){
'use strict';

var SandbankEditor = require('./sbEditor');
// functions for the generator (aka ThinkQuery)

var GeneratorCtrl = function GeneratorCtrl($scope) {

    var map = $scope.map;
    var diagram = $scope.map.diagram;

    $scope.concept1 = '';
    $scope.concept2 = '';

    $scope.echoConcept1 = function () {
        return $scope.concept1 || '...';
    };

    $scope.echoConcept2 = function () {
        return $scope.concept2 || '...';
    };

    $scope.swapConcepts = function () {
        var tmp = $scope.concept1;
        $scope.concept1 = $scope.concept2;
        $scope.concept2 = tmp;
        $scope.safeApply();
    };

    $scope.mapIt = function (question) {
        startSpinner();
        diagram = map.diagram;
        map.autosave.saveOnModelChanged = false;

        if ($scope.sandbox) {
            diagram.clear();
        }

        // figure out location for inserted stuff
        var db = map.computeMapBounds();
        var x = db.x + db.width + 200;
        var y = db.y;
        if (isNaN(x) || isNaN(y)) {
            x = y = 0;
        }
        //console.log('x, y: ' + x + ', ' + y);

        // insert the stuff and deselect it
        question(x, y);
        diagram.clearSelection();

        diagram.updateAllTargetBindings();
        diagram.layoutDiagram(true);

        map.ui.resetZoom();

        map.autosave.saveOnModelChanged = true;
        map.autosave.save('edit_generator');
        stopSpinner();
    };

    $scope.selectedQuestion = null;

    $scope.selectQuestion = function (question) {
        $scope.selectedQuestion = question;
        if ($scope.sandbox) {
            $scope.mapIt(question);
        }
    };

    $scope.surpriseMe = function () {
        var keys = _.keys($scope.queries);
        var i = _.random(0, keys.length - 1);
        var question = $scope.queries[keys[i]];
        $scope.selectedQuestion = question;
        $scope.mapIt(question);

        $('#questions').animate({ scrollTop: i * 30 }, 1000);
    };

    // ---------- functions for creating each of the structures - see views/maps/generator_tab -----------

    $scope.queries = {

        WHAT_IS: function WHAT_IS(x, y) {
            // 1
            var thing1 = map.createThing(x, y, $scope.echoConcept1());
            diagram.model.setDataProperty(thing1.data, 'dflag', true);
            map.createChild(thing1, 'is?');
            map.createChild(thing1, 'is?');
            map.createChild(thing1, 'is?');
        },

        WHAT_IS_NOT: function WHAT_IS_NOT(x, y) {
            // 2
            var thing1 = map.createThing(x, y, $scope.echoConcept1());
            diagram.model.setDataProperty(thing1.data, 'dflag', true);
            map.createChild(thing1, 'is not?');
            map.createChild(thing1, 'is not?');
            map.createChild(thing1, 'is not?');
        },

        DISTINGUISH_BETWEEN: function DISTINGUISH_BETWEEN(x, y) {
            // 3
            var thing1 = map.createThing(x, y, $scope.echoConcept1());
            diagram.model.setDataProperty(thing1.data, 'dflag', true);
            map.createChild(thing1, 'is?');
            map.createChild(thing1, 'is?');
            map.createChild(thing1, 'is?');

            var thing2 = map.createThing(x + 250, y, $scope.echoConcept2());
            diagram.model.setDataProperty(thing2.data, 'dflag', true);
            map.createChild(thing2, 'is?');
            map.createChild(thing2, 'is?');
            map.createChild(thing2, 'is?');
        },

        COMPARE_CONTRAST: function COMPARE_CONTRAST(x, y) {
            // 4
            var thing1 = map.createThing(x - 150, y, $scope.echoConcept1());
            var thing2 = map.createThing(x + 150, y, $scope.echoConcept2());
            diagram.model.setDataProperty(thing1.data, 'dflag', true);
            diagram.model.setDataProperty(thing2.data, 'dflag', true);
            var rthing1 = map.createRLinkWithRThing(thing1, thing2, 'contrast');
            var rthing2 = map.createRLinkWithRThing(thing1, thing2, 'compare');
            diagram.model.setDataProperty(rthing1.labeledLink.data, 'type', 'toFrom');
            diagram.model.setDataProperty(rthing2.labeledLink.data, 'type', 'toFrom');
        },

        PARTS_OF: function PARTS_OF(x, y) {
            // 5
            var thing1 = map.createThing(x, y, $scope.echoConcept1());
            map.createChild(thing1, 'part?');
            map.createChild(thing1, 'part?');
            map.createChild(thing1, 'part?');
        },

        PART_OF: function PART_OF(x, y) {
            // 6
            var thing1 = map.createThing(x, y, 'part of?');
            map.createChild(thing1, $scope.echoConcept1());
        },

        PARTS_HAVE_PARTS: function PARTS_HAVE_PARTS(x, y) {
            // 7
            var thing1 = map.createThing(x, y, $scope.echoConcept1());
            var child1 = map.createChild(thing1, 'part?');
            map.createChild(child1, 'part?');
            map.createChild(child1, 'part?');
            var child2 = map.createChild(thing1, 'part?');
            map.createChild(child2, 'part?');
            map.createChild(child2, 'part?');
        },

        R_PARTS: function R_PARTS(x, y) {
            // 8
            var thing1 = map.createThing(x, y, $scope.echoConcept1());
            var thing2 = map.createThing(x + 250, y, $scope.echoConcept2());
            var rthing = map.createRLinkWithRThing(thing1, thing2, 'relationship?');
            map.createChild(rthing, 'part?');
            map.createChild(rthing, 'part?');
        },

        P_PARTS: function P_PARTS(x, y) {
            // 9
            var thing1 = map.createThing(x + 300, y, $scope.echoConcept1());
            var child1 = map.createChild(thing1, 'part seen from viewpoint of ' + $scope.echoConcept2() + '?');
            var child2 = map.createChild(thing1, 'part seen from viewpoint of ' + $scope.echoConcept2() + '?');
            var child3 = map.createChild(thing1, 'part seen from viewpoint of ' + $scope.echoConcept2() + '?');
            var thing2 = map.createThing(x, y, $scope.echoConcept2());
            map.createPLink(thing2, thing1);
            map.createPLink(thing2, child1);
            map.createPLink(thing2, child2);
            map.createPLink(thing2, child3);
        },

        RS_TO_AND_BY: function RS_TO_AND_BY(x, y) {
            // 10
            var related1 = map.createThing(x, y, 'related idea?');
            var related2 = map.createThing(x + 300, y + 50, 'related idea?');
            var related3 = map.createThing(x + 50, y + 300, 'related idea?');
            var thing = map.createThing(x + 130, y + 130, $scope.echoConcept1());
            map.createRLink(related1, thing);
            map.createRLink(related2, thing);
            map.createRLink(related3, thing);

            var thing1 = map.createThing(x + 500, y + 150, 'idea?');
            var thing2 = map.createThing(x + 750, y + 150, 'idea?');
            map.createRLinkWithRThing(thing1, thing2, $scope.echoConcept1());
        },

        WHAT_IS_R: function WHAT_IS_R(x, y) {
            // 11
            var thing1 = map.createThing(x, y, $scope.echoConcept1());
            var thing2 = map.createThing(x + 250, y, $scope.echoConcept2());
            map.createRLinkWithRThing(thing1, thing2, 'idea?');
        },

        PART_RS_ARE: function PART_RS_ARE(x, y) {
            // 12
            var thing1 = map.createThing(x + 30, y, $scope.echoConcept1(), 'freehand');
            var child1 = map.createChild(thing1, 'part?');
            var child2 = map.createChild(thing1, 'part?');
            var child3 = map.createChild(thing1, 'part?');
            diagram.model.setDataProperty(child1.data, 'loc', '-20 110');
            diagram.model.setDataProperty(child2.data, 'loc', '80 110');
            diagram.model.setDataProperty(child3.data, 'loc', '30 190');
            map.createRLinkWithRThing(child1, child2, 'relationship?');
            map.createRLinkWithRThing(child2, child3, 'relationship?');
            map.createRLinkWithRThing(child3, child1, 'relationship?');
        },

        PART_RS_EXIST: function PART_RS_EXIST(x, y) {
            // 13
            var thing1 = map.createThing(x, y, $scope.echoConcept1(), 'right');
            var child11 = map.createChild(thing1, 'part?');
            var child12 = map.createChild(thing1, 'part?');
            var child13 = map.createChild(thing1, 'part?');
            var thing2 = map.createThing(x + 250, y, $scope.echoConcept2());
            var child21 = map.createChild(thing2, 'part?');
            var child22 = map.createChild(thing2, 'part?');
            var child23 = map.createChild(thing2, 'part?');
            map.createRLink(thing1, thing2);
            map.createRLinkWithRThing(child11, child21, 'relationship?');
            map.createRLinkWithRThing(child12, child22, 'relationship?');
            map.createRLinkWithRThing(child13, child23, 'relationship?');
        },

        RS_WITH_OTHERS: function RS_WITH_OTHERS(x, y) {
            // 14
            var thing1 = map.createThing(x - 200, y, $scope.echoConcept1());
            var thing2 = map.createThing(x + 200, y, $scope.echoConcept2());
            var thing3 = map.createThing(x - 200, y + 200, 'another thing');
            var thing4 = map.createThing(x + 200, y + 200, 'another thing');
            map.createRLinkWithRThing(thing1, thing2, 'relationship?');
            map.createRLinkWithRThing(thing1, thing3, 'relationship?');
            map.createRLinkWithRThing(thing1, thing4, 'relationship?');
            map.createRLinkWithRThing(thing2, thing4, 'relationship?');
            map.createRLinkWithRThing(thing3, thing4, 'relationship?');
        },

        PARTS_OF_P: function PARTS_OF_P(x, y) {
            // 15
            var thing1 = map.createThing(x - 100, y, $scope.echoConcept1());
            var child1 = map.createChild(thing1, 'part?');
            var child2 = map.createChild(thing1, 'part?');
            var child3 = map.createChild(thing1, 'part?');
            var thing2 = map.createThing(x + 100, y, $scope.echoConcept2());
            map.createPLink(thing1, thing2);
        },

        POINT_FOR: function POINT_FOR(x, y) {
            // 16
            var thing = map.createThing(x, y, 'new perspective');
            var thing1 = map.createThing(x - 150, y + 150, $scope.echoConcept1());
            var thing2 = map.createThing(x + 150, y + 150, $scope.echoConcept2());
            var rthing = map.createRLinkWithRThing(thing1, thing2, 'relationship?');
            map.createPLink(thing, rthing);
        },

        HAS_MULTIPLE_PS: function HAS_MULTIPLE_PS(x, y) {
            // 17
            var point1 = map.createThing(x, y + 50, 'viewpoint?');
            var point2 = map.createThing(x + 250, y, 'viewpoint?');
            var point3 = map.createThing(x + 500, y + 50, 'viewpoint?');
            var view = map.createThing(x + 250, y + 250, $scope.echoConcept1());
            map.createPLink(point1, view);
            map.createPLink(point2, view);
            map.createPLink(point3, view);
        },

        PARTS_FROM_MULTIPLE_PS: function PARTS_FROM_MULTIPLE_PS(x, y) {
            // 18
            var point1 = map.createThing(x - 100, y, 'viewpoint?');
            var point2 = map.createThing(x - 100, y + 125, 'viewpoint?');
            var point3 = map.createThing(x - 100, y + 250, 'viewpoint?');
            var thing = map.createThing(x + 150, y + 25, $scope.echoConcept1());
            var child1 = map.createChild(thing, 'part seen from viewpoint?');
            var child2 = map.createChild(thing, 'part seen from viewpoint?');
            var child3 = map.createChild(thing, 'part seen from viewpoint?');
            map.createPLink(point1, child1);
            map.createPLink(point1, child2);
            map.createPLink(point2, child2);
            map.createPLink(point3, child3);
        },

        WHAT_ABOUT: function WHAT_ABOUT(x, y) {
            // 19
            $scope.queries.WHAT_IS(x, y);
            $scope.queries.PARTS_OF(x + 300, y);
            $scope.queries.PARTS_FROM_MULTIPLE_PS(x + 700, y);
            $scope.queries.RS_TO_AND_BY(x, y + 400);
        }
    }; // queries
};

GeneratorCtrl.$inject = ['$scope'];

SandbankEditor.Generator = function ($scope, map) {

    this.init = function () {
        // NB: generator is opened on load of empty map; see map.js:load()
    };

    // called when a tab is opened or closed
    this.currentTabChanged = function (newValue, oldValue) {
        if (oldValue == map.ui.TAB_ID_GENERATOR) {
            // closing tab
            map.setEditingBlocked(false);
        } else if (newValue == map.ui.TAB_ID_GENERATOR) {
            // opening tab
            map.setEditingBlocked(true);
        }
    };

    // these get filtered out in LessonBook
    this.getPlaceholderIdeaNames = function () {
        return ['is?', 'is not?', 'part?', 'viewpoint?', 'related idea?', 'idea?', 'part seen from viewpoint?', 'contrast?', 'comparison?', 'relationship?'];
    };
};

},{"./sbEditor":31}],27:[function(require,module,exports){
'use strict';

var SandbankEditor = require('./sbEditor');

// layouts used in the editor, for the diagram or individual Groups, plus layout-related functions

SandbankEditor.Layouts = function ($scope, map) {

    var self = this;

    var metaMap = require('../../MetaMap');
    var config = metaMap.config.canvas;
    var CONSTANTS = require('../constants/constants');

    this.init = function () {};

    this.handleDiagramEvent = function (eventName, e) {
        var diagram = map.diagram;
        if (eventName == 'InitialLayoutCompleted') {
            diagram.updateAllTargetBindings();
            diagram.layoutDiagram(true);
        } else if (eventName == 'SelectionMoved') {
            updateSelectedPartLocationData(e);
            map.diagram.layoutDiagram(true);
        } else if (eventName == 'SelectionDeleted') {
            diagram.updateAllTargetBindings();
        } else if (eventName == 'PartCreated') {
            //console.log('Layouts, PartCreated');
            // setNewPartLocationData(e);
        } else if (eventName == 'PartResized') {
                setResizedPartDimensionData(e);
            } else if (eventName == 'LinkDrawn') {
                adjustLinkLayout(e.subject);
            } else if (eventName == 'LinkRelinked') {
                adjustLinkLayout(e.subject);
            }
    };

    // ------------ handle location/size attributes for nodes ---------------

    // only update w/h for slides, as all other node types have fixed dimensions according to the templates
    function setResizedPartDimensionData(e) {
        var diagram = map.diagram;
        var node = e.subject;
        if (node && node.category == 'slide') {
            //console.log('PartResized: ' + node.part.actualBounds);
            diagram.model.setDataProperty(node.data, 'width', node.part.actualBounds.width);
            diagram.model.setDataProperty(node.data, 'height', node.part.actualBounds.height);
        }
    }

    // set the 'loc' attribute for a new top-level node (created by double-clicking), to support freehand layout
    this.setNewPartLocationData = function (e) {
        var node = e.subject;
        if (node && node.part) {
            if (node instanceof go.Group) {
                map.diagram.model.setDataProperty(node.data, 'loc', node.part.location.x + ' ' + node.part.location.y);
            }
        }
    };

    // updates the 'loc' attribute for each selected part, to support freehand layout (does not apply to slides)
    function updateSelectedPartLocationData(e) {
        var diagram = map.diagram;
        var it = diagram.selection.iterator;
        while (it.next()) {
            if (it.value instanceof go.Group) {
                // thing
                var part = it.value;
                var parentX = 0;
                var parentY = 0;
                if (part.containingGroup) {
                    parentX = part.containingGroup.location.x;
                    parentY = part.containingGroup.location.y;
                }
                //console.log('moving group, subject: ' + e.subject + ', part: ' + part + ', height: ' + part.part.desiredSize.height + ', location: ' + part.part.location);
                if (!isNaN(part.location.x)) {
                    diagram.model.setDataProperty(part.data, 'loc', part.location.x - parentX + ' ' + (part.location.y - parentY));
                }
            }
        }
    }

    // ----------- changing layouts of things and their descendants ----------------

    this.fromAndToNodesAreVisible = function (link) {
        return link.fromNode && link.toNode && !self.hasCollapsedAncestor(link.fromNode) && !self.hasCollapsedAncestor(link.toNode);
    };

    this.labelNodeIsVisible = function (link) {
        return link.labelNodes.count && link.labelNodes.first().visible;
    };

    this.hasCollapsedAncestor = function (group) {
        while (true) {
            if (!group.containingGroup) {
                return false;
            } else if (!group.containingGroup.isSubGraphExpanded) {
                return true;
            } else {
                group = group.containingGroup;
            }
        }
    };

    // this.hasLinkLabelAncestor = function(group) {
    //     while (true) {
    //         if (!group.containingGroup) {
    //             return false;
    //         }
    //         else if (group.containingGroup.isLinkLabel) {
    //             return true;
    //         }
    //         else {
    //             group = group.containingGroup;
    //         }
    //     }
    // };

    this.getHighestAncestorWithLayout = function (group, layoutNames) {
        while (true) {
            if (!group.containingGroup) {
                return false;
            } else if (_.contains(layoutNames, group.containingGroup.data.layout)) {
                return group.containingGroup;
            } else {
                group = group.containingGroup;
            }
        }
    };

    this.areSistersInInventoryLayout = function (group1, group2) {
        return group1.containingGroup == group2.containingGroup && group1.containingGroup && _.contains(['left', 'right'], group1.containingGroup.data.layout);
    };

    this.isNotWithinInventoryLayout = function (group) {
        return !self.isWithinInventoryLayout(group);
    };

    this.isRThingWithinInventoryLayout = function (group) {
        return group.isLinkLabel && self.isWithinInventoryLayout(group);
    };

    this.isWithinInventoryLayout = function (group) {
        return self.isWithinLayout(group, ['left', 'right']);
    };

    this.isWithinLeftInventoryLayout = function (group) {
        return self.isWithinLayout(group, ['left']);
    };

    this.isWithinRightInventoryLayout = function (group) {
        return self.isWithinLayout(group, ['right']);
    };

    this.isWithinFreehandLayout = function (group) {
        return self.isWithinLayout(group, ['freehand']);
    };

    this.isWithinStackedLayout = function (group) {
        return self.isWithinLayout(group, ['stacked']);
    };

    this.isWithinLayout = function (group, layoutNames) {
        while (true) {
            if (!group.containingGroup) {
                //console.log('isWithinLayout: ' + group + 'layouts: ' + layoutNames.join() + ': false');
                return false;
            } else if (_.contains(layoutNames, group.containingGroup.data.layout)) {
                //console.log('isWithinLayout: ' + group + 'layouts: ' + layoutNames.join() + ': true');
                return true;
            } else {
                group = group.containingGroup;
            }
        }
    };

    this.showLeftTextBlock = function (group) {
        return self.isWithinRightInventoryLayout(group) && !self.isWithinStackedLayout(group) && !group.isLinkLabel;
    };

    this.showRightTextBlock = function (group) {
        return self.isWithinLeftInventoryLayout(group) && !self.isWithinStackedLayout(group) && !group.isLinkLabel;
    };

    this.setDescendantLayouts = function (group, layoutName) {
        if (layoutName == 'left' || layoutName == 'right' || layoutName == 'stacked') {
            var it = group.memberParts.iterator;
            while (it.next()) {
                var part = it.value;
                if (part instanceof go.Group && !part.isLinkLabel) {
                    part.data.layout = layoutName;
                    self.setDescendantLayouts(part, layoutName);
                }
            }
        } else if (layoutName == 'freehand') {
            // stacked?
        }
    };

    this.disableLayoutForSelectedThings = function (layoutName) {
        var it = map.diagram.selection.iterator;
        if (!it.count) {
            return true;
        }
        while (it.next()) {
            if (!(it.value instanceof go.Group)) {
                return true;
            } else {
                var group = it.value;
                if (self.isWithinLayout(group, ['left', 'right', 'stacked'])) {
                    return true;
                }
            }
        }
        return false;
    };

    // -------------- scaling functions, etc. ----------------------

    // Computes the level of this group
    this.computeLevel = function (group) {
        //console.log('computeLevel, part: ' + part + ', containingGroup: ' + part.containingGroup);
        if (!(group instanceof go.Group) || group.containingGroup === null) {
            return 0;
        } else {
            return self.computeLevel(group.containingGroup) + 1;
        }
    };

    // gets the basic scaling for thing squares, by level
    function getThingScale(level) {
        return Math.pow(0.45, level); // 1, .45, .2025, .091125, ...
    }

    // this is only used for groups
    this.getScale = function (group, visitedGroupKeys) {
        if (group) {
            // keep track of groups we've visited to avoid infinite recursion
            // TODO: track down exactly how infinite loops are occurring,
            // or IF they still are since map.checkModel was introduced...
            if (visitedGroupKeys && Array.isArray(visitedGroupKeys)) {
                //console.log('visitedGroupKeys: ' + visitedGroupKeys);
                if (_.contains(visitedGroupKeys, group.data.key)) {
                    //console.log('hit already visited key: ' + group.data.key);
                    return 1;
                } else {
                    visitedGroupKeys.push(group.data.key);
                }
            } else {
                visitedGroupKeys = [group.data.key];
            }

            if (group.labeledLink) {
                // R-thing
                var fromScale = self.getScale(group.labeledLink.fromNode, visitedGroupKeys);
                var toScale = self.getScale(group.labeledLink.toNode, visitedGroupKeys);
                //console.log('getScale, fromScale: ' + fromScale + ', toScale: ' + toScale + ', visitedGroupKeys: ' + visitedGroupKeys.join(','));
                return Math.min(fromScale, toScale) * 0.5;
            } else if (group.containingGroup) {
                return self.getScale(group.containingGroup, visitedGroupKeys) * 0.45;
            } else {
                return getThingScale(self.computeLevel(group));
            }
        }
        return 1; // can occur when dragging R to empty space
    };

    // gets the margin to be used in stack layout between this group's children
    function getStackMargin(group) {
        return 10 / 0.45 * self.getScale(group);
    }

    // gets the margin to be used in stack layout between this group's children
    function getInventoryMargin(group) {
        if (self.computeLevel(group) <= 2) {
            return 10 * self.getScale(group);
        } else {
            return 3 * self.getScale(group);
        }
    }

    this.getExternalTextScale = function (group) {
        return 1 - 0.1 * self.computeLevel(group);
    };

    this.getLinkStrokeWidth = function (link) {
        var fromScale = self.getScale(link.fromNode);
        var toScale = self.getScale(link.toNode);
        return (link.isSelected ? config.shapes.line.borderHighlightWidth : config.shapes.line.borderWidth) * Math.min(fromScale, toScale); // 2, .9, ...
    };

    // scale arrowheads based on the smallest to/from node,
    // or just the To node for P links
    this.getArrowheadScale = function (link) {
        var fromScale = self.getScale(link.fromNode);
        var toScale = self.getScale(link.toNode);
        var minScale = Math.min(fromScale, toScale);
        //console.log("getArrowheadScale, fromScale: ", fromScale, ', toScale: ', toScale, ', minScale: ', minScale);
        if (link.data.category == CONSTANTS.DSRP.P) {
            minScale = toScale;
        }
        if (minScale >= 1) {
            return 1 * minScale;
        } else {
            return 1.5 * minScale;
        }
    };

    // -------------- creating new things ----------------------

    // Returns a location for a new sister group (thing) to the given one,
    // which will not hide any existing things (overlap is allowed).
    // The returned coordinates are absolute for a top-level group,
    // or relative to the parent otherwise - suitable for use with FreehandDiagramLayout
    // or FreehandLayout, resp.
    this.getNewSisterLocation = function (group, withR) {
        var diagram = map.diagram;
        // if we are within another group, things are in absolute coordinates
        // and sisters are placed above the thing; otherwise relative and below...
        var inGroup = group.containingGroup !== null;
        // ... except if withR is true, we go to the right instead of above or below.

        // start below if in group, else above; or to the right if withR
        var x, y, w, h;
        if (withR) {
            x = group.location.x + group.actualBounds.width * 2.2;
            y = group.location.y;
        } else {
            x = group.location.x;
            y = group.location.y + group.actualBounds.height * 1.1 * (inGroup ? 1 : -1);
        }
        w = group.actualBounds.width;
        h = group.actualBounds.height;

        // check for overlapping parts; if found, increment x,y and continue

        while (true) {
            var rect = new go.Rect(x, y, w, h);
            rect.grow(h / 10, w / 10, h / 10, w / 10);
            var parts = diagram.findObjectsIn(rect, null, self.isGroup);
            if (parts.count) {
                //console.log('getNewSisterLocation: overlapping part found in ' + rect);
                if (withR) {
                    x += w / 10;
                    y += h / 10;
                } else {
                    x += w / 10;
                    y += h / 10 * (inGroup ? 1 : -1); // move down if in group, else up
                }
            } else {
                    //console.log('getNewSisterLocation: no overlapping part found in ' + rect);
                    break;
                }
        }
        if (inGroup) {
            // make coordinates relative
            x -= group.containingGroup.location.x;
            y -= group.containingGroup.location.y;
        }
        return new go.Point(x + Math.random(), y + Math.random());
    };

    // Returns a location for a new child group (thing) to the given one,
    // which will not hide any existing children (overlap is allowed).
    // The returned coordinates are relative to the parent group - suitable for use with FreehandLayout.
    this.getNewChildLocation = function (group) {
        var groupBounds = group.actualBounds;
        // NB: all x/y locations are relative to the group location
        var x = 0;
        var y = groupBounds.height * 1.1;
        var w, h;
        var members = group.memberParts;
        // keep testing new rectangles until we find one that doesn't overlap with any existing member of the group
        while (true) {
            members.reset();
            var overlaps = false;
            var member, newRect, memberRect;
            while (members.next()) {
                member = members.value;
                var memberBounds = member.actualBounds;
                w = memberBounds.width;
                h = memberBounds.height;
                // find the existing member's actual bounds (absolute coords)
                memberRect = new go.Rect(memberBounds.x - groupBounds.x, memberBounds.y - groupBounds.y, memberBounds.width, memberBounds.height);
                newRect = new go.Rect(x, y, w, h);
                newRect.grow(h / 5, w / 5, h / 5, w / 5);
                overlaps = newRect.containsRect(memberRect);
                //console.log('getNewChildLocation for ' + member + ': newRect = ' + newRect + ', memberRect = ' + memberRect + ', overlaps: ' + overlaps);
                if (overlaps) {
                    break;
                }
            }
            if (overlaps) {
                // increment x, y and try again
                x += w / 5;
                y += h / 5;
            } else {
                // found a good spot!
                break;
            }
        }
        return new go.Point(x, y);
    };

    // a simpler version of getNewChildLocation that places the child outside the bounds of the existing children
    this.getNewChildLocation2 = function (group) {
        var groupBounds = group.actualBounds;
        var childBounds = map.safeRect(map.diagram.computePartsBounds(group.memberParts));
        var x = 0;
        var y = 0;
        if (!group.memberParts.count) {
            y = groupBounds.height * 1.2;
        } else {
            y = groupBounds.height * 1.4 + childBounds.height;
        }
        //console.log('getNewChildLocation2, childBounds: ' + childBounds + ', groupBounds: ' + groupBounds + ', x: ' + x + ', y: ' + y);
        return new go.Point(x, y);
    };

    // move all the given new member groups so that their locations are relative to that of
    // the parent and its previously existing members, and scaled down appropriately
    this.layoutNewMembersRelativeTo = function (newMembers, parent, oldMemberBounds) {
        // how big was the parent system before the new groups were added?
        var systemBounds = parent.actualBounds.unionRect(oldMemberBounds);

        // figure out old/new origins - place new origin below existing system
        var oldBounds = map.diagram.computePartsBounds(newMembers);
        var oldOrigin = new go.Point(oldBounds.x, oldBounds.y);
        var newOrigin = new go.Point(0, systemBounds.height * 1.2);
        //console.log('layoutNewMembersRelativeTo, systemBounds: ' + systemBounds + ', oldBounds: ' + oldBounds +  ', oldOrigin: ' + oldOrigin + ', newOrigin: ' + newOrigin);

        // figure out new scaled locations
        // NB: we can assume newMembers are all one level down from parent (see map.addSelectedThingsAsChildrenOf),
        // so we just multiply by the standard scale factor
        var it = newMembers.iterator;
        while (it.next()) {
            var group = it.value;
            var groupBounds = group.actualBounds;
            var newX = newOrigin.x + (groupBounds.x - oldOrigin.x) * 0.45;
            var newY = newOrigin.y + (groupBounds.y - oldOrigin.y) * 0.45;
            var newLoc = go.Point.stringify(new go.Point(newX, newY));
            //console.log('layoutNewMembersRelativeTo, groupBounds: ' + groupBounds + ', newLoc: ' + newLoc);
            map.diagram.model.setDataProperty(group.data, 'loc', newLoc);
        }
    };

    // move all the given old member groups so that their locations are absolute and above
    // the parent, and scaled up appropriately
    this.layoutOldMembersOutsideOf = function (oldMembers, parent, oldMembersBounds, oldMembersLevel) {
        // figure out scale factor (members can be dragged up multiple levels, unlike dragging into S)
        var scaleFactor = Math.pow(0.45, oldMembersLevel - self.computeLevel(parent));
        //console.log('layoutOldMembersOutsideOf, scaleFactor: ' + scaleFactor);

        // figure out old/new origins - place new origin above parent, with vertical space for scaled-up oldMembers
        var parentBounds = parent.actualBounds;
        var oldOrigin = new go.Point(oldMembersBounds.x, oldMembersBounds.y);
        var newOrigin = new go.Point(parentBounds.x, parentBounds.y - oldMembersBounds.height * 1.2 / scaleFactor);

        // figure out new scaled locations
        var it = oldMembers.iterator;
        while (it.next()) {
            var group = it.value;
            var groupBounds = group.actualBounds;
            var newX = newOrigin.x + (groupBounds.x - oldOrigin.x) / scaleFactor;
            var newY = newOrigin.y + (groupBounds.y - oldOrigin.y) / scaleFactor;
            var newLoc = go.Point.stringify(new go.Point(newX, newY));
            //console.log('layoutOldMembersOutsideOf, parentBounds: ' + parentBounds + ', oldMembersBounds: ' + oldMembersBounds + ', newOrigin: ' + newOrigin + ', groupBounds: ' + groupBounds + ', newLoc: ' + newLoc);
            map.diagram.model.setDataProperty(group.data, 'loc', go.Point.stringify(newLoc));
        }
    };

    // ----------------- accessors -------------------

    // returns the appropriate layout class by abbreviated name
    this.getLayout = function (layoutName) {
        if (layoutName == 'freehand') return new FreehandLayout();else if (layoutName == 'right') return new RightInventoryLayout();else if (layoutName == 'stacked') return new StackedLayout();else return new LeftInventoryLayout();
    };

    this.getFreehandDiagramLayout = function () {
        return new FreehandDiagramLayout();
    };

    // --------------------------------------------------------------

    // returns true if the to and from nodes for the link have a common ancestor group with one of the given layout names.
    // TODO: verify logic - what if there are multiple such ancestors? - this should return the highest one...
    function getCommonAncestorWithLayout(group1, group2, layoutNames) {
        var ancestors1 = self.getAncestorGroups(group1);
        var ancestors2 = self.getAncestorGroups(group2);
        var commonAncestors = _.intersection(ancestors1, ancestors2);
        var layoutAncestors = _.filter(commonAncestors, function (group) {
            return _.indexOf(layoutNames, group.data.layout) != -1;
        });
        if (layoutAncestors.length) {
            return layoutAncestors[0];
        } else {
            return null;
        }
    }

    // returns the ancestors of this group, including itself
    this.getAncestorGroups = function (group) {
        var ancestors = [group];
        var g = group;
        while (g.containingGroup) {
            ancestors.push(g.containingGroup);
            g = g.containingGroup;
        }
        return ancestors;
    };

    // --------------------------------------------------------------

    function FreehandDiagramLayout() {
        go.Layout.call(this);
    }

    go.Diagram.inherit(FreehandDiagramLayout, go.Layout);

    FreehandDiagramLayout.prototype.toString = function () {
        return "FreehandDiagramLayout";
    };

    FreehandDiagramLayout.prototype.doLayout = function (coll) {
        //console.log('FreehandDiagramLayout.doLayout');
        var diagram = map.diagram;
        // diagram.startTransaction("Freehand Diagram Layout");

        //validateGroupLocations(diagram.findTopLevelGroups());
        var groups = diagram.findTopLevelGroups(); // get new iterator
        while (groups.next()) {
            var group = groups.value;
            if (!group.isLinkLabel) {
                var loc = go.Point.parse(group.data.loc);
                group.move(new go.Point(loc.x, loc.y));
                //console.log('FreehandDiagramLayout, group: ' + group + ' to location: ' + loc.x + ',' + loc.y);
            }
        }

        // all adjustment of links is done from here, not from the other layouts...
        getLinksByNodes(true);
        var links = diagram.links.iterator;
        while (links.next()) {
            var link = links.value;
            // if (isNaN(link.location.x)) {
            //     //console.log('link location isNaN');
            //     link.move(new go.Point(0,0));
            // }
            // //console.log('link location: ' + link.location);
            adjustLinkLayout(link);
        }

        // diagram.commitTransaction("Freehand Diagram Layout");
    };

    // if any group in the given Iterator does not have a location (data.loc), set one
    // that doesn't overlap with the other members
    function validateGroupLocations(groups) {}

    // --------------------------------------------------------------

    function FreehandLayout() {
        go.Layout.call(this);
    }

    go.Diagram.inherit(FreehandLayout, go.Layout);

    FreehandLayout.prototype.toString = function () {
        return "FreehandLayout";
    };

    FreehandLayout.prototype.doLayout = function (coll) {
        var diagram = map.diagram;
        diagram.startTransaction("Freehand Layout");

        var x = this.group.location.x;
        var y = this.group.location.y;

        var it = this.group.memberParts.iterator;
        while (it.next()) {
            var part = it.value;
            if (part instanceof go.Group && !part.isLinkLabel) {
                var loc = go.Point.parse(part.data.loc);
                //console.log('FreehandLayout, part: ' + part.data.text + ', loc: ' + loc + ', location: ' + part.location);
                part.move(new go.Point(x + loc.x, y + loc.y));
                part.layout.doLayout(part);
            }
        }

        diagram.commitTransaction("Freehand Layout");
    };

    // --------------------------------------------------------------

    function StackedLayout() {
        go.Layout.call(this);
    }

    go.Diagram.inherit(StackedLayout, go.Layout);

    StackedLayout.prototype.toString = function () {
        return "StackedLayout";
    };

    StackedLayout.prototype.doLayout = function (coll) {
        this.diagram.startTransaction("Stacked Layout");
        var margin = getStackMargin(this.group);
        var startX = this.group.location.x;
        var startY = this.group.location.y + (this.group.part.actualBounds.height + margin / 2);
        layoutMembersForStacked(this.group, startX, startY);
        this.diagram.commitTransaction("Stacked Layout");
    };

    // returns the max y value after laying out the last part
    function layoutMembersForStacked(group, startX, startY) {
        var members = getOrderedMembers(group);
        var x = startX;
        var y = startY;
        var rowCount = 0;
        var maxStartY = startY;
        _.each(members, function (part) {
            if (part instanceof go.Group && !part.isLinkLabel) {
                var margin = getStackMargin(part);
                part.move(new go.Point(x, y));
                startY = y + part.actualBounds.height + margin / 2; // start Y position for part's children

                //console.log('layoutMembersForStacked: starting layout of children of ' + part + ' at ' + Math.round(x) + ',' + Math.round(startY));

                if (part.isSubGraphExpanded) {
                    // layout children of this part; check if we've already done a taller part+children in current row
                    maxStartY = Math.max(maxStartY, layoutMembersForStacked(part, x, startY));
                    //console.log('layoutMembersForStacked: laid out children of ' + part + ', maxStartY is now ' + Math.round(maxStartY));
                } else {
                        maxStartY = Math.max(maxStartY, startY);
                    }

                // decide whether to wrap
                rowCount++;
                if (rowCount < 2) {
                    // keep going on this line
                    x += part.actualBounds.width + margin;
                } else {
                    // wrap to next line
                    x = startX;
                    y = maxStartY + margin / 2;
                    rowCount = 0;
                }
            }
        });
        return maxStartY;
    }

    // --------------------------------------------------------------

    function RightInventoryLayout() {
        go.Layout.call(this);
    }

    go.Diagram.inherit(RightInventoryLayout, go.Layout);

    RightInventoryLayout.prototype.toString = function () {
        return "RightInventoryLayout";
    };

    RightInventoryLayout.prototype.doLayout = function (coll) {
        //this.diagram.startTransaction("Inventory Layout");
        var startX = this.group.location.x + this.group.actualBounds.width;
        var startY = this.group.location.y + (this.group.part.actualBounds.height + getInventoryMargin(this.group));
        layoutMembersForInventory(this.group, startX, startY, CONSTANTS.DSRP.R);
        //this.diagram.commitTransaction("Inventory Layout");
    };

    // --------------------------------------------------------------

    function LeftInventoryLayout() {
        go.Layout.call(this);
    }

    go.Diagram.inherit(LeftInventoryLayout, go.Layout);

    LeftInventoryLayout.prototype.toString = function () {
        return "LeftInventoryLayout";
    };

    LeftInventoryLayout.prototype.doLayout = function (coll) {
        //console.log('LeftInventoryLayout.doLayout, group: ' + this.group + ', location: ' + this.group.location);
        // this.diagram.startTransaction("Inventory Layout");
        var startX = this.group.location.x;
        var startY = this.group.location.y + (this.group.part.actualBounds.height + getInventoryMargin(this.group));
        layoutMembersForInventory(this.group, startX, startY, 'L');
        // this.diagram.commitTransaction("Inventory Layout");
    };

    // shared stuff for Left/Right Inventory layouts...

    // returns the max y value after laying out the last part
    // side is 'L' or CONSTANTS.DSRP.R
    function layoutMembersForInventory(group, startX, startY, side) {
        var members = getOrderedMembers(group);
        _.each(members, function (part) {
            var x = startX; // for left, just use x
            if (side == CONSTANTS.DSRP.R) x = startX - part.actualBounds.width; // for right, right-align parts to startX
            //console.log('layoutMembersForInventory, part: ' + part + ' to location: ' + x + ',' + startY);
            part.move(new go.Point(x, startY));
            startY += part.actualBounds.height + getInventoryMargin(part);
            if (part.isSubGraphExpanded) {
                //console.log('layoutMembersForInventory, y after moving: ' + part + ' = ' + startY);
                startY = layoutMembersForInventory(part, startX, startY, side);
            }
        });
        return startY + getInventoryMargin(group);
    }

    // returns an array of the group's (non-R-thing) members, sorted by the 'order' data property
    function getOrderedMembers(group) {
        var members = new go.List();
        var it = group.memberParts.iterator;
        while (it.next()) {
            var part = it.value;
            if (part instanceof go.Group && !part.isLinkLabel) {
                members.add(part);
            }
        }
        return _.sortBy(members.toArray(), function (member) {
            return member.data.order;
        });
    }

    // ------------------------ link routing and visibility ------------------------------

    // adjust the routing, visibility and other properties of a link according to various structural criteria
    function adjustLinkLayout(link) {
        if (!link || !link.fromNode || !link.toNode) {
            return;
        }

        // var loc = link.location;
        // if (isNaN(loc.x) || isNaN(loc.y)) {
        //     link.location = new go.Point(10, 10);
        //     //console.log('adjustLinkLayout, link.location: ' + link.location);
        // }
        // //console.log('adjustLinkLayout, link.location: ' + link.location);

        // see if link is within a stacked or inventory layout, or if it's a hidden P link
        var inventoryAncestor = getCommonAncestorWithLayout(link.fromNode, link.toNode, ['left', 'right']);
        var stackedAncestor = getCommonAncestorWithLayout(link.fromNode, link.toNode, ['stacked']);
        var hidePLink = link.data && link.data.category == CONSTANTS.DSRP.P && !map.templates.showPLink(link);
        //var crowdedRThing = hasCrowdedRThing(link);

        // see if this is one of multiple links between the same two nodes
        var snpos = self.getSameNodesLinkPosition(link);
        var isMultiLink = snpos.count > 1;
        //console.log('snpos for link ' + link + ': ' + snpos.index + ' of ' + snpos.count);

        if (inventoryAncestor) {
            applyInventoryCurveRouting(link, snpos, inventoryAncestor.data.layout);
        } else if (isMultiLink) {
            applyMultilinkCurveRouting(link, snpos);
        } else {
            applyStraightRouting(link);
        }

        // show link only if both connected things are visible (no collapsed ancestors);
        // hide if both are in stacked layout or if it's a P-link that we shouldn't be showing now
        if (self.fromAndToNodesAreVisible(link) && !stackedAncestor && !hidePLink) {
            link.opacity = 1;
            showLabelNodes(link, true);
        } else {
            link.opacity = 0;
            showLabelNodes(link, false);
        }
    }

    // TODO: detect when the R-thing overlaps both from and to nodes, so we can change the link routing
    function hasCrowdedRThing(link) {
        return false;
    }

    function showLabelNodes(link, show) {
        //console.log('showLabelNodes, link: ' + link + ', show: ' + show);
        var it = link.labelNodes;
        if (it) {
            while (it.next()) {
                var group = it.value;
                group.visible = show;
                if (show) {
                    group.layout.doLayout(group);
                }
            }
        }
    }

    // if link is between two things in the same inventory layout (single or multiple),
    // make the line more or less circular on the appropriate side
    function applyInventoryCurveRouting(link, snpos, ancestorLayout) {
        if (ancestorLayout == 'left') {
            link.fromSpot = go.Spot.Left;
            link.toSpot = go.Spot.Left;
        } else if (ancestorLayout == 'right') {
            link.fromSpot = go.Spot.Right;
            link.toSpot = go.Spot.Right;
        }

        // aspect ratio for the link curves - make this smaller to make them taller, larger to make them fatter
        var curveRatio = 0.6;

        var y1 = link.fromNode.actualBounds.y;
        var y2 = link.toNode.actualBounds.y;

        var yDiff = Math.abs(y2 - y1);
        var c = (yDiff === 0 ? 50 : Math.floor(yDiff * curveRatio)) + 100 * (snpos.index / snpos.count);
        //console.log("yDiff = " + yDiff + ', c = ' + c + ' (' + link.fromNode.data.text + ' - ' + p1 + ' - to ' + link.toNode.data.text + ' - ' + p2 + ')');

        link.curve = go.Link.Bezier;
        link.fromEndSegmentLength = c;
        link.toEndSegmentLength = c;
    }

    // if non-inventory link is one of multiple ones between same nodes, make it curved
    function applyMultilinkCurveRouting(link, snpos) {
        link.fromSpot = go.Spot.Default;
        link.toSpot = go.Spot.Default;
        link.curve = go.Link.Bezier;
        // curviness values based on number of links:
        // 2: -25 25
        // 3: -50 0 50
        // 4: -100 -50 0 50 100
        var rangeSize = 10 * (snpos.count - 1);
        var rangeIncrement = 10;
        if (snpos.hasRThing) {
            rangeSize = 100 * (snpos.count - 1);
            rangeIncrement = 100;
        }

        // adjust curviness for smaller scales
        var linkScaleFactor = self.getLinkStrokeWidth(link) / 2; // 2 is max stroke width
        rangeSize *= linkScaleFactor;
        rangeIncrement *= linkScaleFactor;

        var rangeStart = 0 - rangeSize / 2;

        link.curviness = (rangeStart + rangeIncrement * snpos.index) * snpos.orientation;
        // //console.log('applyMultilinkCurveRouting, link: ' + link + ', curviness: ' + link.curviness);
    }

    // do normal straight lines for freehand layout, or links between descendants of things with different layouts
    function applyStraightRouting(link) {
        link.fromSpot = go.Spot.Default;
        link.toSpot = go.Spot.Default;
        link.routing = go.Link.Normal;
        link.curve = go.Link.Bezier;
        link.curviness = 25;
    }

    // --------------- calculate how many links there are between a link's nodes ---------------

    // Returns an object of the format { index: 1, count: 2, orientation: -1, hasRThing: false },
    // indicating how many other links there are between the same pair of nodes,
    // where the given link falls within this list, and what its orientation is.
    this.getSameNodesLinkPosition = function (link) {
        var linksByNodes = getLinksByNodes(true);
        // get links with the same key as this one (connecting same nodes)
        var sameLinks = _.where(linksByNodes, {
            key: getSameNodesLinkKey(link)
        });

        // default return value
        var snpos = {
            index: 0,
            count: 1,
            orientation: 1,
            hasRThing: false
        };
        // set index, count, orientation
        for (var i = 0; i < sameLinks.length; i++) {
            if (sameLinks[i].link == link) {
                snpos = {
                    index: i,
                    count: sameLinks.length,
                    orientation: getLinkOrientation(link)
                };
            }
        }
        // check for Rthing
        for (i = 0; i < sameLinks.length; i++) {
            if (sameLinks[i].hasRThing) {
                snpos.hasRThing = true;
            }
        }
        return snpos;
    };

    var _linksByNodes = null;

    // refreshes the cached list of all links with keys, to facilitate grouping them according to connected nodes
    function getLinksByNodes(refresh) {
        //console.log('getLinksByNodes');
        if (!self._linksByNodes || refresh) {
            self._linksByNodes = [];
            var diagram = map.diagram;
            var links = diagram.links.iterator;
            while (links.next()) {
                var link = links.value;
                var key = getSameNodesLinkKey(link);
                if (key) {
                    self._linksByNodes.push({
                        key: key,
                        link: link,
                        hasRThing: link.labelNodes.count > 0
                    });
                }
            }
        }
        return self._linksByNodes;
    }

    // Returns a key used to group links according to which pair of nodes they connect.
    // The returned key is non-empty for regular links and P links that should be shown currently,
    // so that these will all be routed by the same rules. A null key is returned for any other
    // links, indicating that no grouping is required.
    function getSameNodesLinkKey(link) {
        //        if (self.isRLink(link) || (self.isPLink(link) && map.templates.showPLink(link))) {
        if (self.isRLink(link)) {
            var key = [link.fromNode.toString(), link.toNode.toString()].sort().join('|');
            //console.log('key: ' + key);
            return key;
        } else {
            return null;
        }
    }

    // We use this to distinguish an A-B link from a B-A link (based on fromNode and toNode, which
    // is independent of the arrowhead settings) when setting curviness, because setting curviness = 25
    // on an A-B link is the same as curviness = -25 on a B-A link.
    function getLinkOrientation(link) {
        if (link.fromNode && link.toNode && link.fromNode.toString() < link.toNode.toString()) {
            return 1;
        } else {
            return -1;
        }
    }

    // -------------- link tests ---------------

    this.isRLink = function (link) {
        return link instanceof go.Link && link.data && link.data.category === undefined && link.fromNode && link.toNode;
    };

    this.isDLink = function (link) {
        return link instanceof go.Link && link.data && link.data.category == CONSTANTS.DSRP.D;
    };

    this.isPLink = function (link) {
        return link instanceof go.Link && link.data && link.data.category == CONSTANTS.DSRP.P;
    };

    this.isGroup = function (obj) {
        return obj instanceof go.Group;
    };
};

},{"../../MetaMap":1,"../constants/constants":40,"./sbEditor":31}],28:[function(require,module,exports){
'use strict';

var NodeLabelDraggingTool = require('./extensions/NodeLabelDraggingTool.js');
var SandbankEditor = require('./sbEditor');

// functions for creating and manipulating the map (i.e. Diagram)

SandbankEditor.Map = function ($scope, $http, $resource, $timeout, $modal, $log) {

    var self = this;

    // ----------- constants ---------------
    this.LEFT = 'left';
    this.RIGHT = 'right';

    // ------------ component accessors ----------------

    function getComponents() {
        return [self.analytics, self.attachments, self.autosave, self.generator,
        // _history,
        self.layouts, self.perspectives, self.presenter, self.standards, self.templates, self.tests, self.ui];
    }

    this.diagram = null;
    this.analytics = null;
    this.attachments = null;
    this.autosave = null;
    this.generator = null;
    this.layouts = null;
    this.perspectives = null;
    this.presenter = null;
    this.standards = null;
    this.templates = null;
    this.tests = null;
    this.ui = null;

    // -------------- map init ------------------

    this.init = function () {

        // initialize components
        self.analytics = new SandbankEditor.Analytics($scope, $http, self);
        self.attachments = new SandbankEditor.Attachments($scope, $http, $resource, self);
        self.autosave = new SandbankEditor.Autosave($scope, $http, self);
        self.generator = new SandbankEditor.Generator($scope, self);
        // _history = new SandbankEditor.History($scope, $http, self);
        self.layouts = new SandbankEditor.Layouts($scope, self);
        self.perspectives = new SandbankEditor.Perspectives($scope, self);
        self.presenter = new SandbankEditor.Presenter($scope, self);
        self.standards = new SandbankEditor.Standards($scope, self);
        self.templates = new SandbankEditor.Templates($scope, self);
        self.tests = new SandbankEditor.Tests($scope, self);
        self.ui = new SandbankEditor.UI($scope, $timeout, $http, $resource, $modal, $log, self);

        // call init for each component, if defined
        _.each(getComponents(), function (component) {
            if (component && component.init) component.init();
        });

        // create diagram
        self.diagram = new go.Diagram("diagram");
        self.diagram.initialContentAlignment = go.Spot.Center;
        self.diagram.initialViewportSpot = go.Spot.Center;
        self.diagram.initialDocumentSpot = go.Spot.Center;
        self.diagram.hasHorizontalScrollbar = false;
        self.diagram.hasVerticalScrollbar = false;
        self.diagram.padding = 500;
        self.diagram.layout = self.layouts.getFreehandDiagramLayout();
        self.diagram.toolManager.mouseMoveTools.insertAt(0, new NodeLabelDraggingTool());

        initTools();
        self.templates.initTemplates(self.diagram); // set up templates, customize temporary link behavior
        addDiagramListeners();

        self.templates.addExportFooter();

        // watch for tab changes
        $scope.$watch('currentTab', function (newValue, oldValue) {
            self.currentTabChanged(newValue, oldValue);
        });
    };

    // this is called by a $scope.$watch in init()
    this.currentTabChanged = function (newValue, oldValue) {
        // //console.log('currentTabChanged, newValue: ' + newValue + ', oldValue: ' + oldValue);
        // notify any interested components
        _.each(getComponents(), function (component) {
            if (component && component.currentTabChanged) {
                component.currentTabChanged(newValue, oldValue);
            }
        });

        //$scope.safeApply();
    };

    // misc. tool configuration
    function initTools() {
        // disable clicking on TextBlocks to edit - we will invoke editing in other ways
        self.diagram.allowTextEdit = false;

        // select text when activating editor;
        // use shift-enter to create new lines, enter to finish editing (NB: editor has multiline=true)
        var textTool = self.diagram.toolManager.textEditingTool;
        textTool.doActivate = function () {
            go.TextEditingTool.prototype.doActivate.call(textTool);
            if (textTool.defaultTextEditor !== null) {
                textTool.defaultTextEditor.select();

                textTool.defaultTextEditor.addEventListener("keydown", function (e) {
                    if (e.which == 13 && !e.shiftKey) {
                        go.TextEditingTool.prototype.acceptText.call(textTool, go.TextEditingTool.LostFocus);
                    }
                });
            }
        };

        // handle delete key on Mac (default behavior only uses fn-Delete to delete from canvas)
        self.diagram.commandHandler.doKeyDown = function () {
            var e = self.diagram.lastInput;
            var cmd = self.diagram.commandHandler;
            if (e.event.which === 8) {
                cmd.deleteSelection();
            } else {
                go.CommandHandler.prototype.doKeyDown.call(cmd); // call base method with no arguments
            }
        };

        // [disable keyboard shortcuts, as these do not do centering on zoom,
        // and can lead to confusion with browser zoom (which gets fired depends on focus)]
        // - turned back on to support pinch/zoom on iPad
        self.diagram.allowZoom = true;

        self.diagram.toolManager.mouseWheelBehavior = go.ToolManager.WheelZoom;

        // decide what kinds of Parts can be added to a Group or to top-level
        // self.diagram.commandHandler.memberValidation = function (grp, node) {
        //     //if (grp instanceof go.Group && node instanceof go.Group) return false;  // cannot add Groups to Groups
        //     return true;
        // };

        // default link attributes
        self.diagram.toolManager.linkingTool.archetypeLinkData = {
            type: 'noArrows'
        };

        // allow double-click in background to create a new node
        self.diagram.toolManager.clickCreatingTool.archetypeNodeData = getNewThingData();

        // how long mouse must be held stationary before starting a drag-select (instead of a scroll) - default was 175ms
        self.diagram.toolManager.dragSelectingTool.delay = 400;
    }

    // ----------- handling of DiagramEvents --------------------

    function addDiagramListeners() {

        // DiagramEvents to be handled here or by a component
        var diagramEvents = ["InitialLayoutCompleted", "ChangedSelection", "BackgroundSingleClicked", "SelectionCopied", "SelectionMoved", "SelectionDeleting", "SelectionDeleted", "PartCreated", "PartResized", "ClipboardChanged", "ClipboardPasted", "LinkDrawn", "LinkRelinked", "ViewportBoundsChanged"];
        _.each(diagramEvents, function (eventName) {
            self.diagram.addDiagramListener(eventName, function (e) {
                broadcastDiagramEvent(eventName, e);
            });
        });

        self.diagram.addDiagramListener("BackgroundContextClicked", function (e) {
            // TODO: turn off in production
            //console.log('diagram model:' + self.diagram.model.toJson());
        });
    }

    // broadcasts the given DiagramEvent (see apidocs for go.DiagramEvent)
    // to any components that may be interested, including this one.
    function broadcastDiagramEvent(eventName, e) {
        self.handleDiagramEvent(eventName, e);
        _.each(getComponents(), function (component) {
            if (component && component.handleDiagramEvent) component.handleDiagramEvent(eventName, e);
        });
        $scope.safeApply();
    }

    this.handleDiagramEvent = function (eventName, e) {
        //console.log('handleDiagramEvent: ' + eventName);
        if (eventName == 'ChangedSelection') {
            changedSelection(e);
        } else if (eventName == 'SelectionCopied') {
            selectionCopied(e);
        } else if (eventName == 'PartCreated') {
            partCreated(e);
        } else if (eventName == 'BackgroundSingleClicked') {
            self.ui.showHelpTip('canvasTip');
        } else if (eventName == 'LinkDrawn') {
            linkDrawn(e);
            setNewLinkDirection(e);
        } else if (eventName == 'LinkRelinked') {
            linkRelinked(e);
        } else if (eventName == 'ClipboardChanged') {
            clipboardChanged(e);
        } else if (eventName == 'ClipboardPasted') {
            clipboardPasted(e);
        }
    };

    // handle zoom to region if applicable
    function changedSelection(e) {
        //console.log('map.changedSelection');
        self.diagram.updateAllTargetBindings();
        self.ui.maybeZoomToRegion();
        if (self.relationshipsSelected()) {
            self.ui.showHelpTip('relationshipTip');
        }
    }

    function partCreated(e) {
        //console.log('Map, PartCreated');
        var group = e.subject;
        if (!(group instanceof go.Group)) {
            return;
        }
        self.diagram.model.setDataProperty(group.data, 'layout', self.ui.getMapEditorOptions().defaultThingLayout || 'left');
        self.layouts.setNewPartLocationData(e);
    }

    // fix link ports when a link is created -
    // the P and R ports both cover the whole node, and the P port is on top of the R port,
    // so both P and R links get the toPort set to P by default.
    function linkDrawn(e) {
        var link = e.subject;
        //console.log('linkDrawn, link: ' + link + ', fromPort: ' + link.fromPortId + ', toPort: ' + link.toPortId);
        if (link.fromPortId == 'P') {
            self.diagram.model.startTransaction("change link category");
            self.diagram.model.setDataProperty(link.data, 'toPort', 'P');
            self.diagram.model.setDataProperty(link.data, 'category', 'P');
            self.diagram.model.commitTransaction("change link category");
        }
        // prevent links from R to P
        else if (link.fromPortId == 'R') {
                self.diagram.model.startTransaction("change link toPort");
                self.diagram.model.setDataProperty(link.data, 'toPort', 'R');
                self.diagram.model.commitTransaction("change link toPort");
            }
    }

    // fix link ports when a link is relinked -
    // dragging either end of an R-link to another node will set the corresponding port to P,
    // since P port is on top of R port, so we reset both ports to R if the category is not P.
    function linkRelinked(e) {
        var link = e.subject;
        if (link.data.category === undefined || link.data.category !== 'P') {
            self.diagram.model.setDataProperty(link.data, 'fromPort', 'R');
            self.diagram.model.setDataProperty(link.data, 'toPort', 'R');
        }
    }

    function setNewLinkDirection(e) {
        var link = e.subject;
        if (link.fromPortId == 'R') {
            self.diagram.model.startTransaction("change link direction");
            self.diagram.model.setDataProperty(link.data, 'type', self.ui.getMapEditorOptions().defaultRelationshipDirection);
            self.diagram.commitTransaction("change link direction");
        }
    }

    function clipboardChanged(e) {
        var parts = e.subject.iterator;
        while (parts.next()) {
            var part = parts.value;
            if (part instanceof go.Group) {
                //console.log('clipboardChanged: part ' + part + ', mainpanel scale: ' + part.findObject('mainpanel').scale);
            }
        }
    }

    // NB: this is called when parts are copied by control-drag, NOT when the copy button is clicked
    function selectionCopied(e) {
        //console.log('selectionCopied');
        var parts = e.subject.iterator;
        while (parts.next()) {
            var part = parts.value;
            if (part instanceof go.Group && part.isTopLevel) {
                var loc = go.Point.parse(part.data.loc);
                //console.log('selectionCopied: updating loc of part ' + part + ' = ' + loc + ', scale: ' + part.scale);
                self.diagram.model.setDataProperty(part.data, 'loc', loc.x + 50 + ' ' + (loc.y + 50));
                part.updateTargetBindings('loc');
            }
        }
    }

    function clipboardPasted(e) {
        var parts = e.subject.iterator;
        while (parts.next()) {
            var part = parts.value;
            if (part instanceof go.Group && part.isTopLevel) {
                var loc = go.Point.parse(part.data.loc);
                //console.log('clipboardPasted: updating loc of part ' + part + ' = ' + loc + ', scale: ' + part.scale);
                self.diagram.model.setDataProperty(part.data, 'loc', loc.x + 50 + ' ' + (loc.y + 50));
                part.updateTargetBindings('loc');
            }
        }
    }

    // computes the bounds of all groups in the diagram - this includes all ideas/things,
    // and excludes nodes, including slides, the slide blocker, and the export footer
    this.computeMapBounds = function () {
        var groups = new go.List(go.Group);
        var nodes = self.diagram.nodes;
        while (nodes.next()) {
            if (nodes.value instanceof go.Group) {
                groups.add(nodes.value);
            }
        }
        return self.diagram.computePartsBounds(groups).copy(); // return a mutable rect
    };

    // ------------ what is currently selected? ----------------

    // returns true if all selected items are things (i.e. Groups), including r-things
    this.thingsSelected = function () {
        if (self.diagram == null || self.diagram.selection.count < 1) return false;

        var it = self.diagram.selection.iterator;
        while (it.next()) {
            if (!(it.value instanceof go.Group)) return false;
        }

        return true;
    };

    // returns true if exactly one thing (Group) is selected
    this.thingSelected = function () {
        return self.diagram !== null && self.diagram.selection.count == 1 && self.diagram.selection.first() instanceof go.Group;
    };

    // if a single group is selected, returns it, otherwise returns null
    this.getUniqueThingSelected = function () {
        if (self.diagram !== null && self.diagram.selection.count == 1 && self.diagram.selection.first() instanceof go.Group) {
            return self.diagram.selection.first();
        } else {
            return null;
        }
    };

    this.thingsSelectedAreMembersOf = function (group) {
        if (self.diagram === null || self.diagram.selection.count < 1) return false;

        var it = self.diagram.selection.iterator;
        while (it.next()) {
            if (!(it.value instanceof go.Group) || it.value.containingGroup != group) return false;
        }

        return true;
    };

    this.thingsSelectedAreDescendantsOf = function (group) {
        if (self.diagram === null || self.diagram.selection.count < 1) return false;

        var it = self.diagram.selection.iterator;
        while (it.next()) {
            var ancestors = self.layouts.getAncestorGroups(it.value);
            if (_.indexOf(ancestors, group) == -1) return false;
        }

        return true;
    };

    this.thingsSelectedIncludeSlide = function () {
        if (self.diagram === null || self.diagram.selection.count < 1) return false;

        var it = self.diagram.selection.iterator;
        while (it.next()) {
            if (it.value.data && it.value.data.category == 'slide') {
                return true;
            }
        }

        return false;
    };

    // returns true if all selected items are relationships (i.e. Links)
    this.relationshipsSelected = function () {
        if (self.diagram === null || self.diagram.selection.count < 1) return false;

        var it = self.diagram.selection.iterator;
        while (it.next()) {
            if (!(it.value instanceof go.Link) || !self.layouts.isRLink(it.value)) return false;
        }

        return true;
    };

    // returns true if exactly one relationship (Link) is selected
    this.relationshipSelected = function () {
        return self.diagram !== null && self.diagram.selection.count == 1 && self.diagram.selection.first() instanceof go.Link;
    };

    // ------------ load and initialize model -------------

    this.reload = function (data) {
        self.diagram.model = go.Model.fromJson(data);
        self.diagram.model.addChangedListener(self.autosave.modelChanged);
    };

    this.load = function (data) {

        data = data || $scope.mapData.data;
        self.diagram.model = go.Model.fromJson(data);
        self.ui.setStateData($scope.mapData.state_data);
        self.ui.setMapEditorOptions($scope.mapData.editor_options);

        self.checkModel();
        self.diagram.updateAllTargetBindings();
        self.diagram.undoManager.isEnabled = true;
        self.diagram.model.addChangedListener(self.autosave.modelChanged);
        self.autosave.saveOnModelChanged = true;
        self.diagram.isReadOnly = !$scope.canEdit;
        $scope.updateEditStatus($scope.canEdit ? $scope.LAST_UPDATED : $scope.READ_ONLY);
        //self.ui.resetZoom();
        self.loadMapExtraData($scope.mapData);

        // if no nodes OR in thinkquery mode, launch generator
        if ($scope.thinkquery || !self.diagram.model.nodeDataArray.length) {
            self.ui.openTab(self.ui.TAB_IDself.generator);
        }
        // if we have slides, play presentation
        else if (!$scope.canEdit && self.presenter.getSlideNodeDatas().length) {
                self.presenter.playSlide(1);
            }
    };

    this.loadForSandbox = function () {
        self.diagram.model = go.Model.fromJson($scope.mapData);
        self.ui.setStateData(''); // important! (otherwise corner highlighting breaks)
        self.diagram.updateAllTargetBindings();
        self.diagram.undoManager.isEnabled = true;
        self.ui.resetZoom();
        $scope.canEdit = true;

        // if no nodes OR in thinkquery mode, launch generator
        if ($scope.thinkquery) {
            self.ui.openTab(self.ui.TAB_IDself.generator);
        }
        // if we have slides, play presentation
        else if (self.presenter.getSlideNodeDatas().length) {
                self.presenter.playSlide(1);
            }
    };

    // fix any structural problems in the model before displaying it
    this.checkModel = function () {
        // change "isLinkLabel" property to category:"LinkLabel" (change as of goJS 1.3)
        _.each(self.diagram.model.nodeDataArray, function (nodeData, index, list) {
            if (nodeData.isLinkLabel) {
                delete nodeData.isLinkLabel;
                nodeData.category = "LinkLabel";
            }
        });

        // check for the link label (r-thing) for a link being the same as the from or to node
        // - this can cause infinite recursion in thinks like layout.getScale
        _.each(self.diagram.model.linkDataArray, function (linkData, index, list) {
            var badLabelKeys = [];
            _.each(linkData.labelKeys, function (key, index2, list2) {
                if (key == linkData.from || key == linkData.to) {
                    //console.log('labelKey same as from or to of link: ' + key);
                    badLabelKeys.push(key);
                }
            });
            linkData.labelKeys = _.difference(linkData.labelKeys, badLabelKeys);
        });
    };

    // loads other data besides the diagram model from the json object returned by maps/show.json
    // - this includes points, badges, versions, and map analytics
    // NB: points and badges are set at page load time in layouts/user and users/badges, but
    // we also need to be able to update them here after an autosave

    // TODO: is this still all needed with the newer userProfile stuff?
    this.loadMapExtraData = function (mapData) {
        $scope.safeApply(function () {
            //console.log('map.loadMapExtraData, mapData: ' + mapData);
            $scope.mapUserTags = mapData.metadata.userTags; // TODO: is this used anywhere?

            //$scope.map.getHistory().versionList = mapData.versions;
            $scope.map.analytics.mapAnalytics = mapData.analytics;
        });
    };

    // loads model data for an individual version and displays it
    // NB: this also disables autosave; load() must be called to re-enable it
    this.loadVersion = function (id) {
        $http.get('/map_versions/' + id).then(function (response) {
            if (response.status === 200) {
                try {
                    //console.log('loaded map version with ID: ' + id);
                    self.diagram.model = go.Model.fromJson(response.data);
                    self.diagram.updateAllTargetBindings();
                    self.diagram.undoManager.isEnabled = false;
                    self.autosave.saveOnModelChanged = false;
                    self.diagram.layoutDiagram(true);
                    self.diagram.isReadOnly = true;
                } catch (e) {
                    alert('Could not load MetaMap version');
                    //console.error(e.message);
                }
            }
        });
    };

    // set whether editing capability is temporarily suspended -
    // this is distinct from the global $scope.canEdit setting,
    // which if false prevents editing at all times
    this.setEditingBlocked = function (val) {
        if ($scope.canEdit) {
            self.diagram.isReadOnly = val;
        }
    };

    // ------------- creating things in the model -------------------

    // default properties for all new Things (groups) - note that these can be overridden if needed
    function getNewThingData() {
        return {
            text: 'Idea',
            isGroup: true,
            layout: self.ui.getMapEditorOptions().defaultThingLayout || 'left',
            sExpanded: true,
            pExpanded: true
        };
    }

    this.createSister = function (thing) {
        if (!$scope.canEdit) {
            return null;
        }

        var newLoc = self.layouts.getNewSisterLocation(thing);
        var data = _.extend(getNewThingData(), {
            group: thing.data.group,
            text: 'Idea',
            loc: go.Point.stringify(newLoc)
        });
        self.diagram.model.addNodeData(data);
        var newSister = self.diagram.findNodeForData(data);

        // put new sister right after thing (not as the last sibling)
        if (thing.containingGroup) {
            self.moveSiblingNextTo(newSister, thing, self.RIGHT);
        }
        return newSister;
    };

    this.createRToSister = function (thing) {
        if (!$scope.canEdit) {
            return null;
        }

        var thingKey = self.diagram.model.getKeyForNodeData(thing.data);
        //console.log('thingKey: ' + thingKey);
        var newLoc = self.layouts.getNewSisterLocation(thing, true); // withR = true
        var data = _.extend(getNewThingData(), {
            group: thing.data.group,
            text: 'Idea',
            loc: go.Point.stringify(newLoc)
        });
        self.diagram.model.addNodeData(data);
        var newSister = self.diagram.findNodeForData(data);
        var groupKey = self.diagram.model.getKeyForNodeData(data);

        // create link
        var linkData = {
            from: thingKey,
            to: groupKey,
            type: 'to',
            fromPort: 'R',
            toPort: 'R'
        };
        self.diagram.model.addLinkData(linkData);

        // put new sister right after thing (not as the last sibling)
        if (thing.containingGroup) {
            self.moveSiblingNextTo(newSister, thing, self.RIGHT);
        }
        return newSister;
    };

    this.createChild = function (thing, name, x, y) {
        if (!$scope.canEdit) {
            return null;
        }

        var newLoc = self.layouts.getNewChildLocation2(thing);
        if (x || y) {
            newLoc = new go.Point(x, y);
        }
        var data = _.extend(getNewThingData(), {
            group: thing.data.key,
            text: name || 'Part',
            loc: go.Point.stringify(newLoc)
        });
        self.diagram.model.addNodeData(data);
        self.layouts.setDescendantLayouts(thing, thing.data.layout);
        var child = self.diagram.findNodeForData(data);
        child.updateTargetBindings();
        return child;
    };

    this.createRThing = function (link, name) {
        if (!$scope.canEdit) {
            return null;
        }

        // //console.log('createRThing, link: ' + link + ', name: ' + name);
        // don't allow multiple R-things
        if (link.isLabeledLink) {
            // //console.log('cannot create RThing, link is already labeled');
            return;
        }

        var data = _.extend(getNewThingData(), {
            text: name || 'Relationship Idea',
            //isLinkLabel: true,     // deprecated as of goJS 1.3
            category: "LinkLabel", // new as of goJS 1.3
            loc: '0 0'
        });
        self.diagram.model.startTransaction("create R Thing");
        self.diagram.model.addNodeData(data);
        var key = self.diagram.model.getKeyForNodeData(data);
        var node = self.diagram.findPartForKey(key);
        node.labeledLink = link;
        self.diagram.model.commitTransaction("create R Thing");
        self.diagram.updateAllTargetBindings();

        return self.diagram.findNodeForData(data);
    };

    // ---------- creating things with specified names/locations - for use by generator and tests ------------

    this.createThing = function (x, y, name, layout) {
        group = self.diagram.toolManager.clickCreatingTool.insertPart(new go.Point(x, y));
        self.diagram.model.setDataProperty(group.data, 'text', name);
        if (layout) {
            self.diagram.model.setDataProperty(group.data, 'layout', layout);
        }
        return group;
    };

    this.createRLinkWithRThing = function (thing1, thing2, name) {
        var link = self.createRLink(thing1, thing2);
        return self.createRThing(link, name);
    };

    // returns the linkData object for the new link
    this.createRLink = function (thing1, thing2) {
        self.diagram.model.startTransaction('add link');
        var data = {
            type: 'noArrows',
            from: thing1.data.key,
            to: thing2.data.key,
            fromPort: 'R',
            toPort: 'R'
        };
        self.diagram.model.addLinkData(data);
        self.diagram.model.commitTransaction('add link');
        return self.diagram.findLinkForData(data);
    };

    // returns the linkData object for the new link
    this.createPLink = function (thing1, thing2) {
        self.diagram.model.startTransaction('add link');
        var data = {
            type: 'noArrows',
            from: thing1.data.key,
            to: thing2.data.key,
            fromPort: 'P',
            toPort: 'P',
            category: 'P'
        };
        self.diagram.model.addLinkData(data);
        self.diagram.model.commitTransaction('add link');
        self.diagram.model.setDataProperty(thing1.data, 'pExpanded', true);
        return self.diagram.findLinkForData(data);
    };

    // ------------- moving things in the model structure -------------------

    // returns a go.List of the items in the current selection that are Groups
    function getSelectedGroups() {
        var it = self.diagram.selection.iterator;
        var members = new go.List();
        while (it.next()) {
            var part = it.value;
            if (part instanceof go.Group) {
                members.add(part);
            }
        }
        return members;
    }

    // drag to S
    this.addSelectedThingsAsChildrenOf = function (group) {
        var newMembers = getSelectedGroups();

        // check existing members so we can calculate layout
        var oldMemberBounds = self.safeRect(self.diagram.computePartsBounds(group.memberParts));

        // NB: this is subject to validation by CommandHandler.isValidMember,
        // so for example, members of members of newMembers will not be added as members
        group.addMembers(newMembers);

        self.layouts.layoutNewMembersRelativeTo(newMembers, group, oldMemberBounds);

        self.diagram.clearSelection();
    };

    // drag to D
    this.addSelectedThingsAsSistersOf = function (group) {
        var oldMembers = getSelectedGroups();

        // if dragging to top level, move dragged things so they don't overlap the former parent
        if (!group.containingGroup) {
            // check existing members so we can calculate layout
            var oldMembersBounds = self.diagram.computePartsBounds(oldMembers);
            // NB: oldMembers can be on multiple levels, so not clear which level to use for rescaling old members after drag
            var oldMembersLevel = self.layouts.computeLevel(oldMembers.first());

            var it = oldMembers.iterator;
            while (it.next()) {
                var member = it.value;
                member.containingGroup = null;
            }
            self.layouts.layoutOldMembersOutsideOf(oldMembers, group, oldMembersBounds, oldMembersLevel);
        }
        // if not dragging to top level, place dragged things after former parent in outline
        else {
                var it2 = oldMembers.iterator;
                while (it2.next()) {
                    var member2 = it2.value;
                    member2.containingGroup = group.containingGroup;
                    self.moveSiblingNextTo(member2, group, self.RIGHT);
                }
            }
        self.diagram.clearSelection();
    };

    // for dragging parts within a system - side is LEFT or RIGHT (i.e. above or below, resp. in inventory layout)
    this.addSelectedThingAsOrderedSisterOf = function (group, side) {
        //console.log('addSelectedThingAsOrderedSisterOf, side: ' + side);
        var thing = self.getUniqueThingSelected();
        if (!thing) {
            return;
        }
        self.moveSiblingNextTo(thing, group, side);
    };

    // moves the first thing (sibling) to be after the second thing (group)
    // in the part ordering - they are assumed to be siblings
    // side is LEFT or RIGHT
    this.moveSiblingNextTo = function (sibling, group, side) {
        var parent = group.containingGroup;
        //console.log('moveSiblingNextTo, sibling: ' + sibling + ', group: ' + group + ', parent: ' + parent + ', sibling.containingGroup: ' + sibling.containingGroup);

        if (!parent || sibling.containingGroup != parent) {}
        //console.error('Cannot do moveSiblingNextTo on non-siblings or top-level groups');

        // create new member order
        var memberOrder = new go.List();
        var it = parent.memberParts;
        var order = 0;
        while (it.next()) {
            var member = it.value;
            if (member instanceof go.Group) {
                // we're at the target group, so add the moved thing either before or after it
                if (member == group) {
                    if (side == self.LEFT) {
                        memberOrder.add(sibling);
                        self.diagram.model.setDataProperty(sibling.data, 'order', order++);
                        memberOrder.add(member);
                        self.diagram.model.setDataProperty(member.data, 'order', order++);
                    } else {
                        memberOrder.add(member);
                        self.diagram.model.setDataProperty(member.data, 'order', order++);
                        memberOrder.add(sibling);
                        self.diagram.model.setDataProperty(sibling.data, 'order', order++);
                    }
                }
                // don't re-add the moved thing, it was added above
                else if (member != sibling) {
                        memberOrder.add(member);
                        self.diagram.model.setDataProperty(member.data, 'order', order++);
                    }
            }
        }

        // clear existing members
        var newIt = memberOrder.iterator;
        while (newIt.next()) {
            var member2 = newIt.value;
            member2.containingGroup = null;
        }

        // add new members
        newIt.reset();
        while (newIt.next()) {
            var member3 = newIt.value;
            member3.containingGroup = parent;
        }
    };

    this.addThingAsRThing = function (thing, link) {
        thing.labeledLink = link;
        thing.updateTargetBindings();
    };

    // D corner handler (single click)
    this.toggleDFlag = function (thing) {
        self.diagram.model.setDataProperty(thing.data, 'dflag', !thing.data.dflag);
        thing.updateTargetBindings();
    };

    // S corner handler (single click)
    this.toggleSExpansion = function (thing) {
        var isExpanded = !(thing.data && !thing.data.sExpanded); // expand by default if property not present
        self.diagram.model.setDataProperty(thing.data, 'sExpanded', !isExpanded);
        thing.updateTargetBindings();
        self.ui.showCornerTip(thing, 'S');
    };

    // P corner handler (single click)
    this.togglePExpansion = function (thing) {
        self.diagram.model.setDataProperty(thing.data, 'pExpanded', !self.pIsExpanded(thing));
        thing.updateTargetBindings();
        self.ui.showCornerTip(thing, "P");
    };

    this.pIsExpanded = function (group) {
        return group.data && group.data.pExpanded === true;
    };

    // ---------------------- undo/redo --------------------

    this.canUndo = function () {
        return self.diagram.commandHandler.canUndo();
    };

    this.undo = function () {
        self.diagram.commandHandler.undo();
        self.diagram.layoutDiagram(true);
    };

    this.canRedo = function () {
        return self.diagram.commandHandler.canRedo();
    };

    this.redo = function () {
        self.diagram.commandHandler.redo();
        self.diagram.layoutDiagram(true);
    };

    this.refresh = function () {
        self.diagram.updateAllTargetBindings();
        self.diagram.layoutDiagram(true);
    };

    // ------------------- utility ----------------------

    // check for a rect with NaN X/Y/W/H coords, so we can do stuff with it such as unionRect
    // (NaN,NaN,0,0) => (0,0,0,0)
    this.safeRect = function (rect) {
        if (isNaN(rect.x)) {
            rect.x = 0;
        }
        if (isNaN(rect.y)) {
            rect.y = 0;
        }
        if (isNaN(rect.width)) {
            rect.width = 0;
        }
        if (isNaN(rect.height)) {
            rect.height = 0;
        }
        return rect;
    };

    // ------------------- debug map model ----------------------

    this.loadModel = function () {
        $('#map-model-debug').val(self.diagram.model.toJson());
    };

    this.saveModel = function () {
        self.diagram.model = go.Model.fromJson($('#map-model-debug').val());
        self.diagram.updateAllTargetBindings();
        self.diagram.model.addChangedListener(self.autosave.modelChanged);
        self.autosave.saveOnModelChanged = true;
    };
};

},{"./extensions/NodeLabelDraggingTool.js":25,"./sbEditor":31}],29:[function(require,module,exports){
'use strict';

var SandbankEditor = require('./sbEditor');
// functions for editing perspectives AND distinctions, which work similarly in the UI

SandbankEditor.Perspectives = function ($scope, map) {

    var self = this;

    // temporary state flag for adding/removing P/D selections programmatically
    var selectingLinkedThings = false;

    this.init = function () {};

    // called when a tab is opened or closed
    this.currentTabChanged = function (newValue, oldValue) {
        //console.log('Perspectives, currentTabChanged');
        if (newValue == map.ui.TAB_ID_PERSPECTIVES) {
            // opening perspectives
            setPorDThing('P');
            map.setEditingBlocked(true);
        } else if (oldValue == map.ui.TAB_ID_PERSPECTIVES) {
            // closing perspectives
            saveLinks('P');
            map.setEditingBlocked(false);
        } else if (newValue == map.ui.TAB_ID_DISTINCTIONS) {
            // opening distinctions
            setPorDThing('D');
            map.setEditingBlocked(true);
        } else if (oldValue == map.ui.TAB_ID_DISTINCTIONS) {
            // closing distinctions
            saveLinks('D');
            map.setEditingBlocked(false);
        }
    };

    this.handleDiagramEvent = function (eventName, e) {
        if (eventName == 'ChangedSelection') {
            if (map.ui.currentTabIs(map.ui.TAB_ID_PERSPECTIVES) || map.ui.currentTabIs(map.ui.TAB_ID_DISTINCTIONS)) {
                updateLinks();
            }
        }
    };

    // ---------- P/D Editor state

    this.isInPOrDEditorMode = function () {
        return map.ui.state.perspectivePointKey !== null || map.ui.state.distinctionThingKey !== null;
    };

    this.isInPEditorMode = function () {
        return map.ui.state.perspectivePointKey !== null;
    };

    this.isInDEditorMode = function () {
        return map.ui.state.distinctionThingKey !== null;
    };

    this.isPEditorPoint = function (group) {
        return map.ui.state.perspectivePointKey == group.data.key;
    };

    this.isDEditorThing = function (group) {
        return map.ui.state.distinctionThingKey == group.data.key;
    };

    // NB: this is called via map.getCornerFunction, so we get the extra corner arg, which we can ignore
    this.setPEditorPoint = function (thing, corner) {
        if ($scope.canEdit) {
            map.ui.openTab(map.ui.TAB_ID_PERSPECTIVES);
        }
    };

    this.setDEditorThing = function (thing) {
        if ($scope.canEdit) {
            // NB: need to select only this thing, since this is invoked
            // by a control-click, which will not automatically select just it
            map.diagram.clearSelection();
            thing.isSelected = true;
            map.ui.openTab(map.ui.TAB_ID_DISTINCTIONS);
        }
    };

    // -----------------------

    this.isPerspectivePoint = function (group) {
        var links = group.findLinksOutOf();
        while (links.next()) {
            var link = links.value;
            if (link.data.category == 'P') {
                return true;
            }
        }
        return false;
    };

    this.isSelectedPerspectiveView = function (group) {
        var links = group.findLinksInto();
        while (links.next()) {
            var link = links.value;
            if (link.data.category == 'P' && map.pIsExpanded(link.fromNode) && link.fromNode.isSelected) {
                return true;
            }
        }
        return false;
    };

    this.isToggledPerspectiveView = function (group) {
        var links = group.findLinksInto();
        while (links.next()) {
            var link = links.value;
            if (link.data.category == 'P' && map.pIsExpanded(link.fromNode)) {
                return true;
            }
        }
        return false;
    };

    this.isMouseOverPerspectiveView = function (group) {
        var links = group.findLinksInto();
        while (links.next()) {
            var link = links.value;
            if (link.data.category == 'P' && link.fromNode == map.ui.mouseOverGroup) {
                return true;
            }
        }
        return false;
    };

    this.getPerspectiveViewWeight = function (group) {
        var mode = map.ui.getMapEditorOptions().perspectiveMode;
        if (mode == 'spotlight' || mode == 'both') {
            return (self.isSelectedPerspectiveView(group) ? 1 : 0) + (self.isToggledPerspectiveView(group) ? 1 : 0) + (self.isMouseOverPerspectiveView(group) ? 1 : 0);
        } else {
            return 0;
        }
    };

    // -----------------------

    // category is "P" or "D" (perspectives or distinctions)
    function setPorDThing(category) {
        // if already set, must do save perspectives or save distinctions
        if (map.ui.state.perspectivePointKey || map.ui.state.distinctionThingKey) return;

        var thing = map.diagram.selection.first();
        //console.log('setPorDThing: ' + thing);
        if (thing instanceof go.Group) {
            var key = thing.data.key;
            if (category == "P") {
                map.ui.state.perspectivePointKey = key;
            } else if (category == "D") {
                map.ui.state.distinctionThingKey = key;
            }

            // select views/others
            selectLinkedThingsFor(thing, category);
        }
    }

    // this is called when the selection changes - if the thing is set,
    // adds/removes D/P links according to what is selected; otherwise
    // just shows/hides D/P links for the selected thing(s)
    function updateLinks() {
        if (selectingLinkedThings) // selection is being changed programmatically, so don't respond
            return;

        var pOrDThing = null;
        var category = null;
        if (map.ui.state.perspectivePointKey) {
            pOrDThing = map.diagram.findNodeForKey(map.ui.state.perspectivePointKey);
            category = "P";
        } else if (map.ui.state.distinctionThingKey) {
            pOrDThing = map.diagram.findNodeForKey(map.ui.state.distinctionThingKey);
            category = "D";
        }

        var addLinksTo = new go.List();
        var removeLinks = new go.List();

        // iterate through all things
        if (category) {
            var layers = map.diagram.layers;
            while (layers.next()) {
                var layer = layers.value;
                var parts = layer.parts;
                while (parts.next()) {
                    var part = parts.value;
                    if (part instanceof go.Group) {
                        // calculate links to add/remove based on selection
                        if (pOrDThing) {
                            var links = part.findLinksInto();
                            var existingLink = null;
                            while (links.next()) {
                                var link = links.value;
                                if (link.fromNode.data.key == pOrDThing.data.key && link.data.category == category) existingLink = link;
                            }

                            // decide whether to add or remove a link to the part, depending on whether
                            // it is selected and whether a link exists
                            if (!existingLink && part.isSelected) addLinksTo.add(part);else if (existingLink && !part.isSelected) removeLinks.add(existingLink);
                        }
                    }
                }
            }
        }

        // do the adding/removing of links
        var adds = addLinksTo.iterator;
        while (adds.next()) {
            map.diagram.model.startTransaction('add link');
            var to = adds.value;
            //console.log('updateLinks: adding link from ' + pOrDThing + ' to ' + to);
            if (category == "D" && pOrDThing.data.key == to.data.key) {
                pOrDThing.isSelected = false;
                alert("You can't distinguish a thing from itself!");
                continue;
            }
            map.diagram.model.addLinkData({
                from: pOrDThing.data.key,
                to: to.data.key,
                fromPort: category,
                toPort: category,
                category: category
            });
            map.diagram.model.commitTransaction('add link');
        }
        var removes = removeLinks.iterator;
        while (removes.next()) {
            var remove = removes.value;
            //console.log('updateLinks: removing link from ' + remove.fromNode + ' to ' + remove.toNode);
            map.diagram.model.startTransaction('remove link');
            map.diagram.remove(remove);
            map.diagram.model.removeLinkData(remove.data);
            map.diagram.model.commitTransaction('remove link');
        }

        // show links
        map.diagram.updateAllTargetBindings();
    }

    function saveLinks(category) {
        var pOrDThing = null;
        if (category == "P") {
            pOrDThing = map.diagram.findNodeForKey(map.ui.state.perspectivePointKey);
            map.ui.state.perspectivePointKey = null;
        } else if (category == "D") {
            pOrDThing = map.diagram.findNodeForKey(map.ui.state.distinctionThingKey);
            map.ui.state.distinctionThingKey = null;
        }

        map.diagram.clearSelection();
        map.diagram.updateAllTargetBindings();
    }

    function selectLinkedThingsFor(group, category) {
        selectingLinkedThings = true;
        map.diagram.clearSelection();

        var links = group.findLinksOutOf();
        while (links.next()) {
            var link = links.value;
            if (link.data.category == category) link.toNode.isSelected = true;
        }

        selectingLinkedThings = false;
    }
};

},{"./sbEditor":31}],30:[function(require,module,exports){
'use strict';

var SandbankEditor = require('./sbEditor');
// functions for the presenter/slides

SandbankEditor.Presenter = function ($scope, map) {

    var self = this;

    // constants
    this.SLIDE_BLOCKER_WIDTH = 1000;
    this.SLIDE_BLOCKER_COLOR = "#fff";
    this.SLIDE_BLOCKER_OPACITY = 0.9;

    // state vars
    this.currentSlideIndex = null;
    this.isPresenting = false;
    this.showTOC = false;
    this.isCreatingThumbnail = false;

    // mask applied around slide region when presenting
    this.slideBlocker = null;

    this.diagramAspectRatio = null;

    this.init = function () {};

    this.autosave = function () {
        map.autosave.save('edit_presenter');
    };

    // ---------- editing functions for different slide types -------------

    // NB: hasLinks can have values false, 1, or true (1 means only a single link)
    this.slideTypes = [{
        name: 'TITLE_BODY', label: 'Title and Body',
        hasTitle: true, hasNotes: true, hasChecks: false, hasMapRegion: false, hasMapSummary: false, hasLinks: false
    }, {
        name: 'TITLE_BODY_MAP', label: 'Title, Body and MetaMap',
        hasTitle: true, hasNotes: true, hasChecks: false, hasMapRegion: true, hasMapSummary: false, hasLinks: false
    }, {
        name: 'ACTIVITY_MAP', label: 'Lesson Activity and MetaMap',
        hasTitle: true, hasNotes: true, hasChecks: true, hasMapRegion: true, hasMapSummary: false, hasLinks: true
    }, {
        name: 'MAP_ONLY', label: 'MetaMap only',
        hasTitle: true, hasNotes: false, hasChecks: false, hasMapRegion: true, hasMapSummary: false, hasLinks: false
    }, {
        name: 'MAP_SUMMARY', label: 'MetaMap Summary',
        hasTitle: false, hasNotes: false, hasChecks: false, hasMapRegion: true, hasMapSummary: true, hasLinks: false
    }];

    // ------------------ link/attachment types -----------------------

    this.linkTypes = [{ name: '', label: '-- Select attachment type --' }, { name: 'WEB', label: 'Web Page' }, { name: 'PDF', label: 'PDF' }, { name: 'DOC', label: 'Document' }, { name: 'SPREADSHEET', label: 'Spreadsheet' }, { name: 'PRESENTATION', label: 'Presentation' }, { name: 'METAMAP', label: 'MetaMap' }, { name: 'IMAGE', label: 'Image' }, { name: 'AUDIO', label: 'Audio' }, { name: 'VIDEO', label: 'Video' }, { name: 'SURVEY', label: 'Survey' }, { name: 'WORKSHEET', label: 'Worksheet' }];

    // ------------ list of all things in the map, for map summary slides ---------------------

    this.ideaList = '';

    // only call this occasionally, as they won't be editing the map while presenter is open
    function updateIdeaList() {
        var nodes = map.diagram.nodes;
        var list = [];
        while (nodes.next()) {
            if (nodes.value instanceof go.Group) {
                list.push(nodes.value.data.text);
            }
        }
        list.sort();

        // filter out placeholder names - see map.js:getNewThingData, createSister, etc.
        list = _.difference(_.uniq(list, true), map.generator.getPlaceholderIdeaNames(), ['New Idea', 'New Distinguished Idea', 'New Related Idea', 'New Relationship Idea', 'New Part Idea', 'Idea', 'Part', 'Relationship Idea'] // newer simplified names
        );

        self.ideaList = list.join(', ');
    }

    this.summaryAnalytics = [{ name: 'COUNT_THINGS', singularLabel: 'Distinction', pluralLabel: 'Distinctions' }, { name: 'COUNT_SYSTEMS', singularLabel: 'System', pluralLabel: 'Systems' }, { name: 'COUNT_RELATIONSHIPS', singularLabel: 'Relationship', pluralLabel: 'Relationships' }, { name: 'COUNT_PERSPECTIVES', singularLabel: 'Perspective', pluralLabel: 'Perspectives' }, { name: 'COUNT_RTHINGS', singularLabel: 'Relationship Idea', pluralLabel: 'Relationship Ideas' }, { name: 'COUNT_SYSTEM_RTHINGS', singularLabel: 'Relationship System', pluralLabel: 'Relationship Systems' }, { name: 'COUNT_SYSTEM_PERSPECTIVES', singularLabel: 'Perspective System', pluralLabel: 'Perspective Systems' }, { name: 'COUNT_DISTINCTIONS', singularLabel: 'Advanced Distinction', pluralLabel: 'Advanced Distinctions' }];

    this.addCheck = function (nodeData) {
        nodeData.checks.push({ text: '' });
        self.autosave();
    };

    this.deleteCheck = function (check, nodeData) {
        var i = _.indexOf(nodeData.checks, check);
        nodeData.checks.splice(i, 1);
        self.autosave();
    };

    this.addLink = function (nodeData) {
        nodeData.links.push({ title: '', url: '', type: '' });
        self.autosave();
    };

    this.deleteLink = function (link, nodeData) {
        var i = _.indexOf(nodeData.links, link);
        nodeData.links.splice(i, 1);
        self.autosave();
    };

    this.toggleTOC = function () {
        $scope.safeApply(function () {
            if (self.isPresenting) {
                self.showTOC = !self.showTOC;
            }
        });
    };

    // NB: can't create this in init as the diagram doesn't exist yet...
    function maybeInitSlideBlocker() {
        if (!self.slideBlocker) {
            var mk = go.GraphObject.make;
            self.slideBlocker = mk(go.Node, go.Panel.Auto, {
                layerName: 'Tool',
                opacity: self.SLIDE_BLOCKER_OPACITY
            }, mk(go.Shape, "Rectangle", {
                fill: null,
                stroke: self.SLIDE_BLOCKER_COLOR,
                strokeWidth: 1000
            }));
            map.diagram.add(self.slideBlocker);
        }
    }

    // called when a tab is opened or closed
    this.currentTabChanged = function (newValue, oldValue) {
        if (oldValue == map.ui.TAB_ID_PRESENTER) {
            // closing tab
            self.stopPresenting();
        } else if (newValue == map.ui.TAB_ID_PRESENTER) {
            // opening tab
            // show slides (see layouts.slideTemplate, binding of visible attr)
            self.diagramAspectRatio = $('#diagram').width() / $('#diagram').height();
            //console.log('diagramAspectRatio: ' + self.diagramAspectRatio);

            $scope.map.diagram.updateAllTargetBindings();
            updateIdeaList();
            if (!self.currentSlideIndex && self.getSlideNodeDatas().length > 0) {
                self.currentSlideIndex = 1;
            }
            self.slideThumbnailSelected(1);
        }
    };

    this.handleDiagramEvent = function (eventName, e) {
        if (!map.ui.currentTabIs(map.ui.TAB_ID_PRESENTER)) {
            return;
        }

        if (eventName == 'SelectionDeleting') {
            var selection = e.subject;
            if (selection.count == 1) {
                var thing = selection.first();
                if (thing instanceof go.Node && thing.data.category == 'slide') {
                    if (!confirm("Delete this slide from the presentation?")) {
                        e.cancel = true;
                    }
                }
            }
        } else if (eventName == 'SelectionDeleted') {
            // if slide is deleted from canvas rather than by thumbnail x button, need to update indexes
            compactSlideIndexes();
        } else if (eventName == 'SelectionMoved' || eventName == 'PartResized') {
            // clear thumbnail cache
            thumbnailCache = [];
        } else if (eventName == 'ViewportBoundsChanged') {
            // adjust zooming of map region
            //self.windowResized();
        }
    };

    this.windowResized = _.debounce(function () {
        self.slideThumbnailSelected(self.currentSlideIndex);
    }, 1000);

    this.showSidebar = function () {
        return map.ui.currentTabIs(map.ui.TAB_ID_PRESENTER) && (!self.isPresenting || self.showTOC);
    };

    this.disableMapToolbarButtons = function () {
        return !map.ui.currentTabIs(map.ui.TAB_ID_PRESENTER) || self.isPresenting || !self.getCurrentSlideType().hasMapRegion;
    };

    // returns an array of node data objects (not the slide nodes themselves)
    this.getSlideNodeDatas = function () {
        var diagram = map.diagram;
        var nodes = diagram.model.nodeDataArray;
        var nodeDatas = _.filter(nodes, function (node) {
            return node.category == 'slide';
        });
        nodeDatas = _.sortBy(nodeDatas, function (nodeData) {
            return nodeData.index;
        });
        //console.log('getSlideNodeDatas, indexes: ' + _.pluck(slidesData, 'index'));
        return nodeDatas;
    };

    this.getSlideCount = function () {
        return self.getSlideNodeDatas().length;
    };

    this.getActivitySlideCount = function () {
        return _.where(self.getSlideNodeDatas(), { type: 'ACTIVITY_MAP' }).length;
    };

    this.getSlideType = function (typeName) {
        return _.findWhere(self.slideTypes, { name: typeName });
    };

    this.getCurrentSlideType = function () {
        var slide = findSlideByIndex(self.currentSlideIndex);
        if (slide) {
            return _.findWhere(self.slideTypes, { name: slide.data.type });
        } else {
            return {};
        }
    };

    function findSlideByIndex(index) {
        var diagram = map.diagram;
        var slideData = _.find(self.getSlideNodeDatas(), function (slideData) {
            return slideData.index == index;
        });
        if (slideData !== undefined) {
            return diagram.findNodeForKey(slideData.key);
        } else {
            return undefined;
        }
    }

    // increment is -1 or +1
    this.moveSlide = function (index, increment) {
        $scope.safeApply(function () {
            var diagram = map.diagram;
            var slide = findSlideByIndex(index);
            var neighbor = findSlideByIndex(index + increment);
            if (slide && neighbor) {
                //console.log('moveSlide: swapping ' + slide.data.key + ' with ' + neighbor.data.key);
                diagram.startTransaction("move slide");
                diagram.model.setDataProperty(slide.data, 'index', slide.data.index + increment);
                diagram.model.setDataProperty(neighbor.data, 'index', neighbor.data.index - increment);
                diagram.commitTransaction("move slide");
                thumbnailCache = [];
            }
        });
    };

    function compactSlideIndexes() {
        $scope.safeApply(function () {
            //console.log('compactSlideIndexes');
            var slidesData = self.getSlideNodeDatas();
            var diagram = map.diagram;
            var newIndex = 1;
            diagram.startTransaction("compact slide indexes");
            _.each(slidesData, function (slideData) {
                diagram.model.setDataProperty(slideData, 'index', newIndex);
                //console.log('compactSlideIndexes: set index for ' + slideData.key + ' to ' + newIndex);
                newIndex++;
            });
            diagram.commitTransaction("compact slide indexes");
        });
    }

    function getNewSlideKey() {
        var diagram = map.diagram;
        var i = 1;
        while (diagram.model.findNodeDataForKey('slide-' + i)) {
            i++;
        }
        return 'slide-' + i;
    }

    // NB: indexes (and keys?) must be 1-based, otherwise first slide gets screwed up
    // (somewhere the index shows up as '' instead of 0)
    function getNewSlideIndex() {
        var slides = self.getSlideNodeDatas();
        return slides.length + 1;
    }

    this.addSlide = function (typeName) {
        $scope.safeApply(function () {
            //console.log('addSlide: ' + typeName);
            var diagram = map.diagram;

            var db = map.computeMapBounds();
            db.inflate(db.width / 20, db.height / 10);
            var newLoc = db.x + ' ' + db.y;
            var newIndex = getNewSlideIndex();

            var slideType = _.findWhere(self.slideTypes, { name: typeName });

            diagram.startTransaction("add slide");
            diagram.model.addNodeData({
                key: getNewSlideKey(),
                category: 'slide',
                index: newIndex,
                isGroup: false,
                width: db.width,
                height: db.height,
                loc: newLoc,
                level: 0,
                children: 0,
                type: typeName,
                title: '',
                notes: '',
                checks: [],
                hasRegion: slideType.hasMapRegion,
                isSummary: slideType.hasMapSummary,
                links: []
            });
            diagram.commitTransaction("add slide");
            thumbnailCache = [];

            self.slideThumbnailSelected(newIndex); // trigger display of edit form, zoom to map region if applicable
        });
    };

    this.duplicateSlide = function (index) {
        $scope.safeApply(function () {
            var diagram = map.diagram;
            var newIndex = getNewSlideIndex();
            var slide = findSlideByIndex(index);
            if (slide) {
                diagram.startTransaction("duplicate slide");

                // bump up indexes on subsequent slides to make room for new slide after current one
                _.each(self.getSlideNodeDatas(), function (slideData) {
                    if (slideData.index > index) {
                        diagram.model.setDataProperty(slideData, 'index', slideData.index + 1);
                    }
                });

                // NB: creating a new nodeData object here rather than copying and modifying, to avoid copying $$hashKey (??)
                diagram.model.addNodeData({
                    key: getNewSlideKey(),
                    category: 'slide',
                    index: index + 1,
                    isGroup: false,
                    width: slide.data.width,
                    height: slide.data.height,
                    loc: slide.data.loc,
                    level: 0,
                    children: 0,
                    type: slide.data.type,
                    title: slide.data.title + ' (Copy)',
                    notes: slide.data.notes,
                    checks: slide.data.checks, // clone?
                    hasRegion: slide.data.hasRegion,
                    isSummary: slide.data.isSummary,
                    links: slide.data.links // clone?
                });
                diagram.commitTransaction("duplicate slide");
                thumbnailCache = [];
            }
        });
    };

    this.removeSlide = function (index) {
        $scope.safeApply(function () {
            //console.log('removeSlide: ' + index);
            var diagram = map.diagram;
            var slide = findSlideByIndex(index);
            if (slide) {
                diagram.startTransaction("remove slide");
                diagram.model.removeNodeData(slide.data);
                diagram.commitTransaction("remove slide");
            }
            self.currentSlideIndex = null;
            thumbnailCache = [];
            compactSlideIndexes();
        });
    };

    var thumbnailCache = [];

    this.getSlideThumbnail = function (index) {
        return thumbnailCache[index];
    };

    this.createSlideThumbnails = function () {
        _.each(self.getSlideNodeDatas(), function (nd) {
            self.createSlideThumbnail(nd.index);
        });
    };

    this.createSlideThumbnail = function (index) {
        //console.log('createSlideThumbnail');

        var thumbWidth = 1000;
        var thumbHeight = 600;
        var diagram = map.diagram;

        var slide = findSlideByIndex(index);
        if (!slide) {
            return '';
        } else if (!slide.data.hasRegion && !slide.data.isSummary) {
            return '';
        } else {
            var db = diagram.documentBounds;
            var sb;
            if (slide.data.isSummary) {
                // for a summary slide we shoot the whole map
                sb = map.safeRect(map.computeMapBounds());
            } else {
                // otherwise just shoot the slide region
                sb = slide.part.actualBounds;
            }

            var imagePosition = new go.Point(sb.x, sb.y);
            //console.log('getSlideThumbnail, slide bounds: ' + sb + ', document bounds: ' + db + ', imagePosition: ' + imagePosition);

            var wScale = thumbWidth / sb.width;
            var hScale = thumbHeight / sb.height;
            var thumbScale = Math.min(wScale, hScale);
            //console.log('scale: ' + wScale + ',' + hScale);

            var w = thumbScale * sb.width;
            var h = thumbScale * sb.height;
            //console.log('thumbnail w/h: ' + w + ',' + h);

            // hide slides temporarily while creating thumbnail
            self.isCreatingThumbnail = true;
            diagram.updateAllTargetBindings();

            diagram.scale = thumbScale;

            var imgData = diagram.makeImageData({
                size: new go.Size(w, h),
                position: imagePosition,
                scale: thumbScale
            });

            self.isCreatingThumbnail = false;
            diagram.updateAllTargetBindings();

            thumbnailCache[index] = imgData;

            return imgData;
        }
    };

    // gets a thumbnail of the whole map, for saving (see autosave.js)
    this.getMapThumbnail = function () {

        var diagram = map.diagram;
        var sb = map.safeRect(map.computeMapBounds());
        sb.grow(10, 10, 10, 10);
        var w = 150;
        var h = 100;

        // hide slides temporarily while creating thumbnail
        self.isCreatingThumbnail = true;
        diagram.updateAllTargetBindings();

        var imgData = diagram.makeImageData({
            scale: Math.min(h / sb.height, w / sb.width),
            position: new go.Point(sb.x, sb.y),
            size: new go.Size(w, h)
        });

        self.isCreatingThumbnail = false;
        diagram.updateAllTargetBindings();

        return imgData;
    };

    // called via ng-click on thumbnail
    this.slideThumbnailSelected = function (index) {
        //console.log('slideThumbnailSelected: ' + index);
        var diagram = map.diagram;
        var slide = findSlideByIndex(index);

        $scope.safeApply(function () {
            // NB: order of statements is important here, as selectSlide can trigger changedSelection with an empty selection sometimes... ??
            selectSlide(index);
            self.currentSlideIndex = index;
            diagram.updateAllTargetBindings(); // show/hide slide nodes - see templates.js: slideTemplate

            if (slide) {
                zoomToSlideInCenter(slide);

                if (self.isPresenting) {
                    self.showTOC = false;
                }
            }
        });
    };

    this.needsNarrowCanvas = function () {
        var slide = findSlideByIndex(self.currentSlideIndex);
        return map.ui.currentTabIs(map.ui.TAB_ID_PRESENTER) && slide != null && (slide.data.type == 'TITLE_BODY_MAP' || slide.data.type == 'ACTIVITY_MAP' || slide.data.type == 'MAP_SUMMARY');
    };

    // sets the slide node as selected in the diagram.
    function selectSlide(index) {
        $scope.safeApply(function () {
            //console.log('select slide: ' + index);
            var diagram = map.diagram;
            diagram.clearSelection();
            if (index) {
                var slide = findSlideByIndex(index);
                if (slide) {
                    slide.isSelected = true;
                }
            }
            // TODO: scroll to slide?
        });
    }

    this.playSlide = function (index) {
        var diagram = map.diagram;
        map.ui.openTab(map.ui.TAB_ID_PRESENTER);

        var slides = self.getSlideNodeDatas();
        if (slides.length) {
            self.showTOC = false;
            presentSlide(index);
        }
    };

    // increment is -1 or +1
    this.advanceSlide = function (increment) {
        //console.log('advanceSlide, currentSlideIndex: ' + self.currentSlideIndex);
        $scope.safeApply(function () {
            var slide = findSlideByIndex(self.currentSlideIndex);
            if (slide) {
                self.currentSlideIndex += increment;
                if (self.isPresenting) {
                    presentSlide(self.currentSlideIndex);
                }
            }
        });
    };

    function presentSlide(index) {
        //console.log('presentSlide');
        $scope.safeApply(function () {
            var diagram = map.diagram;
            var slide = findSlideByIndex(index);
            if (!slide) {
                return;
            }

            diagram.clearSelection();
            // NB: need to set this after clearSelection, as that will set it to null! (see changedSelection)
            self.currentSlideIndex = index;
            map.setEditingBlocked(true);
            //console.log('presentSlide, index: ' + index + ', slide: ' + slide + ', currentSlideIndex: ' + self.currentSlideIndex);

            maybeInitSlideBlocker();
            var blockerW = self.SLIDE_BLOCKER_WIDTH;

            if (slide.data.hasRegion) {
                zoomToSlideInCenter(slide);

                // show slide blocker
                self.slideBlocker.desiredSize = new go.Size(slide.actualBounds.width + 2 * blockerW, slide.actualBounds.height + 2 * blockerW);
                self.slideBlocker.location = new go.Point(slide.actualBounds.x - blockerW, slide.actualBounds.y - blockerW);
                self.slideBlocker.visible = true;
                //console.log('slideBlocker: ' + self.slideBlocker.actualBounds);
            } else if (slide.data.isSummary) {
                    zoomToSlideInCenter(slide);
                    self.slideBlocker.visible = false;
                } else {
                    map.ui.resetZoom();
                    self.slideBlocker.visible = false;
                }

            self.isPresenting = true;
            $('body').addClass('presenter-playing');

            map.diagram.updateAllTargetBindings(); // hide slide nodes - see templates.js: slideTemplate
        });
    }

    // zoom the diagram to show the given slide in the center of the canvas
    function zoomToSlideInCenter(slide) {
        var diagram = map.diagram;

        window.setTimeout(function () {

            var halfWidth = slide.data.type != 'MAP_ONLY';
            var zoomRect = self.getLetterboxedRect(slide.actualBounds, halfWidth);
            zoomRect.inflate(zoomRect.width / 10, zoomRect.height / 10);
            diagram.zoomToRect(zoomRect, go.Diagram.Uniform);
        }, 100);
    }

    // Returns a rectangle containing the given rect, but with appropriate width or height added
    // to give it same aspect ratio as the diagram.
    this.getLetterboxedRect = function (rect, halfWidth) {

        // NB: we calculate the aspect ratio when the tab is opened,
        // rather than each time as the diagram size might be changing...
        var dar = halfWidth ? self.diagramAspectRatio / 2 : self.diagramAspectRatio;
        //console.log('rect: ' + rect + ', dar: ' + dar);

        var rectAspectRatio = rect.width / rect.height;

        if (dar > rectAspectRatio) {
            // tall skinny rect, short wide target AR, so add side padding to the rect
            var lbw = rect.height * dar; // because lbw / lbh == dar == lbw / rect.height (lbh == rect.height)
            return rect.copy().inflate((lbw - rect.width) / 2, 0); // add half the width difference to each side of the rect
        } else {
                // short wide rect, tall skinny target AR, so add top/bottom padding to the rect
                var lbh = rect.width / dar; // because lbw / lbh == dar == lbh / rect.width (lbw == rect.width)
                return rect.copy().inflate(0, (lbh - rect.height) / 2); // add half the height difference to top/bottom of the rect
            }
    };

    this.stopPresenting = function () {
        $scope.safeApply(function () {
            //console.log('stopPresenting, currentSlideIndex: ' + self.currentSlideIndex);
            var diagram = map.diagram;

            if (self.slideBlocker) {
                self.slideBlocker.visible = false;
            }

            //self.currentSlideIndex = null;
            self.isPresenting = false;
            $('body').removeClass('presenter-playing');

            map.diagram.updateAllTargetBindings(); // show slide nodes

            diagram.clearSelection();
            map.setEditingBlocked(false);
            //map.ui.resetZoom();
        });
    };
};

},{"./sbEditor":31}],31:[function(require,module,exports){
"use strict";

var SandbankEditor = {};

module.exports = SandbankEditor;

},{}],32:[function(require,module,exports){
// functions for sharing maps, with a modal dialog

'use strict';

window.SandbankSharing = {};

SandbankSharing = function ($scope, $http, $resource, $modal, $log) {

    this.openModal = function (_mapIds, _onUpdate) {
        var modalInstance = $modal.open({
            templateUrl: 'template_map_sharing_modal.html', // see views/shares/_template_map_sharing_modal
            backdrop: 'static',
            controller: sharingModalCtrl,
            windowClass: 'sharing-modal',
            resolve: {
                userId: function userId() {
                    return $scope.userId;
                },
                userProfile: function userProfile() {
                    return $scope.userProfile;
                },
                mapIds: function mapIds() {
                    return _mapIds;
                },
                onUpdate: function onUpdate() {
                    return _onUpdate;
                }
            }
        });

        modalInstance.result.then(function () {});
    };

    // --------------- controller for sharing modal ---------------------

    var sharingModalCtrl = function sharingModalCtrl($scope, $modalInstance, userId, userProfile, mapIds, onUpdate) {

        $scope.userId = userId;
        $scope.userProfile = userProfile;
        $scope.mapIds = mapIds;

        // all existing shares for selected maps
        // format: [{mapId:1, shareId:1, canEdit:true, userId:2, userEmail:'foo@bar.com', groupId:null, organizationId:null, isPublic:false }, ...]
        $scope.mapShares = [];

        // existing shares, grouped for display
        // format: [{name:'foo', userEmail:'foo@bar.com', userId: null, groupId: id, organizationId: null, isPublic:false, canEdit:true, mapIds:[1,2]}, ...]
        $scope.existingShares = [];

        // new shares added in the dialog
        // format: [{shareType:SHARE_TYPE_INDIVIDUAL, sharePermission:SHARE_PERMISSION_CANVIEW, userEmail:'foo@bar.com', groupId:null, organizationId:null, isPublic:false }, ...]
        $scope.newShares = [];

        // all updated shares, to be saved
        // format: [{mapId:1, canEdit:false, userEmail:'foo@bar.com', groupId:null, organizationId:null, isPublic:false }, ...]
        $scope.updatedShares = [];

        // indexes of users/groups/orgs - format: [{id:1, name:'foo'}, ...]
        $scope.users = [];
        $scope.groups = [];
        $scope.organizations = [];

        // constants
        $scope.SHARE_TYPE_INDIVIDUAL = 'One or more Individuals';
        $scope.SHARE_TYPE_GROUP = 'Group';
        $scope.SHARE_TYPE_ORGANIZATION = 'ThinkNation';
        $scope.SHARE_TYPE_PUBLIC = 'All MetaMap Users';

        $scope.shareTypes = [$scope.SHARE_TYPE_INDIVIDUAL,
        //$scope.SHARE_TYPE_GROUP,
        $scope.SHARE_TYPE_ORGANIZATION, $scope.SHARE_TYPE_PUBLIC];

        $scope.SHARE_PERMISSION_CANVIEW = 'Can view';
        $scope.SHARE_PERMISSION_CANEDIT = 'Can edit';

        $scope.sharePermissions = [$scope.SHARE_PERMISSION_CANVIEW, $scope.SHARE_PERMISSION_CANEDIT];

        $scope.canShareCultureMap = function (share) {
            return _.findWhere($scope.userProfile.memberships, {
                organizationId: share.organizationId,
                leader: true
            });
        };

        // get existing shares
        function loadShares(mapIds) {
            $http.get('/shares/map_shares.json?ids=' + mapIds.join(',')).then(function (response) {
                if (response.status === 200 || response.status === 204) {
                    $scope.mapShares = response.data.mapShares;
                    $scope.users = response.data.users;
                    $scope.groups = response.data.groups;
                    $scope.organizations = response.data.organizations;
                    initExistingShares();
                    if (!$scope.existingShares.length && $scope.canAddNewShare()) {
                        $scope.addNewShare();
                    }
                }
            }, function () {
                alert('Could not load sharing info');
            });
        }

        loadShares(mapIds);

        // group the existing shares by user, group, org and public
        function initExistingShares() {
            // find all emails that occur in a share
            var userEmails = _.without(_.uniq(_.pluck($scope.mapShares, 'userEmail')), null);
            // build an array of shares, one for each email, with the applicable map IDs
            var sharesByUserEmail = _.map(userEmails, function (email) {
                var user = _.findWhere($scope.users, {
                    email: email
                });
                return {
                    isDeleted: false,
                    userEmail: email,
                    userId: user ? user.id : null,
                    groupId: null,
                    organizationId: null,
                    isPublic: false,
                    isCultureMap: false,
                    name: email,
                    // NB: for this attribute we don't try to summarize the value for all the existing shares,
                    // because it would be too complicated to display...
                    canEdit: $scope.mapShares.length == 1 && $scope.mapShares[0].canEdit,
                    mapIds: _.pluck(_.where($scope.mapShares, {
                        userEmail: email
                    }), 'mapId')
                };
            });

            var groupIds = _.without(_.uniq(_.pluck($scope.mapShares, 'groupId')), null);
            var sharesByGroupId = _.map(groupIds, function (id) {
                var group = _.findWhere($scope.groups, {
                    id: id
                });
                return {
                    isDeleted: false,
                    userEmail: null,
                    userId: null,
                    groupId: id,
                    organizationId: null,
                    isPublic: false,
                    isCultureMap: false,
                    name: 'Group: ' + (group ? group.name : ''),
                    canEdit: $scope.mapShares.length == 1 && $scope.mapShares[0].canEdit,
                    mapIds: _.pluck(_.where($scope.mapShares, {
                        groupId: id
                    }), 'mapId')
                };
            });

            var organizationIds = _.without(_.uniq(_.pluck($scope.mapShares, 'organizationId')), null);
            var sharesByOrganizationId = _.map(organizationIds, function (id) {
                var organization = _.findWhere($scope.organizations, {
                    id: id
                });
                return {
                    isDeleted: false,
                    userEmail: null,
                    userId: null,
                    groupId: null,
                    organizationId: id,
                    isPublic: false,
                    isCultureMap: $scope.mapShares.length == 1 && $scope.mapShares[0].isCultureMap,
                    name: 'ThinkNation: ' + (organization ? organization.name : ''),
                    canEdit: $scope.mapShares.length == 1 && $scope.mapShares[0].canEdit,
                    mapIds: _.pluck(_.where($scope.mapShares, {
                        organizationId: id
                    }), 'mapId')
                };
            });

            // are any of the selected maps shared publicly?
            var publicShares = [];
            if (_.where($scope.mapShares, {
                isPublic: true
            }).length) {
                publicShares = [{
                    isDeleted: false,
                    userEmail: null,
                    userId: null,
                    groupId: null,
                    organizationId: null,
                    isPublic: true,
                    isCultureMap: false,
                    name: 'Everyone',
                    canEdit: false,
                    mapIds: _.pluck(_.where($scope.mapShares, {
                        isPublic: true
                    }), 'mapId')
                }];
            }

            $scope.existingShares = _.union(sharesByUserEmail, sharesByGroupId, sharesByOrganizationId, publicShares);
        }

        function buildUpdatedShares() {
            $scope.updatedShares = [];

            // for each selected map, decompose the existingShares (grouped by user/group/org/public) into individual shares for saving
            _.each(mapIds, function (id) {
                // get existing shares for this map
                var existingSharesForMapId = _.filter($scope.existingShares, function (existingShare) {
                    // existingShares format: [{name:'foo', userEmail:'foo@bar.com', userId: null, groupId: id, organizationId: null, isPublic:false, isCultureMap:false, canEdit:true, mapIds:[1,2]}, ...]
                    return _.contains(existingShare.mapIds, id);
                });
                // decompose these into individual shares
                _.each(existingSharesForMapId, function (es) {
                    $scope.updatedShares.push({
                        isNew: false,
                        isDeleted: es.isDeleted,
                        mapId: id,
                        userEmail: es.userEmail,
                        userId: es.userId,
                        groupId: es.groupId,
                        organizationId: es.organizationId,
                        isPublic: es.isPublic,
                        isCultureMap: es.isCultureMap,
                        canEdit: es.canEdit
                    });
                });
            });

            // add in the newShares (for each selected map)
            _.each(mapIds, function (id) {
                _.each($scope.newShares, function (ns) {
                    $scope.updatedShares.push({
                        isNew: true,
                        mapId: id,
                        userEmail: ns.shareType == $scope.SHARE_TYPE_INDIVIDUAL ? ns.userEmail : null,
                        groupId: ns.shareType == $scope.SHARE_TYPE_GROUP ? ns.groupId : null,
                        organizationId: ns.shareType == $scope.SHARE_TYPE_ORGANIZATION ? ns.organizationId : null,
                        isPublic: ns.shareType == $scope.SHARE_TYPE_PUBLIC,
                        isCultureMap: ns.isCultureMap,
                        canEdit: ns.shareType == $scope.SHARE_TYPE_PUBLIC ? false : ns.sharePermission == $scope.SHARE_PERMISSION_CANEDIT,
                        message: ns.message
                    });
                });
            });
        }

        function saveShares(onUpdate) {
            $http.put('/shares/update_map_shares', $scope.updatedShares).then(function (response) {
                onUpdate();
            }, function () {
                alert('Could not save sharing info');
            });
        }

        $scope.canDeleteExistingShare = function () {
            return $scope.canAddNewShare();
        };

        $scope.deleteExistingShare = function (share) {
            share.isDeleted = true;
        };

        $scope.canAddNewShare = function () {
            // make sure all maps are owned by the current user
            var mapUserIds = _.uniq(_.pluck($scope.mapShares, 'mapUserId'));
            return mapUserIds.length == 0 || mapUserIds.length == 1 && mapUserIds[0] == $scope.userId;
        };

        $scope.addNewShare = function () {
            // NB: isPublic and canEdit are set in buildUpdateShares
            $scope.newShares.push({
                shareType: $scope.SHARE_TYPE_INDIVIDUAL,
                sharePermission: $scope.SHARE_PERMISSION_CANVIEW,
                userEmail: '',
                groupId: $scope.groups.length ? $scope.groups[0].id : null,
                organizationId: $scope.organizations.length ? $scope.organizations[0].id : null,
                isCultureMap: false,
                message: ''
            });
        };

        $scope.deleteNewShare = function (share) {
            var i = _.indexOf($scope.newShares, share);
            $scope.newShares.splice(i, 1);
        };

        $scope.ok = function () {
            buildUpdatedShares();
            saveShares(onUpdate);
            $modalInstance.close();
        };

        $scope.cancel = function () {
            $modalInstance.dismiss('cancel');
        };
    };

    sharingModalCtrl.$inject = ['$scope', '$modalInstance', 'userId', 'userProfile', 'mapIds', 'onUpdate'];
};

},{}],33:[function(require,module,exports){
'use strict';

var SandbankEditor = require('./sbEditor');
// common core standards tab -
// this is delegated to the SandbankCcsTagging module, which handles CCS
// for a map OR the user profile - see tagging_ccs.js

SandbankEditor.Standards = function ($scope, map) {

    var self = this;

    this.init = function () {};

    // called when a tab is opened or closed
    this.currentTabChanged = function (newValue, oldValue) {
        if (newValue == map.ui().TAB_ID_STANDARDS) {
            // opening tab
            // if there are no links, show the modal
            if ($scope.canEdit && !$scope.ccsTagging.links.length) {
                $scope.ccsTagging.addLink();
            }
        }
        if (oldValue == map.ui().TAB_ID_STANDARDS) {// closing tab
        }
    };
};

},{"./sbEditor":31}],34:[function(require,module,exports){
// functions for user-tagging maps, with a modal dialog

// NB: the complexity here is due to the need to show existing tags that may apply
// to any number of the selected maps, vs. new tags that will be added to all selected maps -
// the tagging info needs to be grouped and ungrouped when loading and saving to handle this.

'use strict';

window.SandbankTagging = {};

SandbankTagging = function ($scope, $http, $resource, $modal, $log) {

    this.openModal = function (_mapIds, _showDescription, _onUpdate) {
        var modalInstance = $modal.open({
            templateUrl: 'template_map_tagging_modal.html', // see views/user_tags/_template_map_tagging_modal
            backdrop: 'static',
            controller: tagsModalCtrl,
            windowClass: 'tags-modal',
            resolve: {
                mapIds: function mapIds() {
                    return _mapIds;
                },
                showDescription: function showDescription() {
                    return _showDescription;
                },
                onUpdate: function onUpdate() {
                    return _onUpdate;
                }
            }
        });

        modalInstance.result.then(function () {});
    };

    // --------------- controller for tags modal ---------------------

    var tagsModalCtrl = function tagsModalCtrl($scope, $modalInstance, mapIds, showDescription, onUpdate) {

        $scope.mapIds = mapIds;

        // all existing tags for selected maps - format: [{mapId: 1, tagId: 1, tagName:'foo'}, ...]
        $scope.mapUserTags = [];

        // existing tags, grouped for display - format: [{name:'foo', mapIds:[1,2]}, ...]
        $scope.existingTags = [];

        // new tags added in the dialog - format: [{name:'foo'}, ...]
        $scope.newTags = [];

        // all updated tags, to be saved - tags format: [{mapId: 1, userTags: "foo, bar, bam"}, ...]
        $scope.updatedTags = { description: '', tags: [] };

        $scope.showDescription = showDescription;

        function loadTags(mapIds) {
            $http.get('/user_tags/map_user_tags.json?ids=' + mapIds.join(',')).then(function (response) {
                $scope.mapUserTags = response.data.mapUserTags;
                // NB: the map description is always passed back if we only pass one map ID,
                // but we may not display it in the dialog - depends on the value of the showDescription flag.
                if (mapIds.length == 1) {
                    $scope.updatedTags.description = response.data.mapDescription;
                }
                initExistingTags();
                $scope.addNewTag();
            }, function () {
                alert('Could not load tags');
            });
        }

        loadTags(mapIds);

        function initExistingTags() {
            var tagNames = _.uniq(_.pluck($scope.mapUserTags, 'tagName')).sort();
            $scope.existingTags = _.map(tagNames, function (name) {
                var mapUserTagsForName = _.where($scope.mapUserTags, { tagName: name });
                var mapIds = _.pluck(mapUserTagsForName, 'mapId');
                return {
                    name: name,
                    mapIds: mapIds
                };
            });
        }

        function buildUpdatedTags() {
            $scope.updatedTags.tags = [];
            _.each(mapIds, function (id) {
                var existingTagsForId = _.filter($scope.existingTags, function (existingTag) {
                    // existingTag format: {name:'foo', mapIds:[1,2]}
                    return _.contains(existingTag.mapIds, id);
                });
                $scope.updatedTags.tags.push({
                    mapId: id,
                    userTags: _.union(_.pluck(existingTagsForId, 'name'), _.without(_.pluck($scope.newTags, 'name'), '') // remove empty tags
                    ).join(', ')
                });
            });
        }

        function saveTags(onUpdate) {
            $http.put('/user_tags/update_map_user_tags', [$scope.updatedTags]).then(function (response) {
                onUpdate();
            }, function () {
                alert('Could not save tags');
            });
        }

        $scope.deleteExistingTag = function (tag) {
            var i = _.indexOf($scope.existingTags, tag);
            $scope.existingTags.splice(i, 1);
        };

        $scope.addNewTag = function () {
            $scope.newTags.push({ name: '' });
        };

        $scope.tagSelected = function (item, model, label) {
            //console.log('tagSelected: ' + item + ', ' + model + ', ' + label);
            $scope.addNewTag();
        };

        $scope.editingTagKeypress = function (e) {
            if (e.which == 13) {
                $scope.addNewTag();
            }
        };

        $scope.deleteNewTag = function (tag) {
            var i = _.indexOf($scope.newTags, tag);
            $scope.newTags.splice(i, 1);
            if (!$scope.newTags.length) {
                $scope.addNewTag(); // always leave at least one tag field
            }
        };

        // tag autocomplete
        $scope.getUserTags = function (viewValue) {
            var url = '/user_tags/list.json?q=' + viewValue;
            return $http.get(url).then(function (response) {
                return response.data.tags;
            });
        };

        $scope.ok = function () {
            buildUpdatedTags();
            saveTags(onUpdate);
            $modalInstance.close();
        };

        $scope.cancel = function () {
            $modalInstance.dismiss('cancel');
        };
    };

    tagsModalCtrl.$inject = ['$scope', '$modalInstance', 'mapIds', 'showDescription', 'onUpdate'];
};

},{}],35:[function(require,module,exports){
'use strict';

var SandbankEditor = require('./sbEditor');
// goJS templates used in the editor

SandbankEditor.Templates = function ($scope, map) {

    var self = this;

    var metaMap = require('../../MetaMap');
    var config = metaMap.config.canvas;
    var CONSTANTS = require('../constants/constants');
    // constants
    //this.groupFillColor = "#f9f9f9";

    this.init = function () {};

    // initialize template-related stuff that depends on the diagram (and therefore can't go in init())
    this.initTemplates = function (diagram) {
        diagram.groupTemplate = self.groupTemplate;
        diagram.nodeTemplate = self.slideTemplate;
        diagram.linkTemplate = self.linkTemplate;
        diagram.linkTemplateMap.add(CONSTANTS.DSRP.P, self.pLinkTemplate);
        diagram.linkTemplateMap.add(CONSTANTS.DSRP.D, self.dLinkTemplate);

        self.setTemporaryLinkTemplates(diagram.toolManager.linkingTool);
        self.setTemporaryLinkTemplates(diagram.toolManager.relinkingTool);

        diagram.toolManager.linkingTool.portTargeted = function (realnode, realport, tempnode, tempport, toend) {
            self.handlePortTargeted(diagram.toolManager.linkingTool, realnode, realport, tempnode, tempport, toend);
        };

        diagram.toolManager.relinkingTool.portTargeted = function (realnode, realport, tempnode, tempport, toend) {
            self.handlePortTargeted(diagram.toolManager.relinkingTool, realnode, realport, tempnode, tempport, toend);
        };

        diagram.toolManager.relinkingTool.updateAdornments = function (part) {
            go.RelinkingTool.prototype.updateAdornments.call(this, part);
            var from = part.findAdornment('RelinkFrom');
            var to = part.findAdornment('RelinkTo');
            // if (from)
            //     //console.log('relinkfrom: ' + from.part.width);
        };

        diagram.toolManager.linkingTool.linkValidation = self.validateLink;
        diagram.toolManager.relinkingTool.linkValidation = self.validateLink;
    };

    // convenient abbreviation for creating templates
    var mk = go.GraphObject.make;

    // DSRP colors (from _variables.scss)
    //var colorD = "#f2624c";
    //var colorS = "#96c93d";
    //var colorR = "#4cbfc2";
    //var colorP = "#fbaa36";
    //var colorPLight = "#FDDDAF";
    //var colorPDark = "#C9882B";

    // var eyeSvgPath = "M 256.00,96.00C 144.341,96.00, 47.559,161.021,0.00,256.00c 47.559,94.979, 144.341,160.00, 256.00,160.00c 111.657,0.00, 208.439-65.021, 256.00-160.00 C 464.442,161.021, 367.657,96.00, 256.00,96.00z M 382.225,180.852c 30.081,19.187, 55.571,44.887, 74.717,75.148 c-19.146,30.261-44.637,55.961-74.718,75.149C 344.427,355.257, 300.779,368.00, 256.00,368.00c-44.78,0.00-88.428-12.743-126.225-36.852 C 99.695,311.962, 74.205,286.262, 55.058,256.00c 19.146-30.262, 44.637-55.962, 74.717-75.148c 1.959-1.25, 3.938-2.461, 5.929-3.65 C 130.725,190.866, 128.00,205.613, 128.00,221.00c0.00,70.692, 57.308,128.00, 128.00,128.00s 128.00-57.308, 128.00-128.00c0.00-15.387-2.725-30.134-7.704-43.799 C 378.286,178.39, 380.265,179.602, 382.225,180.852z M 256.00,205.00c0.00,26.51-21.49,48.00-48.00,48.00s-48.00-21.49-48.00-48.00s 21.49-48.00, 48.00-48.00 S 256.00,178.49, 256.00,205.00z";
    // var eyeBlockedSvgPath = "M 419.661,148.208 C 458.483,175.723 490.346,212.754 512.00,256.00 C 464.439,350.979 367.657,416.00 256.00,416.00 C 224.717,416.00 194.604,410.894 166.411,401.458 L 205.389,362.48 C 221.918,366.13 238.875,368.00 256.00,368.00 C 300.779,368.00 344.427,355.257 382.223,331.148 C 412.304,311.96 437.795,286.26 456.941,255.999 C 438.415,226.716 413.934,201.724 385.116,182.752 L 419.661,148.208 ZM 256.00,349.00 C 244.638,349.00 233.624,347.512 223.136,344.733 L 379.729,188.141 C 382.51,198.627 384.00,209.638 384.00,221.00 C 384.00,291.692 326.692,349.00 256.00,349.00 ZM 480.00,0.00l-26.869,0.00 L 343.325,109.806C 315.787,100.844, 286.448,96.00, 256.00,96.00C 144.341,96.00, 47.559,161.021,0.00,256.00 c 21.329,42.596, 52.564,79.154, 90.597,106.534L0.00,453.131L0.00,480.00 l 26.869,0.00 L 480.00,26.869L 480.00,0.00 z M 208.00,157.00c 24.022,0.00, 43.923,17.647, 47.446,40.685 l-54.762,54.762C 177.647,248.923, 160.00,229.022, 160.00,205.00C 160.00,178.49, 181.49,157.00, 208.00,157.00z M 55.058,256.00 c 19.146-30.262, 44.637-55.962, 74.717-75.148c 1.959-1.25, 3.938-2.461, 5.929-3.65C 130.725,190.866, 128.00,205.613, 128.00,221.00 c0.00,29.262, 9.825,56.224, 26.349,77.781l-29.275,29.275C 97.038,309.235, 73.197,284.67, 55.058,256.00z";
    // var paperclipSvgPath = "M 348.916,163.524l-32.476-32.461L 154.035,293.434c-26.907,26.896-26.907,70.524,0.00,97.422 c 26.902,26.896, 70.53,26.896, 97.437,0.00l 194.886-194.854c 44.857-44.831, 44.857-117.531,0.00-162.363 c-44.833-44.852-117.556-44.852-162.391,0.00L 79.335,238.212l 0.017,0.016c-0.145,0.152-0.306,0.288-0.438,0.423 c-62.551,62.548-62.551,163.928,0.00,226.453c 62.527,62.528, 163.934,62.528, 226.494,0.00c 0.137-0.137, 0.258-0.284, 0.41-0.438l 0.016,0.017 l 139.666-139.646l-32.493-32.46L 273.35,432.208l-0.008,0.00 c-0.148,0.134-0.282,0.285-0.423,0.422 c-44.537,44.529-116.99,44.529-161.538,0.00c-44.531-44.521-44.531-116.961,0.00-161.489c 0.152-0.152, 0.302-0.291, 0.444-0.423l-0.023-0.03 l 204.64-204.583c 26.856-26.869, 70.572-26.869, 97.443,0.00c 26.856,26.867, 26.856,70.574,0.00,97.42L 218.999,358.375 c-8.968,8.961-23.527,8.961-32.486,0.00c-8.947-8.943-8.947-23.516,0.00-32.46L 348.916,163.524z";

    // footer for image export
    var _exportFooter = null;

    // ------------------- debug info for groups/links --------------------------------

    function groupInfo(obj) {
        return obj.data.text + "\n" + 'object: ' + obj + "\n" + 'key: ' + obj.data.key + "\n" + 'containingGroup: ' + obj.containingGroup + "\n" + 'layout: ' + obj.layout + "\n" + 'data.layout: ' + obj.data.layout + "\n" + 'position: ' + parseInt(obj.position.x, 10) + ', ' + parseInt(obj.position.y, 10) + "\n" + 'freehand position (data.loc): ' + go.Point.parse(obj.data.loc) + "\n" + 'width/height: ' + parseInt(obj.actualBounds.width, 10) + '/' + parseInt(obj.actualBounds.height, 10) + "\n" + 'getScale(): ' + map.layouts.getScale(obj) + "\n" + 'isLinkLabel: ' + obj.data.isLinkLabel + "\n" + 'labeledLink: ' + obj.labeledLink + "\n";
    }

    function nodeInfo(obj) {
        return 'object: ' + obj + "\n" + 'key: ' + obj.data.key + "\n" + 'position: ' + parseInt(obj.position.x, 10) + ', ' + parseInt(obj.position.y, 10) + "\n" + 'width/height: ' + parseInt(obj.actualBounds.width, 10) + '/' + parseInt(obj.actualBounds.height, 10) + "\n";
    }

    function linkInfo(obj) {
        var snpos = map.layouts.getSameNodesLinkPosition(obj);
        return '' + 'object: ' + obj + "\n" + 'fromNode: ' + obj.fromNode + "\n" + 'toNode: ' + obj.toNode + "\n" + 'labelNodes: ' + obj.labelNodes.count + "\n" + 'labelNodeIsVisible: ' + map.layouts.labelNodeIsVisible(obj) + "\n" + 'fromPortId: ' + obj.fromPortId + "\n" + 'toPortId: ' + obj.toPortId + "\n" + 'category: ' + (obj.data ? obj.data.category : '') + "\n" + 'containingGroup: ' + obj.containingGroup + "\n" + 'fromAndToNodesAreVisible: ' + map.layouts.fromAndToNodesAreVisible(obj) + "\n" + 'curve: ' + obj.curve + "\n" + 'curviness: ' + obj.curviness + "\n" + 'fromEndSegmentLength: ' + Math.round(obj.fromEndSegmentLength) + "\n" + 'toEndSegmentLength: ' + Math.round(obj.toEndSegmentLength) + "\n" + 'sameNodesLinkPosition: ' + snpos.index + ' of ' + snpos.count + "\n" +
        //+ 'geometry: ' + obj.geometry + "\n" +
        'getLinkStrokeWidth: ' + map.layouts.getLinkStrokeWidth(obj) + "\n";
    }

    // -----------------------------------------------------------------------------

    // NB: these are here because they are about colors;
    // similar functions that are scale-related are in layouts.js...
    function getGroupSelectionStroke(obj) {
        if (obj.isSelected) {
            if (map.perspectives.isInPEditorMode()) return config.colors.DSRP.P;else if (map.perspectives.isInDEditorMode()) return config.colors.DSRP.D;else return config.shapes.box.borderColor;
        } else {
            return config.shapes.box.borderColor;
        }
    }

    // OK, this isn't about colors, but it wants to be near the one above...
    function getGroupSelectionStrokeWidth(obj) {
        return obj.isSelected ? config.shapes.box.borderHighlightWidth : config.shapes.box.borderWidth;
    }

    function getRLinkSelectionStroke(obj) {
        if (obj.isSelected || obj == map.ui.mouseOverLink) {
            return config.shapes.line.highlightColor; // TODO: can P links be selected?
        } else {
                return config.shapes.line.color;
            }
    }

    // -----------------------------------------------------------------------------

    // callbacks to determine when the corners should be visible

    function showDCorner(group) {
        if (map.perspectives.isDEditorThing(group)) {
            // mark distinction thing
            return true;
        } else if (map.perspectives.isInPOrDEditorMode()) {
            // don't show any corners if in P/D editor mode
            return false;
        } else if (map.presenter.isCreatingThumbnail) {
            // don't show any corners if capturing thumbnail
            return false;
        } else {
            return group == map.ui.mouseOverGroup || // show corners on mouseover
            $scope.isTouchDevice() && group.isSelected || canDragSelectionToBecomeSistersOf(group, false) && ( // drag to D (make it sisters)
            map.ui.dragTargetPosition === null || cannotDragSelectionToBecomeOrderedSisterOf(group)); // not showing drag above/below indicators
        }
    }

    function showSCorner(group) {
        if (map.perspectives.isInPOrDEditorMode()) {
            // don't show any corners if in P/D editor mode
            return false;
        } else if (map.presenter.isCreatingThumbnail) {
            // don't show any corners if capturing thumbnail
            return false;
        } else {
            return group == map.ui.mouseOverGroup || // show corners on mouseover
            $scope.isTouchDevice() && group.isSelected || canDragSelectionToBecomeChildrenOf(group, false) && ( // drag to S (make it children)
            map.ui.dragTargetPosition === null || cannotDragSelectionToBecomeOrderedSisterOf(group)); // not showing drag above/below indicators
        }
    }

    function showRCorner(group) {
        if (map.perspectives.isInPOrDEditorMode()) {
            // don't show any corners if in P/D editor mode
            return false;
        } else if (map.presenter.isCreatingThumbnail) {
            // don't show any corners if capturing thumbnail
            return false;
        } else {
            return group == map.ui.mouseOverGroup || $scope.isTouchDevice() && group.isSelected; // show corners on mouseover
        }
    }

    function showPCorner(group) {
        if (map.perspectives.isPEditorPoint(group)) {
            return true; // mark perspective point
        } else if (map.perspectives.isInPOrDEditorMode()) {
                // don't show any corners if in P/D editor mode
                return false;
            } else if (map.presenter.isCreatingThumbnail) {
                // don't show any corners if capturing thumbnail
                return false;
            } else {
                return group == map.ui.mouseOverGroup || $scope.isTouchDevice() && group.isSelected; // show corners on mouseover
            }
    }

    // when a P link should be visible

    this.showPLink = function (link) {
        var mode = map.ui.getMapEditorOptions().perspectiveMode;
        if (map.perspectives.isPEditorPoint(link.fromNode)) {
            // show P's when this link is from the current Point
            return true;
        } else if (map.perspectives.isInPOrDEditorMode()) {
            // don't show P's for non-Point things, even on mouseover
            return false;
        } else {
            return (mode == 'lines' || mode == 'both') && (link.fromNode == map.ui.mouseOverGroup || map.pIsExpanded(link.fromNode));
        }
    };

    this.showPDot = function (link) {
        return true; // map.ui.getMapEditorOptions().perspectiveMode != 'both';
    };

    // these functions are used in two modes:
    // 1. with isDropping == false, to highlight drop targets based on map.ui.dragTargetGroup and map.ui.dragTargetPosition,
    //    which are set on mouseDragEnter/mouseDragleave
    // 2. with isDropping == true, on drop, when the above indicators have gone away, but we know what the dropped
    //    and target groups are, and we want to know what the drop should do.

    function canDragSelectionToBecomeSistersOf(group, isDropping) {
        return (group == map.ui.dragTargetGroup || isDropping) && map.thingsSelectedAreDescendantsOf(group);
    }

    function canDragSelectionToBecomeChildrenOf(group, isDropping) {
        return (group == map.ui.dragTargetGroup || isDropping) && !map.thingsSelectedIncludeSlide() && !map.thingsSelectedAreDescendantsOf(group);
    }

    // side is map.LEFT or map.RIGHT
    function canDragSelectionToBecomeOrderedSisterOf(targetGroup, side, isDropping) {
        // must be dragging single group
        var draggedGroup = map.getUniqueThingSelected();
        if (!draggedGroup) {
            return false;
        }

        // dragged and target must be Sisters in inventory layout
        return (targetGroup == map.ui.dragTargetGroup || isDropping) && (map.ui.dragTargetPosition == side || isDropping) && map.layouts.areSistersInInventoryLayout(draggedGroup, targetGroup);
    }

    function cannotDragSelectionToBecomeOrderedSisterOf(targetGroup) {
        return !canDragSelectionToBecomeOrderedSisterOf(targetGroup, map.LEFT) && !canDragSelectionToBecomeOrderedSisterOf(targetGroup, map.RIGHT);
    }

    // handle drop on one of the three target regions (top, middle, bottom)
    // side is map.LEFT or map.RIGHT
    function handleGroupMouseDrop(event, dropTarget, side) {
        //console.log('dragAboveTarget.mouseDrop, target: ' + dropTarget + ', part: ' + dropTarget .part + ', show: ' + show);
        if (side !== null && canDragSelectionToBecomeOrderedSisterOf(dropTarget.part, side, true)) {
            map.addSelectedThingAsOrderedSisterOf(dropTarget.part, side);
        } else if (canDragSelectionToBecomeSistersOf(dropTarget.part, true)) {
            map.addSelectedThingsAsSistersOf(dropTarget.part);
        } else if (canDragSelectionToBecomeChildrenOf(dropTarget.part, true)) {
            map.addSelectedThingsAsChildrenOf(dropTarget.part);
        }
    }

    // when to show the R-thing knob on a link
    function showKnob(link) {
        return link == map.ui.mouseOverLink;
    }

    // ---------------- components for main group template ------------------

    function dFlagMarker() {
        return mk(go.Shape, new go.Binding('fill', '', function (obj) {
            return obj.data.dflag ? config.colors.black : null;
        }).ofObject(), {
            name: "dflag",
            position: new go.Point(0, 0),
            desiredSize: new go.Size(18, 18),
            geometry: go.Geometry.parse("F M0 1 L0 18 L18 0 L1 0z", true),
            cursor: "pointer",
            pickable: false,
            stroke: null
        });
    }

    // CONSTANTS.DSRP.D corner (top left, red)
    function cornerD() {
        return mk(go.Panel, go.Panel.Position, new go.Binding('opacity', '', function (obj) {
            return showDCorner(obj) ? 1 : 0;
        }).ofObject(), {
            name: "cornerD",
            position: new go.Point(0, 0),
            desiredSize: new go.Size(50, 50),
            opacity: 0
        }, mk(go.Shape, {
            position: new go.Point(0, 0),
            desiredSize: new go.Size(50, 50),
            geometry: go.Geometry.parse("F M0 1 L0 50 L50 0 L1 0z", true),
            fill: config.colors.DSRP.D,
            stroke: null,
            cursor: 'pointer',
            click: function click(event, target) {
                //console.log('click, control:' + event.control + ', alt:' + event.alt + ', meta:' + event.meta);
                if (event.alt) {
                    // NB: a side effect of this will be to select just this group,
                    // which would not happen otherwise via control-click
                    map.perspectives.setDEditorThing(target.part);
                } else {
                    // handle single or double click
                    map.ui.handleCornerClick(CONSTANTS.DSRP.D, target.part);
                }
            },
            contextClick: function contextClick(event, target) {
                //console.log('contextClick:' + event);
                map.toggleDFlag(target.part);
            }
        }), mk(go.TextBlock, {
            text: CONSTANTS.DSRP.D,
            stroke: config.shapes.corners.D.stroke, //white
            font: config.shapes.corners.D.font, //9px sans-serif
            position: new go.Point(12, 15),
            pickable: false
        }));
    }

    // CONSTANTS.DSRP.S corner (bottom left, green)
    function cornerS() {
        return mk(go.Panel, go.Panel.Position, new go.Binding('opacity', '', function (obj) {
            return showSCorner(obj) ? 1 : 0;
        }).ofObject(), {
            name: "cornerS",
            position: new go.Point(0, 50),
            desiredSize: new go.Size(50, 50),
            opacity: 0
        }, mk(go.Shape, {
            position: new go.Point(0, 0),
            desiredSize: new go.Size(50, 50),
            geometry: go.Geometry.parse("F M0 0 L0 49 L1 50 L50 50z", true),
            fill: config.colors.DSRP.S,
            stroke: null,
            cursor: 'pointer',
            click: function click(event, target) {
                // handle single or double click
                map.ui.handleCornerClick(CONSTANTS.DSRP.S, target.part);
            }
        }),
        // expansion indicator
        mk(go.Shape, new go.Binding('position', '', function (obj) {
            return obj.isSubGraphExpanded ? new go.Point(4, 43) : new go.Point(5, 38);
        }).ofObject(), new go.Binding('angle', '', function (obj) {
            return obj.isSubGraphExpanded ? 90 : 0;
        }).ofObject(), {
            desiredSize: new go.Size(5, 10),
            geometry: go.Geometry.parse("F M0 0 L5 5 L0 10z", true),
            fill: config.colors.darkGrey,
            stroke: null,
            cursor: 'pointer',
            pickable: false
        }), mk(go.TextBlock, {
            text: CONSTANTS.DSRP.S,
            stroke: config.shapes.corners.D.stroke, //white
            font: config.shapes.corners.D.font, //'9px sans-serif',
            position: new go.Point(12, 28),
            pickable: false
        }));
    }

    // show only when system is collapsed
    function sCollapsedMarker() {
        return mk(go.Shape, new go.Binding('visible', '', function (obj) {
            return !showSCorner(obj) && obj.memberParts.count > 0 && !obj.isSubGraphExpanded;
        }).ofObject(), {
            position: new go.Point(5, 88),
            desiredSize: new go.Size(5, 10),
            geometry: go.Geometry.parse("F M0 0 L5 5 L0 10z", true),
            fill: config.colors.darkGrey,
            stroke: null,
            cursor: 'pointer',
            pickable: false
        });
    }

    // CONSTANTS.DSRP.R corner (bottom right, blue)
    function cornerR() {
        return mk(go.Panel, go.Panel.Position, new go.Binding('opacity', '', function (obj) {
            return showRCorner(obj) ? 1 : 0;
        }).ofObject(), {
            name: "cornerR",
            position: new go.Point(0, 0),
            desiredSize: new go.Size(100, 100),
            opacity: 0
        }, mk(go.Shape, {
            name: "cornerRShape",
            // NB: this corner is done differently from the others:
            // 1. the overall shape is the size of the whole square, so the port falls in the middle instead of the corner;
            // 2. the geometry traces around the edges of the whole square, because otherwise the link line will
            //    show inside the main square if it's crossing one of the other 3 quadrants
            position: new go.Point(0, 0),
            desiredSize: new go.Size(100, 100),
            geometry: go.Geometry.parse("F" + "M0 0 L0 100 " + // top left to bottom left
            "L99 100 L100 99 L 100 0 " + // bottom/right sides (round bottom right corner)
            "L 0 0 L 100 0 " + // back to top left then top right
            "L 100 50 L 50 100 " + // to midpoint of right side, midpoint of bottom side
            "L0 100z", // bottom left, return home
            true),
            fill: config.colors.DSRP.R,
            stroke: null,
            cursor: 'pointer',

            portId: CONSTANTS.DSRP.R,
            fromLinkable: true,
            fromLinkableSelfNode: false,
            fromLinkableDuplicates: true,
            toLinkable: true,
            toLinkableSelfNode: false,
            toLinkableDuplicates: true,
            click: function click(event, target) {
                // handle single or double click
                map.ui.handleCornerClick(CONSTANTS.DSRP.R, target.part);
            }
        }), mk(go.TextBlock, {
            text: CONSTANTS.DSRP.R,
            stroke: config.shapes.corners.D.stroke, //"white",
            font: config.shapes.corners.D.font, //'9px sans-serif',
            pickable: false,
            position: new go.Point(82, 78)
        }));
    }

    function attachmentPaperClip() {
        return mk(go.Shape, new go.Binding('visible', '', function (obj) {
            return obj.data.attachments !== null && obj.data.attachments !== undefined && obj.data.attachments.length > 0;
        }).ofObject(), new go.Binding('geometry', '', function (obj) {
            return go.Geometry.parse(config.shapes.paperClip.svg, true);
        }).ofObject(), new go.Binding('desiredSize', '', function (obj) {
            return new go.Size(512, 512); // NB: the two icons don't scale to the same proportions for some reason - ??
        }).ofObject(), {
            position: new go.Point(46, 85),
            scale: 0.02,
            stroke: config.colors.black,
            fill: config.colors.black,
            click: function click(event, target) {
                //console.log('clip clicked');
                map.ui.toggleTab(map.ui.TAB_ID_ATTACHMENTS);
            }
        });
    }

    function pEyeball() {
        return mk(go.Shape, new go.Binding('visible', '', function (obj) {
            return map.perspectives.isPerspectivePoint(obj);
        }).ofObject(), new go.Binding('geometry', '', function (obj) {
            return go.Geometry.parse(map.pIsExpanded(obj) ? config.shapes.eye.svg : config.shapes.eye.svgBlocked, true);
        }).ofObject(), new go.Binding('desiredSize', '', function (obj) {
            return new go.Size(512, map.pIsExpanded(obj) ? 440 : 512); // NB: the two icons don't scale to the same proportions for some reason - ??
        }).ofObject(), {
            position: new go.Point(87, 4),
            scale: 0.02,
            stroke: config.colors.black,
            fill: config.colors.black,
            pickable: false
        });
    }

    // P expansion indicator - this shows when the P corner is not visible, and only if the thing is a perspective point
    function pointMarker() {
        return pEyeball();
    }

    // P view indicator
    function viewMarker() {
        return mk(go.Shape, "Border", new go.Binding('visible', '', function (obj) {
            return true;
        }).ofObject(), new go.Binding('fill', '', function (obj) {
            return getViewMarkerFill(obj);
        }).ofObject(), {
            position: new go.Point(0, 0),
            height: 18,
            width: 100,
            stroke: null
        });
    }

    function getViewMarkerFill(obj) {
        var weight = map.perspectives.getPerspectiveViewWeight(obj);

        if (weight == 3) {
            return config.colors.P.dark;
        } else if (weight == 2) {
            return config.colors.DSRP.P;
        } else if (weight == 1) {
            return config.colors.P.light;
        } else {
            return "transparent";
        }
    }

    // CONSTANTS.DSRP.P corner (top right, orange)
    function cornerP() {
        return mk(go.Panel, go.Panel.Position, new go.Binding('opacity', '', function (obj) {
            return showPCorner(obj) ? 1 : 0;
        }).ofObject(), {
            name: "cornerP",
            position: new go.Point(0, 0),
            desiredSize: new go.Size(100, 100),
            opacity: 0
        }, mk(go.Shape, {
            name: "cornerPShape",
            position: new go.Point(0, 0),
            desiredSize: new go.Size(100, 100),
            // NB: this geometry covers the whole square; see note above for cornerR
            geometry: go.Geometry.parse("F" + "M0 0 L0 100 L100 100" + // top left to bottom left to bottom right
            "L100 1 L99 0 L0 0" + // right/top sides (round top right corner)
            "L 50 0 L 100 50 " + // to midpoint of top side, midpoint of right side
            "L100 100 0 100z", // bottom right, bottom left, return home
            true),

            fill: config.colors.DSRP.P,
            stroke: null,
            cursor: 'pointer',

            portId: CONSTANTS.DSRP.P,
            fromLinkable: true,
            fromLinkableSelfNode: false,
            fromLinkableDuplicates: false,
            toLinkable: true,
            toLinkableSelfNode: false,
            toLinkableDuplicates: false,
            toMaxLinks: 1,
            click: function click(event, target) {
                // handle single or double click
                map.ui.handleCornerClick(CONSTANTS.DSRP.P, target.part);
            }
        }), pEyeball(), // P expansion indicator
        mk(go.TextBlock, {
            text: CONSTANTS.DSRP.P,
            stroke: config.shapes.corners.D.stroke, //"white",
            font: config.shapes.corners.D.font, //'9px sans-serif',
            pickable: false,
            position: new go.Point(81, 15)
        }));
    }

    function mainBorder() {
        return mk(go.Shape, "Border", new go.Binding('stroke', '', getGroupSelectionStroke).ofObject(), new go.Binding('strokeWidth', '', getGroupSelectionStrokeWidth).ofObject(), {
            name: "mainarea",
            position: new go.Point(0, 0),
            height: 100,
            width: 100,
            fill: null,
            //portId: "",
            cursor: "pointer",
            fromLinkable: true,
            fromLinkableSelfNode: false,
            fromLinkableDuplicates: true,
            toLinkable: true,
            toLinkableSelfNode: false,
            toLinkableDuplicates: true
        });
    }

    // --------- handlers for mouse drag/drop actions on groups, which need to be replicated on different target parts -------

    // position is map.LEFT, null, or map.RIGHT
    function getGroupMouseDragEnterHandler(position) {
        return function (event, target, obj2) {
            //console.log('mouseDragEnter, e.dp: ' + event.documentPoint + ', target.part: ' + target.part + ', target bounds: ' + target.actualBounds);
            map.ui.dragTargetGroup = target.part;
            map.ui.dragTargetPosition = position;
            map.diagram.updateAllTargetBindings();
        };
    }

    var groupMouseDragLeaveHandler = function groupMouseDragLeaveHandler(event, target, obj2) {
        map.ui.dragTargetGroup = null;
        map.ui.dragTargetPosition = null;
        map.diagram.updateAllTargetBindings();
    };

    function getGroupMouseDropHandler(position) {
        return function (event, dropTarget) {
            handleGroupMouseDrop(event, dropTarget, position);
        };
    }

    var groupClickHandler = function groupClickHandler(event, target) {
        // handle single or double click
        map.ui.handleCornerClick("", target);
    };

    // --------------- targets for dragging to D or S -----------------

    function dragAboveTarget() {
        return mk(go.Panel, go.Panel.Position, {
            position: new go.Point(0, 0),
            height: 25,
            width: 100,
            mouseDragEnter: getGroupMouseDragEnterHandler(map.LEFT),
            mouseDragLeave: groupMouseDragLeaveHandler,
            mouseDrop: getGroupMouseDropHandler(map.LEFT),
            click: groupClickHandler
        },
        // drag target region
        mk(go.Shape, "Rectangle", {
            position: new go.Point(0, 0),
            height: 25,
            width: 100,
            cursor: "pointer",
            stroke: null,
            fill: 'transparent'
        }),
        // drag indicator bar
        mk(go.Shape, "Border", new go.Binding('visible', '', function (obj) {
            return canDragSelectionToBecomeOrderedSisterOf(obj.part, map.LEFT, false);
        }).ofObject(), {
            position: new go.Point(0, 0),
            height: 10,
            width: 100,
            stroke: null,
            fill: config.colors.black
        }));
    }

    function dragIntoTarget() {
        return mk(go.Panel, go.Panel.Position, {
            position: new go.Point(0, 25),
            height: 50,
            width: 100,
            mouseDragEnter: getGroupMouseDragEnterHandler(null),
            mouseDragLeave: groupMouseDragLeaveHandler,
            mouseDrop: getGroupMouseDropHandler(null),
            click: groupClickHandler
        }, mk(go.Shape, "Rectangle", {
            position: new go.Point(0, 0),
            height: 50,
            width: 100,
            cursor: "pointer",
            stroke: null,
            fill: 'transparent'
        }));
    }

    function dragBelowTarget() {
        return mk(go.Panel, go.Panel.Position, {
            position: new go.Point(0, 75),
            height: 25,
            width: 100,
            mouseDragEnter: getGroupMouseDragEnterHandler(map.RIGHT),
            mouseDragLeave: groupMouseDragLeaveHandler,
            mouseDrop: getGroupMouseDropHandler(map.RIGHT),
            click: groupClickHandler
        },
        // drag target region
        mk(go.Shape, "Rectangle", {
            position: new go.Point(0, 0),
            height: 25,
            width: 100,
            cursor: "pointer",
            stroke: null,
            fill: 'transparent'
        }),
        // drag indicator bar
        mk(go.Shape, "Border", new go.Binding('visible', '', function (obj) {
            return canDragSelectionToBecomeOrderedSisterOf(obj.part, map.RIGHT, false);
        }).ofObject(), {
            position: new go.Point(0, 15),
            height: 10,
            width: 100,
            stroke: null,
            fill: config.colors.black
        }));
    }

    // Returns the TextBlock for the group title, for use in the main group template, inside the box.
    function groupInternalTextBlock() {
        return mk(go.Panel, go.Panel.Horizontal, {
            position: new go.Point(0, 0),
            desiredSize: new go.Size(100, 100)
        }, mk(go.TextBlock, new go.Binding("text", "text").makeTwoWay(), new go.Binding("visible", "", function (group) {
            // always show text inside box for R-things, because external text will throw off layout
            return map.layouts.isNotWithinInventoryLayout(group) || map.layouts.isRThingWithinInventoryLayout(group);
        }).ofObject(), {
            width: 80,
            margin: 10,
            alignment: go.Spot.Center,
            textAlign: config.shapes.label.textAlign,
            cursor: config.shapes.label.cursor,
            font: config.shapes.label.font,
            isMultiline: true,
            wrap: go.TextBlock.WrapDesiredSize,

            mouseDragEnter: getGroupMouseDragEnterHandler(null),
            mouseDragLeave: groupMouseDragLeaveHandler,
            mouseDrop: getGroupMouseDropHandler(null),
            click: groupClickHandler,
            contextClick: function contextClick(event, target) {
                if (event.control) {
                    //console.log(groupInfo(target.part));
                }
            }
        }));
    }

    // Returns a TextBlock for the group title, for use in the main group template, on the left or right.
    // visibleFn is a callback to be bound to the visibility attribute of the TextBlock.
    // textAlign is 'left' or 'right'.
    function groupExternalTextBlock(visibleFn, textAlign) {
        return mk(go.TextBlock, new go.Binding("text", "text").makeTwoWay(), new go.Binding("visible", "", visibleFn).ofObject(), new go.Binding("scale", "", map.layouts.getExternalTextScale).ofObject(), {
            name: 'externaltext-' + textAlign, // NB: this screws up layouts for some reason - ??
            textAlign: textAlign,
            margin: 5,
            font: '14px sans-serif',
            isMultiline: true,
            click: groupClickHandler
        });
    }

    // -------------- group/Thing template --------------------

    this.groupTemplate = mk(go.Group, go.Panel.Vertical, new go.Binding("layout", "layout", function (layoutName) {
        return map.layouts.getLayout(layoutName);
    }), new go.Binding("movable", "", function (obj) {
        return !obj.isLinkLabel;
    }).ofObject(), new go.Binding("isSubGraphExpanded", "sExpanded"),
    // dim the thing if it's being dragged over another thing (drop to sister/child)
    new go.Binding('opacity', '', function (obj) {
        return obj.isSelected && map.ui.dragTargetGroup ? 0.25 : 1;
    }).ofObject(), {
        locationObjectName: "mainpanel",
        locationSpot: go.Spot.TopLeft,
        selectionAdorned: false,
        isSubGraphExpanded: true,
        layerName: 'Foreground',
        // highlight corners
        mouseEnter: function mouseEnter(event, target, obj2) {
            map.ui.mouseOverGroup = target;
            map.diagram.updateAllTargetBindings();
        },
        // unhighlight corners
        mouseLeave: function mouseLeave(event, target, obj2) {
            map.ui.mouseOverGroup = null;
            map.diagram.updateAllTargetBindings();
        }
        // containingGroupChanged: function(part, oldgroup, newgroup) {
        //     map.diagram.model.setDataProperty(part.data, 'level', map.computeLevel(part));
        //     //part.updateTargetBindings();  
        // }
    }, mk(go.Panel, go.Panel.Horizontal, groupExternalTextBlock(map.layouts.showLeftTextBlock, 'right'), mk(go.Panel, go.Panel.Position, {
        name: "mainpanel"
    }, new go.Binding("scale", "", map.layouts.getScale).ofObject(),
    // drag area
    mk(go.Shape, "Rectangle", {
        name: "dragarea",
        position: new go.Point(0, 0),
        width: 100,
        height: 100,
        fill: config.shapes.box.fillColor,
        stroke: null,
        cursor: "move",
        // show debug info
        contextClick: function contextClick(event, target) {
            if (event.control) {
                //console.log(groupInfo(target.part));
            }
        }
    }), mk(go.Panel, go.Panel.Position, viewMarker(), dragAboveTarget(), dragIntoTarget(), dragBelowTarget(), groupInternalTextBlock(), cornerD(), dFlagMarker(), cornerS(), sCollapsedMarker(), cornerR(), pointMarker(), cornerP(), attachmentPaperClip(), mainBorder())), groupExternalTextBlock(map.layouts.showRightTextBlock, 'left')),
    // the placeholder normally holds the child nodes, but we just use a dummy placeholder
    mk(go.Shape, {
        name: "placeholder",
        fill: "transparent",
        stroke: null,
        desiredSize: new go.Size(0, 0)
    }));

    // ------------------- link template ---------------------------

    this.shapes = ['to', 'from', 'toFrom', 'noArrows'];

    this.getNextRShape = function () {
        var current = self._currentRShape;
        var next = self.shapes[0];
        if (current) {
            var idx = self.shapes.indexOf(current) + 1;
            if (idx >= self.shapes.length) {
                idx = 0;
            }
            next = self.shapes[idx];
        }
        self._currentRShape = next;
        return next;
    };

    this._currentSelectedLink = null;

    this.linkTemplate = mk(go.Link, {
        selectionAdorned: false,
        layerName: '',
        //routing: go.Link.Orthogonal,
        relinkableFrom: true,
        relinkableTo: true,
        smoothness: 1.0,
        adjusting: go.Link.Stretch,
        reshapable: true,
        mouseEnter: function mouseEnter(event, target, obj2) {
            map.ui.mouseOverLink = target;
            map.diagram.updateAllTargetBindings();
        },
        mouseLeave: function mouseLeave(event, target, obj2) {
            map.ui.mouseOverLink = null;
            map.diagram.updateAllTargetBindings();
        },
        mouseDragEnter: function mouseDragEnter(event, target, dragObject) {
            map.ui.mouseOverLink = target;
            map.diagram.updateAllTargetBindings();
        },
        mouseDragLeave: function mouseDragLeave(event, dropTarget, dragObject) {
            map.ui.mouseOverLink = null;
            map.diagram.updateAllTargetBindings();
        },
        mouseDrop: function mouseDrop(event, dropTarget) {
            var parts = map.diagram.selection;
            if (parts && parts.count == 1 && parts.first() instanceof go.Group) {
                map.addThingAsRThing(parts.first(), dropTarget);
            }
        },
        click: function click(event, target) {
            if (self._currentSelectedLink == target.position) {
                var shape = self.getNextRShape();
                map.ui.setSelectedRelationshipsDirection(shape);
            } else {
                self._currentSelectedLink = target.position;
            }
        },
        doubleClick: function doubleClick(event, target) {
            map.createRThing(target);
        },
        contextClick: function contextClick(event, target) {
            if (event.control) {
                //console.log(linkInfo(target));
            }
        }
    }, new go.Binding("points").makeTwoWay(), new go.Binding("curviness", "curviness"), mk(go.Shape, new go.Binding('stroke', '', getRLinkSelectionStroke).ofObject(), new go.Binding("strokeWidth", "", map.layouts.getLinkStrokeWidth).ofObject(), {
        name: "LINKSHAPE"
    }),
    // show to/from arrowheads based on link "type" attribute
    mk(go.Shape, {
        fromArrow: "Backward"
    }, new go.Binding('stroke', '', getRLinkSelectionStroke).ofObject(), new go.Binding("scale", "", map.layouts.getArrowheadScale).ofObject(), new go.Binding('visible', 'type', function (t) {
        return t == 'from' || t == 'toFrom';
    })), mk(go.Shape, {
        toArrow: "Standard"
    }, new go.Binding('stroke', '', getRLinkSelectionStroke).ofObject(), new go.Binding("scale", "", map.layouts.getArrowheadScale).ofObject(), new go.Binding('visible', 'type', function (t) {
        return t == 'to' || t == 'toFrom';
    })), mk(go.Panel, go.Panel.Auto, // link label "knob"
    new go.Binding('opacity', '', function (obj) {
        return showKnob(obj) ? 1 : 0;
    }).ofObject(), new go.Binding("scale", "", map.layouts.getArrowheadScale).ofObject(), mk(go.Shape, {
        figure: "Ellipse",
        fill: config.colors.DSRP.D,
        stroke: config.colors.DSRP.D,
        width: 12,
        height: 12
    })));

    this.pLinkTemplate = mk(go.Link, {
        curve: go.Link.Bezier,
        adjusting: go.Link.Stretch,
        reshapable: true
    }, new go.Binding("points").makeTwoWay(), new go.Binding("curviness", "curviness"), new go.Binding('opacity', '', function (obj) {
        return self.showPLink(obj) ? 1 : 0;
    }).ofObject(), {
        selectionAdorned: false,
        layerName: 'Background', // make P links fall behind R links
        routing: go.Link.Normal,
        curve: go.Link.Bezier,
        adjusting: go.Link.Stretch,
        reshapable: true,
        contextClick: function contextClick(event, target) {
            if (event.control) {
                //console.log(linkInfo(target));
            }
        }
    }, mk(go.Shape, new go.Binding("strokeWidth", "", map.layouts.getLinkStrokeWidth).ofObject(), {
        name: "LINKSHAPE",
        stroke: config.colors.P.light,
        fill: config.colors.P.light
    }), mk(go.Shape,
    // new go.Binding('visible', '', function(obj) {
    //     return (self.showPDot(obj) ? 1 : 0);
    // }).ofObject(),
    new go.Binding("scale", "", map.layouts.getArrowheadScale).ofObject(), {
        toArrow: "Circle",
        stroke: config.colors.P.light,
        fill: config.colors.P.light
    }));

    this.dLinkTemplate = mk(go.Link, {
        selectable: false
    }, mk(go.Shape, {
        name: "LINKSHAPE",
        stroke: null
    }));

    // ----------- temporary link/node templates, for use when dragging to create R/P lines -------------

    // define initial temporary link templates - these will be modified when handlePortTargeted is called
    this.setTemporaryLinkTemplates = function (tool) {
        tool.temporaryLink = makeTemporaryLinkTemplate();
        tool.temporaryFromNode = makeTemporaryNodeTemplate();
        tool.temporaryToNode = makeTemporaryNodeTemplate();
    };

    function makeTemporaryLinkTemplate() {
        return mk(go.Link, {
            layerName: "Tool",
            curve: go.Link.Bezier
        }, mk(go.Shape, {
            name: 'linkshape',
            strokeWidth: 2
        }));
    }

    function makeTemporaryNodeTemplate() {
        return mk(go.Group, {
            layerName: "Tool"
        }, mk(go.Shape, "Border", {
            name: 'border',
            strokeWidth: 3,
            fill: null
        }));
    }

    // change color and portId of temporary link templates based on the type of link being created/relinked
    this.handlePortTargeted = function (tool, realnode, realport, tempnode, tempport, toend) {
        // //console.log('portTargeted, realport: ' + (realport ? realport.name : '') + ', tempport: ' + (tempport ? tempport.name : '')
        //     + ', originalFromPort: ' + (ltool.originalFromPort ? ltool.originalFromPort.name : '') + ', originalToPort: ' + ltool.originalToPort);

        var linkShape = tool.temporaryLink.findObject('linkshape');
        var fromBorder = tool.temporaryFromNode.findObject('border');
        var toBorder = tool.temporaryToNode.findObject('border');

        if (tool.originalFromPort && tool.originalFromPort.name == 'cornerPShape') {
            linkShape.stroke = config.colors.DSRP.P;
            fromBorder.stroke = config.colors.DSRP.P;
            toBorder.stroke = config.colors.DSRP.P;
            fromBorder.portId = CONSTANTS.DSRP.P;
            toBorder.portId = CONSTANTS.DSRP.P;
        } else if (tool.originalFromPort && tool.originalFromPort.name == 'cornerRShape') {
            linkShape.stroke = config.colors.DSRP.R;
            fromBorder.stroke = config.colors.DSRP.R;
            toBorder.stroke = config.colors.DSRP.R;
            fromBorder.portId = CONSTANTS.DSRP.R;
            toBorder.portId = CONSTANTS.DSRP.R;
        }
        tempnode.scale = map.layouts.getScale(realnode);
    };

    // prevent duplicate CONSTANTS.DSRP.P links in the same direction between the same two things
    this.validateLink = function (fromNode, fromPort, toNode, toPort) {
        // the P port is on top of the R port, so both P and R links get the toPort set to R by default.
        if (fromPort.portId == CONSTANTS.DSRP.P) {
            // NB: findLinksTo would be simpler, but it doesn't seem to work... (?)
            var pLinks = toNode.findLinksBetween(fromNode, CONSTANTS.DSRP.P, CONSTANTS.DSRP.P);
            //console.log('validateLink, pLinks from ' + fromNode + ':' + fromPort + ' to ' + toNode + ':' + toPort + ' = ' + pLinks.count);
            if (pLinks.count) {
                while (pLinks.next()) {
                    var pLink = pLinks.value;
                    if (pLink.fromNode == fromNode && pLink.toNode == toNode) {
                        return false;
                    }
                }
            }
        }
        return true;
    };

    // ------------------- slide node template ----------------------

    function createSlideResizeHandle(alignment) {
        return mk(go.Shape, new go.Binding("desiredSize", "", function (obj) {
            var slide = obj.adornedObject;
            var size = Math.min(slide.width, slide.height) * .05;
            return new go.Size(size, size);
        }).ofObject(), {
            alignment: alignment,
            cursor: "col-resize",
            fill: 'rgba(251,170,54,1)',
            stroke: null
        });
    }

    this.slideTemplate = mk(go.Node, go.Panel.Auto,
    // NB: unlike groups, slides just use a normal 2-way location binding
    new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify), new go.Binding("width", "width").makeTwoWay(), new go.Binding("height", "height").makeTwoWay(), new go.Binding("visible", "", function (obj) {
        return obj.data.hasRegion && map.ui.currentTabIs(map.ui.TAB_ID_PRESENTER) && !map.presenter.isPresenting && !map.presenter.isCreatingThumbnail && map.presenter.currentSlideIndex == obj.data.index;
    }).ofObject(), {
        locationSpot: go.Spot.TopLeft,
        selectionAdorned: false,
        resizable: true,
        resizeAdornmentTemplate: mk(go.Adornment, "Spot", mk(go.Placeholder), // takes size and position of adorned object                   
        createSlideResizeHandle(go.Spot.TopLeft), createSlideResizeHandle(go.Spot.Top), createSlideResizeHandle(go.Spot.TopRight), createSlideResizeHandle(go.Spot.Right), createSlideResizeHandle(go.Spot.BottomRight), createSlideResizeHandle(go.Spot.Bottom), createSlideResizeHandle(go.Spot.BottomLeft), createSlideResizeHandle(go.Spot.Left)),
        padding: 0,
        contextClick: function contextClick(event, target) {
            //console.log(nodeInfo(target.part));
        }
    }, mk(go.Shape, "Rectangle", {
        name: "slideborder",
        fill: 'rgba(251,170,54,.1)',
        stroke: null
    }));

    // ------------------- export footer ----------------------

    // NB: this is not a template per se, in that it is added to the diagram
    // statically, rather than being bound to something in the model.
    // But we put it here because it is about creating parts and stuff.

    function createExportFooter() {
        return mk(go.Node, go.Panel.Spot, {
            layerName: 'Foreground',
            location: new go.Point(0, 0),
            scale: 1,
            opacity: 0,
            pickable: false,
            selectable: false
        }, mk(go.Shape, "Rectangle", {
            name: "rectangle",
            height: 60,
            fill: null,
            stroke: null
        }), mk(go.Picture, {
            source: 'metamap/assets/img/metamap-logo-50.png',
            alignment: go.Spot.TopLeft,
            alignmentFocus: go.Spot.TopLeft,
            width: 195,
            height: 50
        }), mk(go.TextBlock, {
            text: "metamap.cabreraresearch.org",
            alignment: go.Spot.BottomLeft,
            alignmentFocus: go.Spot.BottomLeft,
            width: 200
        }), mk(go.TextBlock, {
            name: "mapTitle",
            text: "",
            textAlign: "right",
            alignment: go.Spot.TopRight,
            alignmentFocus: go.Spot.TopRight,
            width: 300
        }), mk(go.TextBlock, {
            name: "authorName",
            text: "",
            textAlign: "right",
            alignment: go.Spot.BottomRight,
            alignmentFocus: go.Spot.BottomRight,
            width: 300
        }));
    }

    // creates or refreshes the footer logo/text that is displayed in the image export
    this.addExportFooter = function () {
        if (!_exportFooter) {
            _exportFooter = createExportFooter();
            map.diagram.add(_exportFooter);
        }
    };

    this.showExportFooter = function () {
        var rect = map.computeMapBounds();
        // put footer at least 100 px below bottom of map; make it at least 500px wide
        var x = rect.x;
        var y = rect.y + rect.height + Math.max(100, rect.height / 5);
        var w = Math.max(500, rect.width);
        //console.log('showExportFooter, bounds rect: ' + rect + ', w: ' + w);
        _exportFooter.location = new go.Point(x, y);
        _exportFooter.findObject("rectangle").width = w;
        _exportFooter.findObject("mapTitle").text = "Map Title: " + $scope.mapTitle;
        _exportFooter.findObject("authorName").text = "Author: " + $scope.userName;
        _exportFooter.opacity = 1;
        _exportFooter.invalidateLayout();
    };

    this.hideExportFooter = function () {
        _exportFooter.opacity = 0;
    };
};

},{"../../MetaMap":1,"../constants/constants":40,"./sbEditor":31}],36:[function(require,module,exports){
'use strict';

var SandbankEditor = require('./sbEditor');

SandbankEditor.Tests = function ($scope, map) {

    var self = this;

    this.TEST_STATUS_NOT_RUN = 'not-run';
    this.TEST_STATUS_PASSED = 'passed';
    this.TEST_STATUS_EXAMINE = 'examine';
    this.TEST_STATUS_FAILED = 'failed';

    this.currentTest = null;

    this.init = function () {};

    this.runTest = function (name) {
        $scope.safeApply(function () {
            var diagram = map.getDiagram();
            var test = _.findWhere(self.tests, { name: name });
            test.status = self.TEST_STATUS_NOT_RUN;
            self.currentTest = test;
            diagram.clear();
            test.run(diagram);
            if (test.check === undefined) {
                test.status = self.TEST_STATUS_EXAMINE;
            } else {
                test.failReason = test.check(diagram);
                if (_.isString(test.failReason)) {
                    test.status = self.TEST_STATUS_FAILED;
                } else {
                    test.status = self.TEST_STATUS_PASSED;
                }
            }
        });
    };

    this.createGeneratorTest = function (name, mapItFn) {
        return {
            name: 'ThinkQ: ' + name,
            run: function run(diagram) {
                self.runGeneratorTest(mapItFn);
            }
        };
    };

    this.runGeneratorTest = function (mapItFn) {
        var diagram = map.getDiagram();
        var generator = map.getGenerator();
        generator.concept1 = 'CONCEPT 1';
        generator.concept2 = 'CONCEPT 2';
        generator.mapIt(mapItFn);
    };

    this.tests = [
    // {
    //     name: '[Failed test]',
    //     run: function(diagram) {
    //     },
    //     check: function(diagram) {
    //         return 'This test failed - this is only a test.';
    //     }
    // },
    {
        name: 'Reset map',
        run: function run(diagram) {
            diagram.toolManager.clickCreatingTool.insertPart(new go.Point(0, 0));
            map.refresh();
        },
        check: function check(diagram) {
            return diagram.findTopLevelGroups().count == 1;
        }
    }, {
        name: 'Create Sister',
        run: function run(diagram) {
            diagram.toolManager.clickCreatingTool.insertPart(new go.Point(0, 0));
            var group = diagram.findTopLevelGroups().first();
            map.createSister(group);
        },
        check: function check(diagram) {
            return diagram.findTopLevelGroups().count == 2;
        }
    }, {
        name: 'Create R to Sister',
        run: function run(diagram) {
            diagram.toolManager.clickCreatingTool.insertPart(new go.Point(0, 0));
            var group = diagram.findTopLevelGroups().first();
            map.createRToSister(group);
        }
    }, {
        name: 'Create Child',
        run: function run(diagram) {
            diagram.toolManager.clickCreatingTool.insertPart(new go.Point(0, 0));
            var group = diagram.findTopLevelGroups().first();
            map.createChild(group);
        }
    }, {
        name: 'Create 3 children and switch to freehand',
        run: function run(diagram) {
            diagram.toolManager.clickCreatingTool.insertPart(new go.Point(0, 0));
            var group = diagram.findTopLevelGroups().first();
            map.createChild(group);
            map.createChild(group);
            map.createChild(group);
            // diagram.model.setDataProperty(group.data, 'layout', 'freehand');
            group.isSelected = true;
            map.ui().setSelectedThingsLayout('freehand');
        },
        check: function check(diagram) {
            if (diagram.findTopLevelGroups().count != 1) {
                return 'Top level group count is not 1';
            }
            var group = diagram.findTopLevelGroups().first();
            if (group.memberParts.count != 3) {
                return 'Parent data children is not 3';
            }
            return true;
        }
    }, {
        name: 'Drag RTBB into outline S',
        instructions: 'Drag the preselected RTBB into Whole (S), then do an Undo',
        run: function run(diagram) {
            var whole = map.createThing(0, 0, 'Whole', 'left');
            var part1 = map.createThing(250, 0, 'Part 1');
            var subpart11 = map.createChild(part1, 'Subpart 1.1');
            var part2 = map.createThing(500, 0, 'Part 2');
            var rThing = map.createRLinkWithRThing(part1, part2, 'Rthing');
            map.refresh();
            diagram.clearSelection();
            part1.isSelected = true;
            part2.isSelected = true;
        }
    }, {
        name: 'Drag RTBB into freehand S',
        instructions: 'Drag the preselected RTBB into Whole (S) and examine layout',
        run: function run(diagram) {
            var whole = map.createThing(0, 0, 'Whole', 'freehand');
            var oldPart1 = map.createChild(whole, 'Old Part 1');
            var part1 = map.createThing(250, 30, 'Part 1');
            var subpart11 = map.createChild(part1, 'Subpart 1.1');
            var part2 = map.createThing(500, 70, 'Part 2');
            var rThing = map.createRLinkWithRThing(part1, part2, 'Rthing');
            map.refresh();
            diagram.clearSelection();
            part1.isSelected = true;
            part2.isSelected = true;
        }
    }, {
        name: 'Create RTBB in outline and switch to freehand',
        instructions: 'Check auto-generated freehand layout of parts',
        run: function run(diagram) {
            var whole = map.createThing(0, 0, 'Whole', 'left');
            var part1 = map.createChild(whole, 'Part 1');
            var subpart11 = map.createChild(part1, 'Subpart 1.1');
            var part2 = map.createChild(whole, 'Part 2');
            var rThing = map.createRLinkWithRThing(part1, part2, 'Rthing');
            whole.isSelected = true;
            map.ui().setSelectedThingsLayout('freehand');
            //diagram.model.setDataProperty(whole.data, 'layout', 'freehand');
            //map.refresh();
            diagram.clearSelection();
        }
    },

    // create RTBB in freehand, add part in outline, switch back to freehand
    // create RTBB in freehand, drag in part in outline, switch back to freehand

    {
        name: 'Drag RTBB out of S',
        instructions: 'Drag the preselected RTBB onto Whole (D)',
        run: function run(diagram) {
            var whole = map.createThing(0, 0, 'Whole', 'left');
            var part1 = map.createChild(whole, 'Part 1');
            var subpart11 = map.createChild(part1, 'Subpart 1.1');
            var part2 = map.createChild(whole, 'Part 2');
            var rThing = map.createRLinkWithRThing(part1, part2, 'Rthing');
            map.refresh();
            diagram.clearSelection();
            part1.isSelected = true;
            part2.isSelected = true;
        }
    }, {
        name: 'Drag RTBB out of freehand S',
        instructions: 'Drag the preselected RTBB onto Whole (D)',
        run: function run(diagram) {
            var whole = map.createThing(0, 0, 'Whole', 'freehand');
            var part1 = map.createChild(whole, 'Part 1', 10, 120);
            var subpart11 = map.createChild(part1, 'Subpart 1.1');
            var part2 = map.createChild(whole, 'Part 2', 110, 150);
            var rThing = map.createRLinkWithRThing(part1, part2, 'Rthing');
            map.refresh();
            diagram.clearSelection();
            part1.isSelected = true;
            part2.isSelected = true;
        }
    }, {
        name: 'Drag RTBB out of 2nd level S',
        instructions: 'Drag the preselected RTBB onto Whole (D) of Part 1',
        run: function run(diagram) {
            var whole = map.createThing(0, 0, 'Whole', 'left');
            var part1 = map.createChild(whole, 'Part 1');
            var subpart11 = map.createChild(part1, 'Subpart 1.1');
            var subpart12 = map.createChild(part1, 'Subpart 1.2');
            var rThing = map.createRLinkWithRThing(subpart11, subpart12, 'Rthing');
            var part2 = map.createChild(whole, 'Part 2');
            map.refresh();
            diagram.clearSelection();
            subpart11.isSelected = true;
            subpart12.isSelected = true;
        }
    }, {
        name: 'Drag RTBB out of 2nd level freehand S',
        instructions: 'Drag the preselected RTBB onto Whole (D) of Part 1',
        run: function run(diagram) {
            var whole = map.createThing(0, 0, 'Whole', 'freehand');
            var part1 = map.createChild(whole, 'Part 1', 0, 120);
            var subpart11 = map.createChild(part1, 'Subpart 1.1', 10, 180);
            var subpart12 = map.createChild(part1, 'Subpart 1.2', 20, 220);
            var rThing = map.createRLinkWithRThing(subpart11, subpart12, 'Rthing');
            var part2 = map.createChild(whole, 'Part 2', 0, 300);
            map.refresh();
            diagram.clearSelection();
            subpart11.isSelected = true;
            subpart12.isSelected = true;
        }
    }, {
        name: 'Rchannel',
        instructions: 'Note that R-things are in part-whole relation',
        run: function run(diagram) {
            var thing1 = map.createThing(0, 0, 'Whole 1', 'right');
            var child11 = map.createChild(thing1, 'Part 1.1');
            var thing2 = map.createThing(250, 0, 'Whole 2');
            var child21 = map.createChild(thing2, 'Part 2.1');

            var rThing1 = map.createRLinkWithRThing(thing1, thing2, 'Rthing 1-2');
            var rThing11 = map.createRLinkWithRThing(child11, child21, 'Rthing 1.1 - 2.1');
            //console.log('Rchannel, rThing11: ' + rThing11);

            diagram.clearSelection();
            rThing11.isSelected = true;
            map.addSelectedThingsAsChildrenOf(rThing1);
        }
    }, {
        name: 'Disappearing parts on new idea creation',
        instructions: 'Create a new top-level idea - Part 1.1 should not disappear temporarily',
        run: function run(diagram) {
            var thing1 = map.createThing(0, 0, 'Whole 1', 'right');
            var child11 = map.createChild(thing1, 'Part 1.1');
        }
    }, {
        name: 'Drag top-level thing into freehand system',
        instructions: 'Drag New Part into Whole; examine resulting part layout',
        run: function run(diagram) {
            var thing1 = map.createThing(0, 0, 'Whole', 'freehand');
            var child11 = map.createChild(thing1, 'Part');
            var newPart = map.createThing(250, 0, 'New Part', 'left');
        }
    }, {
        name: 'Drag top-level RTBB into freehand system',
        instructions: 'Drag preselected RTBB into Whole; examine resulting part layout',
        run: function run(diagram) {
            var thing1 = map.createThing(0, 0, 'Whole', 'freehand');
            var child11 = map.createChild(thing1, 'Part');
            var bar = map.createThing(250, 0, 'Bar', 'left');
            var bell = map.createThing(500, 0, 'Bell', 'left');
            var rThing = map.createRLinkWithRThing(bar, bell, 'Rthing');
            map.refresh();
            diagram.clearSelection();
            bar.isSelected = true;
            bell.isSelected = true;
        }
    }, {
        name: 'Drag R-thing square into freehand system',
        instructions: 'Drag preselected square into Whole; examine resulting part layout',
        run: function run(diagram) {
            var whole = map.createThing(-100, 50, 'Whole', 'freehand');
            var child11 = map.createChild(whole, 'Part');
            var part11 = map.createThing(250, 0, 'Part11', 'left');
            var part12 = map.createThing(500, 0, 'Part12', 'left');
            var part21 = map.createThing(250, 250, 'Part21', 'left');
            var part22 = map.createThing(500, 250, 'Part22', 'left');

            var rThing11_12 = map.createRLinkWithRThing(part11, part12, 'Rthing 11-12');
            var rThing11_21 = map.createRLinkWithRThing(part11, part21, 'Rthing 11-21');
            var rThing12_22 = map.createRLinkWithRThing(part12, part22, 'Rthing 12-22');
            var rThing21_22 = map.createRLinkWithRThing(part21, part22, 'Rthing 21-22');
            map.refresh();
            diagram.clearSelection();
            part11.isSelected = true;
            part12.isSelected = true;
            part21.isSelected = true;
            part22.isSelected = true;
        }
    }, {
        name: 'Drag R-thing square out of freehand system',
        instructions: 'Drag preselected square onto D of Whole; examine resulting layout',
        run: function run(diagram) {
            var whole = map.createThing(-100, 50, 'Whole', 'freehand');
            var child11 = map.createChild(whole, 'Part');
            var part11 = map.createChild(whole, 'Part11', 10, 190);
            var part12 = map.createChild(whole, 'Part12', 120, 190);
            var part21 = map.createChild(whole, 'Part21', 10, 300);
            var part22 = map.createChild(whole, 'Part22', 120, 300);

            var rThing11_12 = map.createRLinkWithRThing(part11, part12, 'Rthing 11-12');
            var rThing11_21 = map.createRLinkWithRThing(part11, part21, 'Rthing 11-21');
            var rThing12_22 = map.createRLinkWithRThing(part12, part22, 'Rthing 12-22');
            var rThing21_22 = map.createRLinkWithRThing(part21, part22, 'Rthing 21-22');
            map.refresh();
            diagram.clearSelection();
            part11.isSelected = true;
            part12.isSelected = true;
            part21.isSelected = true;
            part22.isSelected = true;
        }
    }, {
        name: 'Drag 2nd level part to D of parent',
        instructions: 'Drag Subpart 1.1 onto D of Part 1; it should appear below Part 1',
        run: function run(diagram) {
            var whole = map.createThing(0, 0, 'Whole', 'left');
            var part1 = map.createChild(whole, 'Part 1');
            var subpart11 = map.createChild(part1, 'Subpart 1.1');
            var part2 = map.createChild(whole, 'Part 2');
            map.refresh();
            diagram.clearSelection();
        }
    }, {
        name: 'Invisible R-thing in 2nd level of outline',
        instructions: 'R-thing between Subparts 1.1 and 1.2 should be visible',
        run: function run(diagram) {
            var whole = map.createThing(0, 0, 'Whole', 'left');
            var part1 = map.createChild(whole, 'Part 1');
            var subpart11 = map.createChild(part1, 'Subpart 1.1');
            var subpart12 = map.createChild(part1, 'Subpart 1.2');
            var rThing = map.createRLinkWithRThing(subpart11, subpart12, 'Rthing');
            rThing.desiredSize = new go.Size(30, 30);
            map.refresh();
            //console.log('rThing actualBounds: ' + rThing.actualBounds + ', scale: ' + rThing.scale + ', desiredSize: ' + rThing.desiredSize);
            //console.log('Whole desiredSize: ' + whole.desiredSize);
            diagram.clearSelection();
        }
    }, {
        name: 'R-thing between ideas in same location (error)',
        instructions: 'This should trigger an error',
        run: function run(diagram) {
            // try {
            var part1 = map.createThing(0, 0, 'Part 1', 'left');
            var part2 = map.createThing(0, 0, 'Part 2', 'left');
            var rThing = map.createRLinkWithRThing(part1, part2, 'Rthing');
            map.refresh();
            // } catch(e) {
            //     alert(e.message);
            // }
        }
    },
    // {
    //     name: 'Fix bad R-thing leading to infinite loop',
    //     instructions: 'Map should display and not trigger infinite loop; model should be fixed so that r-thing is not Part 1.1 or Part 1.2',
    //     run: function(diagram) {
    //         var thing1 = map.createThing(-100, 0, 'Thing1', 'freehand');
    //         var child11 = map.createChild(thing1, 'Part 1.1');
    //         var child12 = map.createChild(thing1, 'Part 1.2');
    //         var rThing = map.createRLinkWithRThing(child11, child12, 'Rthing');
    //         var rLink = rThing.labeledLink;
    //         rLink.data.labelKeys = [child11.data.key];
    //         map.checkModel();
    //         map.refresh();
    //     }
    // },
    {
        name: 'Drag to create R-line',
        instructions: 'Drag from the R-corner of Thing1 to Thing2; temporary drag line and square should be R-color; created line should be an R-line',
        run: function run(diagram) {
            var thing1 = map.createThing(-100, 0, 'Thing1', 'freehand');
            var thing2 = map.createThing(100, 0, 'Thing2', 'freehand');
        }
    }, {
        name: 'Drag to create P-line',
        instructions: 'Drag from the P-corner of Thing1 to Thing2; temporary drag line and square should be P-color; created line should be a P-line',
        run: function run(diagram) {
            var thing1 = map.createThing(-100, 0, 'Thing1', 'freehand');
            var thing2 = map.createThing(100, 0, 'Thing2', 'freehand');
        }
    }, {
        name: 'Relink from-port of R-line',
        instructions: 'Move the start of the R-link from Thing 1 to Thing 3; make sure it does not turn into a P-link',
        run: function run(diagram) {
            var thing1 = map.createThing(-100, 0, 'Thing1', 'freehand');
            var thing2 = map.createThing(300, 0, 'Thing2', 'freehand');
            var thing3 = map.createThing(100, 200, 'Thing3', 'freehand');
            var rlink = map.createRLink(thing1, thing2);
        }
    }, {
        name: 'Relink to-port of R-line',
        instructions: 'Move the end of the R-link from Thing 2 to Thing 3; make sure it does not turn into a P-link',
        run: function run(diagram) {
            var thing1 = map.createThing(-100, 0, 'Thing1', 'freehand');
            var thing2 = map.createThing(300, 0, 'Thing2', 'freehand');
            var thing3 = map.createThing(100, 200, 'Thing3', 'freehand');
            var rlink = map.createRLink(thing1, thing2);
        }
    }, {
        name: 'Showing parts of parts of a freehand whole',
        instructions: 'Whole, Part 1 and Subpart 1.1 should all be visible',
        run: function run(diagram) {
            var whole = map.createThing(0, 0, 'Whole', 'freehand');
            var part1 = map.createChild(whole, 'Part 1');
            var subpart11 = map.createChild(part1, 'Subpart 1.1');
            map.refresh();
            diagram.clearSelection();
        }
    }

    // self.createGeneratorTest('WHAT_IS', map.getGenerator().WHAT_IS),
    // self.createGeneratorTest('PARTS_OF', map.getGenerator().PARTS_OF),
    // self.createGeneratorTest('PART_OF', map.getGenerator().PART_OF),
    // self.createGeneratorTest('PARTS_HAVE_PARTS', map.getGenerator().PARTS_HAVE_PARTS),
    // self.createGeneratorTest('POINT_FOR', map.getGenerator().POINT_FOR),
    // self.createGeneratorTest('HAS_MULTIPLE_PS', map.getGenerator().HAS_MULTIPLE_PS),
    // self.createGeneratorTest('R_TO', map.getGenerator().R_TO),
    // self.createGeneratorTest('R_EXISTS', map.getGenerator().R_EXISTS),
    // self.createGeneratorTest('WHAT_IS_R', map.getGenerator().WHAT_IS_R),
    // self.createGeneratorTest('DISTINGUISH_BETWEEN', map.getGenerator().DISTINGUISH_BETWEEN),
    // self.createGeneratorTest('IS_R_BETWEEN', map.getGenerator().IS_R_BETWEEN),
    // self.createGeneratorTest('CAN_BE_P', map.getGenerator().CAN_BE_P),
    // self.createGeneratorTest('MULTIPLE_PS_ARE', map.getGenerator().MULTIPLE_PS_ARE),
    // self.createGeneratorTest('P_PARTS', map.getGenerator().P_PARTS),
    // self.createGeneratorTest('COMPARE_CONTRAST', map.getGenerator().COMPARE_CONTRAST),
    // self.createGeneratorTest('R_PARTS', map.getGenerator().R_PARTS),
    // self.createGeneratorTest('PARTS_HAVE_RS', map.getGenerator().PARTS_HAVE_RS),
    // self.createGeneratorTest('PART_RS_EXIST', map.getGenerator().PART_RS_EXIST),
    // self.createGeneratorTest('PART_RS_ARE', map.getGenerator().PART_RS_ARE),
    // self.createGeneratorTest('WHAT_ABOUT', map.getGenerator().WHAT_ABOUT)

    // computePartsBounds

    // createRThing
    // addSelectedThingsAsChildrenOf
    // addSelectedThingAsOrderedSisterOf
    // addSelectedThingsAsSistersOf
    // addThingAsRThing
    // toggleDFlag
    // toggleSExpansion
    // togglePExpansion

    // presenter: select first slide and hit play; make sure first slide notes appear

    ];
};

},{"./sbEditor":31}],37:[function(require,module,exports){
'use strict';

var _ = require('lodash');

var SandbankEditor = require('./sbEditor');
var SandbankEditorOptions = require('./editor_options');

SandbankEditor.UI = function ($scope, $timeout, $http, $resource, $modal, $log, map) {

    var self = this;

    // ----------- tab ("slider") IDs - tabs are rendered in views/maps/_form --------------
    //this.TAB_ID_HISTORY = 'history-tab';
    this.TAB_ID_PRESENTER = 'presenter-tab';
    this.TAB_ID_ANALYTICS_MAP = 'analytics-tab-map';
    this.TAB_ID_ANALYTICS_THING = 'analytics-tab-thing';
    this.TAB_ID_PERSPECTIVES = 'perspectives-tab';
    this.TAB_ID_DISTINCTIONS = 'distinctions-tab';
    this.TAB_ID_ATTACHMENTS = 'attachments-tab';
    this.TAB_ID_GENERATOR = 'generator-tab';
    this.TAB_ID_STANDARDS = 'standards-tab';

    this.init = function () {};

    // ------------ editor options for map/user ----------

    var mapEditorOptions = {};

    var defaultEditorOptions = {
        // noArrows, to, from, toFrom
        defaultRelationshipDirection: 'noArrows',
        // left, right, stacked, freehand
        defaultThingLayout: 'left',
        // lines, spotlight, both
        perspectiveMode: 'lines'
    };

    // called when map is loaded to set stored options for map
    this.setMapEditorOptions = function (options) {
        mapEditorOptions = options;
    };

    // returns appropriate values from the user profile or the default options if options are not set for the map
    this.getMapEditorOptions = function () {
        var profileOptions = $scope.userProfile ? $scope.userProfile.editorOptions : null;
        var vals = [mapEditorOptions, profileOptions, defaultEditorOptions];
        mapEditorOptions = _.find(vals, function (val) {
            return !_.isEmpty(val);
        });
        return mapEditorOptions;
    };

    // saves default options for the user (map options are saved in autosave.js)
    function saveUserEditorOptions(options) {
        var data = {
            user: {
                editor_options: JSON.stringify(options)
            }
        };

        startSpinner();
        $http.put('/users/' + $scope.userId + '.json', data).then(function (response) {
            stopSpinner();
        }, function () {
            stopSpinner();
            $scope.profileEditStatus = 'Could not save editor options';
        });
    }

    // options modal

    $scope.editorOptions = new SandbankEditorOptions($scope, $http, $resource, $modal, $log);

    this.editOptions = function () {
        $scope.editorOptions.openModal(mapEditorOptions, function (options) {
            // onSaveDefaults
            saveUserEditorOptions(options);
        }, function (options) {
            // onUpdate
            mapEditorOptions = options;
            map.autosave.saveNow('edit_options');
        });
    };

    // ------------ state model ----------

    this.state = {};

    var defaultState = {
        showNavigator: false,
        currentTab: null,
        perspectivePointKey: null,
        distinctionThingKey: null
    };

    this.setStateData = function (data) {
        $scope.safeApply(function () {
            self.state = data || defaultState;
            //$scope.currentTab = self.state.currentTab;
        });
    };

    // TODO: Save state more frequently?? Currently it is only saved when autosave is triggered by other actions...

    this.getStateData = function () {
        return self.state;
    };

    // ----------- temporary state flags ------------

    this.zoomingToRegion = false;

    this.mouseOverGroup = null;
    this.mouseOverLink = null;

    this.dragTargetGroup = null;
    this.dragTargetPosition = null;

    this.helpTip = null;

    // ----------- handle bottom tabs ("sliders") -------------

    // in the following functions, ID is e.g. 'history-tab' (ID of one of the .bottom-tab's)

    // this is called by map.currentTabChanged, which is triggered by a $scope.$watch
    this.currentTabChanged = function (newValue, oldValue) {
        //console.log('ui, currentTabChanged: ' + newValue);
        self.state.currentTab = newValue;
    };

    this.currentTabIs = function (tabID) {
        return $scope.currentTab == tabID;
    };

    this.openTab = function (tabID) {
        $scope.safeApply(function () {
            $scope.currentTab = tabID;
        });
    };

    this.closeTab = function (tabID) {
        $scope.safeApply(function () {
            self.state.currentTab = null; // TODO: trigger autosave
            $scope.currentTab = null;
        });
    };

    this.disableTab = function (tabID) {
        // prevent opening other tabs when in P or D editor
        if ($scope.currentTab == self.TAB_ID_PERSPECTIVES || $scope.currentTab == self.TAB_ID_DISTINCTIONS) {
            return true;
        }
        return false;
    };

    this.toggleTab = function (tabID) {
        $scope.safeApply(function () {
            if ($scope.currentTab == tabID) {
                $scope.currentTab = null;
            } else if (!self.disableTab(tabID)) {
                $scope.currentTab = tabID;
            }
        });
    };

    this.toggleNavigator = function () {
        $scope.safeApply(function () {
            self.state.showNavigator = !self.state.showNavigator;
        });
    };

    this.toggleZoomingToRegion = function () {
        $scope.safeApply(function () {
            self.zoomingToRegion = !self.zoomingToRegion;
        });
    };

    // ----------------- zooming functions -------------------

    this.canZoomIn = function () {
        return map.diagram.scale < 32;
    };

    this.canZoomOut = function () {
        return map.diagram.scale > 0.25;
    };

    this.zoomIn = function () {
        var diagram = map.diagram;
        if (diagram.scale < 32) {
            var vb = diagram.viewportBounds.copy();
            diagram.scale = diagram.scale * 2;
            diagram.centerRect(vb);
        }
    };

    this.zoomOut = function () {
        var diagram = map.diagram;
        if (diagram.scale > 0.25) {
            var vb = diagram.viewportBounds.copy();
            diagram.scale = diagram.scale / 2;
            diagram.centerRect(vb);
        }
    };

    this.maybeZoomToRegion = function () {
        var diagram = map.diagram;
        // this flag is set by the toolbar button
        if (self.zoomingToRegion) {
            self.zoomingToRegion = false;
            //console.log('zoomToRegion, selection count: ' + diagram.selection.count);
            var rect = diagram.computePartsBounds(diagram.selection);
            diagram.zoomToRect(rect);
        }
        $scope.safeApply();
    };

    this.resetZoom = function () {
        var diagram = map.diagram;
        //var rect = diagram.computePartsBounds(diagram.nodes).copy();
        var rect = map.safeRect(map.computeMapBounds());
        //console.log('resetZoom, bounds: ' + rect);
        if (rect.width) {
            rect.inflate(rect.width / 5, rect.height / 5);
        }
        diagram.zoomToRect(rect);
        diagram.alignDocument(go.Spot.Center, go.Spot.Center);
        if (diagram.scale > 1) {
            diagram.scale = 1;
        }
    };

    // ------------ thing options (layout) ----------------

    this.getSelectedThingsOrDefaultLayout = function () {
        var sl = self.getSelectedThingsLayout();
        if (sl) {
            return sl;
        } else {
            return mapEditorOptions.defaultThingLayout;
        }
    };

    // returns a non-null value only if all selected items are groups with the same layout
    this.getSelectedThingsLayout = function () {
        var diagram = map.diagram;
        if (diagram === null || diagram.selection.count < 1) return null;

        var layout = null;
        var it = diagram.selection.iterator;
        while (it.next()) {
            if (!it.value instanceof go.Group) return null;
            var group = it.value;
            //console.log('getSelectedThingsLayout, it.value: ' + group);
            var groupLayout = group.data ? group.data.layout : null;
            if (layout !== null && groupLayout != layout) return null;
            layout = groupLayout;
        }
        //console.log('getSelectedThingsLayout: ' + layout);

        return layout;
    };

    // sets the layout of all selected things to the given layout
    this.setSelectedThingsLayout = function (layoutName) {
        var diagram = map.diagram;
        var it = diagram.selection.iterator;
        while (it.next()) {
            if (it.value instanceof go.Group) {
                var group = it.value;
                diagram.model.setDataProperty(group.data, 'layout', layoutName);
                map.layouts.setDescendantLayouts(group, group.data.layout);
                map.refresh();
            }
        }
    };

    // ------------ relationship options (direction) ----------------

    this.getSelectedRelationshipsOrDefaultDirection = function () {
        var sd = self.getSelectedRelationshipsDirection();
        if (sd) {
            return sd;
        } else {
            return mapEditorOptions.defaultRelationshipDirection;
        }
    };

    // returns a non-null value only if all selected items are relationships with the same direction
    this.getSelectedRelationshipsDirection = function () {
        var diagram = map.diagram;
        if (diagram === null || diagram.selection.count < 1) return null;

        var type = null;
        var it = diagram.selection.iterator;
        while (it.next()) {
            if (!it.value instanceof go.Link) return null;
            var link = it.value;
            var linkType = link.data ? link.data.type : null;
            if (type !== null && linkType != type) return null;
            type = linkType;
        }

        return type;
    };

    // sets the direction of all selected relationships to the given direction
    this.setSelectedRelationshipsDirection = function (direction) {
        var diagram = map.diagram;
        //diagram.model.startTransaction("change relationship direction");
        var it = diagram.selection.iterator;
        while (it.next()) {
            if (it.value instanceof go.Link) {
                //diagram.model.startTransaction("change link type");
                diagram.model.setDataProperty(it.value.data, 'type', direction);
                //diagram.model.commitTransaction("change link type");
            }
        }
        //diagram.commitTransaction("change relationship direction");
    };

    // ------- handle corner clicks and double clicks --------

    var _cornerClicked = null;
    var _cornerFunction = null;
    var _cornerTimeout = 300;

    this.handleCornerClick = function (corner, thing) {
        //console.log('handleCornerClick: corner = ' + corner + ', cornerClicked = ' + _cornerClicked);
        // assume it's a single click, and set handler
        _cornerFunction = getCornerFunction(corner, 1);
        // already clicked, so it's a double click; change handler
        if (_cornerClicked == corner) {
            _cornerFunction = getCornerFunction(corner, 2);
            //console.log('handleCornerClick: double click on ' + corner);
            return;
        }
        // remember that at least one click has happened for the current corner
        _cornerClicked = corner;

        // set timer to invoke whatever handler we have ready to go (unless another click happens within the interval)
        var timer = setTimeout(function () {
            // ding! invoke it
            if (_cornerFunction == self.showCornerTip) {
                _cornerFunction(thing, corner);
            } else {
                _cornerFunction(thing); // don't pass the corner arg to things like createChild that have a different second arg
            }
            // reset handler and clicked flag
            _cornerFunction = getCornerFunction(corner, 1);
            _cornerClicked = null;
        }, _cornerTimeout);
    };

    function getCornerFunction(corner, clicks) {
        if (corner == "D") {
            return clicks == 1 ? self.showCornerTip : map.createSister;
        } else if (corner == "S") {
            return clicks == 1 ? map.toggleSExpansion : map.createChild;
        } else if (corner == "R") {
            return clicks == 1 ? self.showCornerTip : map.createRToSister;
        } else if (corner == "P") {
            return clicks == 1 ? map.togglePExpansion : map.perspectives.setPEditorPoint;
        } else if (corner === "") {
            // click on text
            return clicks == 1 ? self.showCornerTip : editText;
        } else {
            return function () {
                //console.log('getCornerFunction: no function found for corner: ' + corner + '!');
            };
        }
    }

    // NB: in this case the thing is actually the TextBox, except in outline layout it is a Panel if the box is double-clicked...
    function editText(thing, corner) {
        if (!$scope.canEdit) {
            return null;
        }

        //console.log('editText, thing: ' + thing);
        if (thing instanceof go.Panel) {
            // outline layout
            var part = thing.part;
            //console.log('editText, part: ' + part);
            if (part instanceof go.Group && part.data && (part.data.layout == 'left' || part.data.layout == 'right')) {
                var textBlockName = 'externaltext-' + part.data.layout;
                var text = thing.part.findObject(textBlockName);
                if (text) {
                    thing = text;
                }
            }
        }
        map.diagram.commandHandler.editTextBlock(thing);
    }

    // ---------------- help tip functions - see also user.js, views/maps/help_tab ---------------

    // shows thingTip or one of the cornerXTips
    this.showCornerTip = function (thing, corner) {
        //console.log('showCornerTip');
        if (corner === '') {
            self.showHelpTip('thingTip');
        } else {
            self.showHelpTip('corner' + corner + 'Tip');
        }
    };

    this.showHelpTip = function (tip) {
        //console.log('showHelpTip: ' + tip);

        // don't show help if in presenter
        if (self.currentTabIs(self.TAB_ID_PRESENTER)) {
            return;
        }

        self.helpTip = tip;
        $scope.safeApply();
        $('#help-tip').show();

        setTimeout(function () {
            $('#help-tip').fadeOut(500, function () {
                self.helpTip = null;
                $scope.safeApply();
            });
        }, 5000);
    };

    // ------------ edit map UserTags ---------------

    $scope.tagging = new SandbankTagging($scope, $http, $resource, $modal, $log);

    this.editUserTags = function () {
        $scope.tagging.openModal([$scope.mapId], true, // show description field
        function () {
            map.autosave.saveNow('edit_usertags');
        } // on update
        );
    };

    // ------------ edit map sharing ---------------

    $scope.sharing = new SandbankSharing($scope, $http, $resource, $modal, $log);

    this.editMapShares = function () {
        $scope.sharing.openModal([$scope.mapId], function () {} // on update
        );
    };

    // ------------ print/export to image ---------------

    this.printSlides = function () {
        startSpinner();
        map.presenter.createSlideThumbnails();
        stopSpinner();
        setTimeout(function () {
            window.print();
        }, 500);
    };

    var MILLION = 1000 * 1000;

    this.exportToImage = function (format) {

        $scope.imageExportLoading = true;
        $('#export-image img').remove();
        map.templates.showExportFooter();

        var rect = map.diagram.computePartsBounds(map.diagram.nodes).copy();

        var imageMB = rect.width * rect.height * 4 / MILLION; // 4 bytes/pixel
        //console.log('imageMB: ' + imageMB);

        // make the max size of the image 10MB
        // pngSize = imageMB * scale * scale
        // so max scale = sqrt(pngSize / imageMB)
        // These calculations don't seem to be right, but in practice using 500 here
        // we get a scale of 2.43 for an image 19984 x 3424 pixels
        // which results in a file size of 1.88 MB at 32 bits/pixel...
        // OR 28380 x 5196 pixels, scale = 3.41 => file size = 3.49 MB
        var scale = 4;
        if (imageMB) {
            scale = Math.min(4, Math.sqrt(50 / imageMB));
        }

        //console.log('image dimensions: ' + rect.width + ' x ' + rect.height + ', image bytes: ' + (rect.width * rect.height * 4) +
        //        ', imageMB: ' + imageMB + ', scale: ' + scale);

        $scope.showImageExport = true;

        var partsToExport = new go.List();
        partsToExport.addAll(map.diagram.nodes);
        partsToExport.addAll(map.diagram.links);
        partsToExport.remove(map.presenter.slideBlocker);

        var doImage = $timeout(function () {
            var img = map.diagram.makeImage({
                parts: partsToExport,
                maxSize: new go.Size((rect.width + 200) * scale, (rect.height + 200) * scale),
                scale: scale,
                padding: 100 * scale,
                background: '#ffffff'
            });

            $('#export-image').append(img);
            $scope.imageExportLoading = false;

            map.templates.hideExportFooter();
        }, 100);
    };

    // --------- utils -------------

    this.splitLines = function (text) {
        return text.split(/\n/);
    };
};

},{"./editor_options":24,"./sbEditor":31,"lodash":undefined}],38:[function(require,module,exports){
'use strict';

window.Sandbank = {};
var moment = require('moment');
// the topmost controller for the app

window.UserCtrl = function ($rootScope, $scope, $http, $modal, $upload) {

    // query string params
    $scope.params = URI(window.location).query(true);

    // auto-open thinkquery?
    $scope.thinkquery = $scope.params.thinkquery ? true : false;

    $scope.userId = window.userId; // set in layouts/user
    $scope.userIsAdmin = window.userIsAdmin;
    $scope.userName = '';
    $scope.userProfile = null;
    $scope.profileEditStatus = '';
    $scope.password = '';
    $scope.passwordConfirm = '';

    $scope.getNewWindowName = function (action, mapId) {
        if (action == 'VIEW_MAP') {
            return 'VIEW_MAP_' + mapId;
        }
    };

    // show/hide tests UI and model debug form
    $scope.showTests = false;
    $scope.showModel = false;

    $scope.toggleShowTests = function () {
        $scope.showTests = !$scope.showTests;
    };
    $scope.toggleShowModel = function () {
        $scope.showModel = !$scope.showModel;
    };

    $scope.setUserId = function (id) {
        $scope.userId = id;
    };

    function init() {
        window.addEventListener('resize', fixRowHeights);
    }

    // make all cells in a row the same height
    function fixRowHeights() {
        // window.setTimeout(function() {
        //     $('.row-height').each(function() { 
        //         var highestBox = 0;
        //         $('> div', this).each(function(){
        //             if ($(this).height() > highestBox)
        //                 highestBox = $(this).height();
        //         }); 
        //         $('> div', this).height(highestBox);
        //     });       
        // }, 300);
    }

    $scope.loadUserProfile = function (callback) {
        if ($scope.userId) {
            var url = '/users/' + $scope.userId + '/profile.json';
            window.startSpinner();
            $http.get(url).then(function (response) {
                // success
                $scope.userProfile = response.data;
                initSelectedAdminTags();
                initSelectedFollowableOrgs();
                if ($scope.ccsTagging) {
                    $scope.ccsTagging.loadCcsTags();
                }
                window.stopSpinner();
                if (callback) {
                    callback.call();
                }
                fixRowHeights();
            }, function (reason) {
                // error
                window.stopSpinner();
                alert('Could not load user profile data');
            });
        }
    };

    $scope.loadUserProfile();

    // -------------- courses/subscriptions ------------------

    // open the Stripe Checkout dialog and get a token
    // NB: amount is stored in the Stripe plan definition
    $scope.addSubscription = function (plan) {
        var handler = StripeCheckout.configure({
            key: $scope.userProfile.account.stripeKey,
            name: "Subscribe to MetaMap",
            image: "/assets/badge-logo-64.png",
            description: plan.name,
            panelLabel: "Pay {{amount}}/" + plan.interval,
            amount: plan.price,
            allowRememberMe: false,
            email: $scope.userProfile.user.email,
            token: function token(_token, args) {
                //console.log('token: ', token);
                window.startSpinner();
                $http.post('/charges/subscribe', {
                    plan_id: plan.code,
                    token_id: _token.id
                }).then(function (response) {
                    $scope.loadUserProfile(function () {
                        alertify.success('Subscription created');
                    });
                }, function () {
                    $scope.loadUserProfile(function () {
                        alertify.error('Subscription could not be created');
                    });
                });
            }
        });
        handler.open();
    };

    // for buy-course-button directive
    $scope.getBuyButtonLabel = function (id) {
        var course;
        if (course = getFreeCourse(id)) {
            return 'Free';
        } else if (course = getEnrolledCourse(id)) {
            return 'Enrolled';
        } else if (course = getEnrollableCourse(id)) {
            return 'Enroll - $' + (course.price / 100).toFixed(2);
        } else {
            return '';
        }
    };

    $scope.getCourseStatusSummary = function (id) {
        var course = $scope.getCourse(id);
        if (course) {
            var text = course.stepsCompleted + ' of ' + course.steps + ' steps completed';
            if (course.enrolment) {
                text = "Enrolled " + course.enrolment.date + (course.enrolment.stripeData.refunded ? " (Refunded)" : "") + ' - ' + text;
            }
            return course.code + ' - ' + text;
        } else {
            return null;
        }
    };

    $scope.getCourseCompletedPercent = function (id) {
        var course = $scope.getCourse(id);
        if (course) {
            return course.stepsCompletedPercent;
        } else {
            return null;
        }
    };

    $scope.maybeBuyCourse = function (id) {
        var course;
        if (course = getFreeCourse(id)) {
            window.location.href = '/courses/' + course.id;
        } else if (course = getEnrolledCourse(id)) {
            window.location.href = '/courses/' + course.id;
        } else if (course = getEnrollableCourse(id)) {
            $scope.buyCourse(course);
        }
    };

    $scope.getCourse = function (id) {
        var course;
        if (course = getFreeCourse(id)) {
            return course;
        } else if (course = getEnrolledCourse(id)) {
            return course;
        } else if (course = getEnrollableCourse(id)) {
            return course;
        }
        return null;
    };

    function getFreeCourse(id) {
        return $scope.userProfile && _.find($scope.userProfile.freeAccessibleCourses, function (course) {
            return course.id == id && course.enrolment == undefined;
        });
    }

    function getEnrolledCourse(id) {
        return $scope.userProfile && _.find($scope.userProfile.freeAccessibleCourses, function (course) {
            return course.id == id && course.enrolment !== undefined;
        });
    }

    function getEnrollableCourse(id) {
        return $scope.userProfile && _.find($scope.userProfile.nonFreeAccessibleCourses, function (course) {
            return course.id == id;
        });
    }

    // open the Stripe Checkout dialog and get a token
    // NB: amount is passed from our course definition
    $scope.buyCourse = function (course) {
        var handler = StripeCheckout.configure({
            key: $scope.userProfile.account.stripeKey,
            name: "Enroll in Course",
            image: "/assets/badge-logo-64.png",
            description: course.code,
            amount: course.price,
            allowRememberMe: false,
            email: $scope.userProfile.user.email,
            token: function token(_token2, args) {
                //console.log('token: ', token);
                window.startSpinner();
                $http.post('/charges/buy_course', {
                    course_code: course.code,
                    course_price: course.price,
                    token_id: _token2.id
                }).then(function (response) {
                    $scope.loadUserProfile(function () {
                        alertify.success('Course purchased');
                    });

                    // reload page to handle stripe bug (?) - links not clickable
                    window.setTimeout(function () {
                        window.location.reload();
                    }, 1000);
                }, function (response) {
                    $scope.loadUserProfile(function () {
                        alertify.error('Course purchase could not be completed');
                        //console.log('stripe error: ', response);
                    });
                });
            }
        });
        handler.open();
    };

    $scope.cancelSubscription = function (subscription) {
        window.startSpinner();
        $http['delete']('/charges/unsubscribe?subscription_id=' + subscription.id).then(function (response) {
            $scope.loadUserProfile(function () {
                alertify.success('Subscription cancelled');
            });
        }, function () {
            $scope.loadUserProfile(function () {
                alertify.error('Subscription could not be cancelled');
            });
        });
    };

    // debug/test only
    $scope.clearCustomer = function () {
        window.startSpinner();
        $http['delete']('/charges/clear_customer').then(function (response) {
            $scope.loadUserProfile(function () {
                alertify.success('Customer cleared');
            });
        }, function () {
            $scope.loadUserProfile(function () {
                alertify.error('Customer could not be cleared');
            });
        });
    };

    // -------------- points and badges ----------------

    $scope.hasCurrentBadge = function (key, level) {
        return $scope.userProfile && $scope.userProfile.badges.current[key] == level;
    };

    $scope.hasNewBadge = function (key, level) {
        return $scope.userProfile && $scope.userProfile.badges['new'][key] == level;
    };

    $scope.hasNewBadges = function () {
        return $scope.userProfile && _.keys($scope.userProfile.badges['new']).length > 0;
    };

    $scope.getBadgeDefinition = function (key) {
        return _.findWhere($scope.userProfile.badges.definitions, {
            key: key
        });
    };

    // -------------- tutorial -----------------

    try {
        $scope.tutorialEnabled = function () {
            return window.mapData !== undefined;
        };

        // start tutorial:
        var _tutorial = new SandbankEditor.Tutorial();

        $scope.startTutorial = function () {
            _tutorial.start();
        };
    } catch (e) {}

    // -------------- feedback form -----------------

    $scope.feedback = '';

    $scope.toggleFeedback = function () {
        $('#feedback-dropdown').slideToggle('fast').find('textarea').get(0).focus();
    };

    $scope.submitFeedback = function () {
        if ($scope.feedback === '') {
            return; // empty input...
        }

        $.ajax({
            type: 'POST',
            url: '/users/feedback',
            data: {
                url: window.location.href,
                feedback: $scope.feedback
            },
            success: function success() {
                $scope.feedback = '';
                alert('Thank you for your feedback!');
            },
            error: function error() {
                //console.error('error sending feedback: ', arguments);
            }
        });

        $('#feedback-dropdown').slideToggle('fast');
    };

    // --------- user's user tags -----------

    // NB: this is similar to maps tagging in tagging.js - but simpler, as we do not have to deal with
    // multiple taggable items, which means tracking existing vs. new tags, etc...

    $scope.newTag = {
        name: ''
    };

    // tag autocomplete
    $scope.getUserTags = function (viewValue) {
        var url = '/user_tags/list.json?q=' + viewValue;
        return $http.get(url).then(function (response) {
            return response.data.tags;
        });
    };

    $scope.updateUserUserTags = function () {
        var tagList = _.pluck($scope.userProfile.userTags, 'name').join(',');
        $http.put('/user_tags/update_user_user_tags', [tagList]).then(function (response) {
            $scope.loadUserProfile();
            $scope.profileEditStatus = 'Tags saved';
        }, function () {
            $scope.profileEditStatus = 'Could not save tags';
        });
    };

    $scope.deleteTag = function (tag) {
        var i = _.indexOf($scope.userProfile.userTags, tag);
        $scope.userProfile.userTags.splice(i, 1);
        $scope.updateUserUserTags();
    };

    $scope.tagSelected = function (item, model, label) {
        //console.log('tagSelected: ', item, model, label);
        $scope.addTag(item.name);
    };

    $scope.editingTagKeypress = function (e) {
        if (e.which == 13) {
            $scope.addTag($scope.newTag.name);
        }
    };

    $scope.addTag = function (tagName) {
        $scope.userProfile.userTags.push({
            name: tagName
        });
        $scope.newTag.name = '';
        $scope.updateUserUserTags();
    };

    // --------- user's/map's CCS tags -----------

    // this manages CCS tags for either the current user or the current map,
    // depending which page we're on - mapId gets overridden in editor.js if we're editing a map

    try {
        $scope.ccsTagging = new SandbankCcsTagging($scope, $http, $modal);
        $scope.ccsTagging.mapId = null;
    } catch (e) {}

    // --------- user's admin tags -----------

    // key (index): admin tag ID; value: true/false (if user follows the admin tag)
    $scope.selectedUserAdminTags = [];

    function initSelectedAdminTags() {
        $scope.selectedUserAdminTags = [];
        _.each($scope.userProfile.adminTags, function (tag) {
            if (_.findWhere($scope.userProfile.userAdminTags, {
                id: tag.id
            })) {
                $scope.selectedUserAdminTags[tag.id] = true;
            }
        });
    }

    $scope.updateUserAdminTags = function () {
        var selectedTagNames = _.map($scope.userProfile.adminTags, function (tag) {
            return $scope.selectedUserAdminTags[tag.id] ? tag.name : null;
        });
        var tagList = _.without(selectedTagNames, null).join(',');
        $http.put('/admin_tags/update_user_admin_tags', [tagList]).then(function (response) {
            $scope.loadUserProfile();
            $scope.profileEditStatus = 'Interests saved';
        }, function () {
            $scope.profileEditStatus = 'Could not save interests';
        });
    };

    // --------- user's followed orgs -----------

    // key (index): org ID; value: true/false (if user follows the org)
    $scope.selectedFollowableOrganizations = [];

    $scope.userIsFollowingOrg = function (id) {
        return $scope.selectedFollowableOrganizations[id];
    };

    $scope.toggleUserFollowingOrg = function (id) {
        if (!$scope.selectedFollowableOrganizations[id] || confirm('Stop following this ThinkNation?')) {
            $scope.selectedFollowableOrganizations[id] = !$scope.selectedFollowableOrganizations[id];
            $scope.updateFollowedOrganizations();
        }
    };

    function initSelectedFollowableOrgs() {
        $scope.selectedFollowableOrganizations = [];
        _.each($scope.userProfile.followedOrganizations, function (org) {
            if (_.findWhere($scope.userProfile.followableOrganizations, {
                id: org.id
            })) {
                $scope.selectedFollowableOrganizations[org.id] = true;
            }
        });
    }

    $scope.updateFollowedOrganizations = function () {
        var selectedOrgIds = _.map($scope.userProfile.followableOrganizations, function (org) {
            return $scope.selectedFollowableOrganizations[org.id] ? org.id : null;
        });
        var orgIdList = _.without(selectedOrgIds, null).join(',');
        $http.put('/organization_follows/update_user_organization_follows', [orgIdList]).then(function (response) {
            $scope.loadUserProfile();
            $scope.profileEditStatus = 'ThinkNations saved';
        }, function () {
            $scope.profileEditStatus = 'Could not save ThinkNations';
        });
    };

    // --------- user's org memberships -----------

    $scope.joinNation = new SandbankJoinNation($scope, $http, $modal);

    function getMembershipForOrg(id) {
        return _.findWhere($scope.userProfile.memberships, {
            organizationId: id
        });
    }

    $scope.userIsMemberOfOrg = function (id) {
        if ($scope.userProfile) {
            return getMembershipForOrg(id) != undefined;
        } else {
            return false;
        }
    };

    $scope.toggleUserMemberOfOrg = function (id, name) {
        if ($scope.userIsMemberOfOrg(id)) {
            if (confirm('Remove your membership in this ThinkNation?')) {
                var membership = getMembershipForOrg(id);
                $http['delete']('/memberships/' + membership.id + '.json').then(function (response) {
                    $scope.loadUserProfile();
                });
            }
        } else {
            $scope.joinNation.openModal(id, name);
        }
    };

    // ------------ following other users ---------------

    $scope.followUser = function (user) {
        $http.post('/user_follows.json', {
            followee_id: user.id
        }).then(function (response) {
            user.followId = response.data;
            alertify.success('You are now following ' + user.name);
        }, function () {});
    };

    $scope.unfollowUser = function (user) {
        $http['delete']('/user_follows/' + user.followId + '.json').then(function (response) {
            user.followId = null;
            alertify.success('You are no longer following ' + user.name);
        }, function () {});
    };

    // ------------ following tags ---------------

    function followTag(controller, tag) {
        $http.post('/' + controller + '/' + tag.id + '/follow.json', {
            id: tag.id
        }).then(function (response) {
            tag.following = true;
            alertify.success('You are now following ' + tag.name);
        }, function () {});
    }

    function unfollowTag(controller, tag) {
        $http['delete']('/' + controller + '/' + tag.id + '/unfollow.json').then(function (response) {
            tag.following = false;
            alertify.success('You are no longer following ' + tag.name);
        }, function () {});
    }

    $scope.followUserTag = function (tag) {
        followTag('user_tags', tag);
    };
    $scope.unfollowUserTag = function (tag) {
        unfollowTag('user_tags', tag);
    };

    $scope.followAdminTag = function (tag) {
        followTag('admin_tags', tag);
    };
    $scope.unfollowAdminTag = function (tag) {
        unfollowTag('admin_tags', tag);
    };

    $scope.followCcsTag = function (tag) {
        followTag('common_core_standards', tag);
    };
    $scope.unfollowCcsTag = function (tag) {
        unfollowTag('common_core_standards', tag);
    };

    // ------------ auto-save user profile ---------------

    // don't let autosave be triggered more than every N milliseconds...
    $scope.autosave = _.debounce(autosaveNow, 2000);

    function autosaveNow() {
        //console.log('autosaving user profile');
        var data = {
            email: $scope.userProfile.user.email,
            alt_email: $scope.userProfile.user.altEmail,
            first_name: $scope.userProfile.user.firstName,
            last_name: $scope.userProfile.user.lastName,
            about_me: $scope.userProfile.user.aboutMe
        };
        if ($scope.passwordsMatch() && $scope.password.length) {
            data.password = $scope.password;
            data.password_confirmation = $scope.password;
        }

        startSpinner();
        $scope.profileEditStatus = 'Saving...';
        $http.put('/users/' + $scope.userId, data).then(function (response) {
            stopSpinner();
            if (_.has(data, 'password')) {
                $scope.profileEditStatus = 'Profile and password saved';
                //console.log($scope.profileEditStatus);
            } else {
                    $scope.profileEditStatus = 'Profile saved';
                    //console.log($scope.profileEditStatus);
                }
        }, function () {
            stopSpinner();
            $scope.profileEditStatus = 'Could not save profile';
        });
    }

    $scope.passwordsMatch = function () {
        return !$scope.password.length && !$scope.passwordConfirm.length || $scope.password == $scope.passwordConfirm;
    };

    // ------------ upload avatar ---------------

    // using: https://github.com/danialfarid/angular-file-upload
    $scope.onAvatarFileSelect = function ($files) {
        startSpinner();
        //$files: an array of files selected, each file has name, size, and type.
        for (var i = 0; i < $files.length; i++) {
            var file = $files[i];
            $scope.upload = $upload.upload({
                url: 'users/' + userId,
                method: 'PUT',
                withCredentials: true,
                file: file, // or list of files: $files for html5 only
                fileFormDataName: 'user[avatar]'
            }).success(function (data, status, headers, config) {
                $scope.loadUserProfile();
                $scope.profileEditStatus = 'Photo updated';
                stopSpinner();
            }).error(function () {
                stopSpinner();
                $scope.profileEditStatus = 'Error: Could not upload photo';
            });
            //.then(success, error, progress);
        }
    };

    // --------------- view helpers -------------------

    // returns e.g. "a day ago"
    // (NB: now is obtained from the DB to ensure that we have both dates in UTC;
    //    also, SQL vs. ruby dates need to be coerced into a similar format, both in UTC - see feed.json.jbuilder)
    $scope.getEventTime = function (t, now) {
        var time = moment(t, 'YYYY-MM-DD HH:mm:ss.SSS');
        var nowtime = moment(now, 'YYYY-MM-DD HH:mm:ss.SSS');
        // //console.log('t:       ' + t);
        // //console.log('now:     ' + now);
        // //console.log('time:    ' + time.format()); // + ' ' + time.isValid());
        // //console.log('nowtime: ' + nowtime.format()); // + ' ' + nowtime.isValid());
        return time.from(nowtime);
    };

    // --------------- notifications -------------------

    $scope.getNotificationFeedUrl = function (notification) {
        if (notification.actions.length) {
            var action = notification.actions[0];
            if (action.action == 'LIKE') {
                return '/social?like_id=' + action.likeId;
            } else if (action.action == 'COMMENT') {
                return '/social?comment_id=' + action.commentId;
            } else if (action.action == 'SHARE_INDIVIDUAL') {
                return '/maps/' + action.mapId;
            } else if (action.action == 'SHARE_PUBLIC') {
                return '/social?share_id=' + action.shareId;
            }
        }
        return '';
    };

    $scope.deleteNotification = function (notification) {
        $http['delete']('/notifications/' + notification.id + '.json').then(function (response) {
            // success
            notification.deleted = true;
        }, function (reason) {
            // error
            alert('Could not delete notification');
        });
    };

    $scope.notificationVerb = function (action) {
        var verbs = {
            LIKE: 'liked this:',
            COMMENT: 'commented on this:',
            SHARE_INDIVIDUAL: 'shared a MetaMap with you',
            SHARE_PUBLIC: 'shared a MetaMap with everyone',
            MAP_FOLLOW: 'followed a MetaMap:',
            USER_FOLLOW: 'followed you'
        };
        return verbs[action];
    };

    // ------------ utility functions ---------------

    // handy function for use with ng-class on radio buttons
    $scope.classIf = function (klass, b) {
        //console.log('classIf: ' + klass + ', ' + b);
        return b ? klass : '';
    };

    // avoid '$apply already in progress' error (source: https://coderwall.com/p/ngisma)
    $scope.safeApply = function (fn) {
        //console.log('safeApply on scope: ' + $scope);
        var phase = this.$root.$$phase;
        if (phase == '$apply' || phase == '$digest') {
            if (fn && typeof fn === 'function') {
                fn();
            }
        } else {
            this.$apply(fn);
        }
    };

    // source: http://ctrlq.org/code/19616-detect-touch-screen-javascript
    $scope.isTouchDevice = function () {
        return 'ontouchstart' in window || navigator.MaxTouchPoints > 0 || navigator.msMaxTouchPoints > 0;
    };

    init();
};

window.UserCtrl.$inject = ['$rootScope', '$scope', '$http', '$modal', '$upload'];

},{"moment":undefined}],39:[function(require,module,exports){
'use strict';

var ACTIONS = {
    MAP: 'map',
    NEW_MAP: 'new_map',
    COPY_MAP: 'copy_map',
    DELETE_MAP: 'delete_map',
    HOME: 'home',
    MY_MAPS: 'mymaps',
    TERMS_AND_CONDITIONS: 'terms',
    LOGOUT: 'logout',
    FEEDBACK: 'feedback'
};

Object.freeze(ACTIONS);

module.exports = ACTIONS;

},{}],40:[function(require,module,exports){
'use strict';

var CONSTANTS = {
	ACTIONS: require('./actions'),
	DSRP: require('./dsrp'),
	EDIT_STATUS: require('./editStatus'),
	ELEMENTS: require('./elements'),
	EVENTS: require('./events'),
	PAGES: require('./pages'),
	ROUTES: require('./routes'),
	TABS: require('./tabs'),
	TAGS: require('./tags')
};

Object.freeze(CONSTANTS);

module.exports = CONSTANTS;

},{"./actions":39,"./dsrp":41,"./editStatus":42,"./elements":43,"./events":44,"./pages":45,"./routes":46,"./tabs":47,"./tags":48}],41:[function(require,module,exports){
'use strict';

var DSRP = {
	D: 'D',
	S: 'S',
	R: 'R',
	P: 'P'
};

Object.freeze(DSRP);

module.exports = DSRP;

},{}],42:[function(require,module,exports){
'use strict';

var status = {
    LAST_UPDATED: '',
    READ_ONLY: 'View only',
    SAVING: 'Saving...',
    SAVE_OK: 'All changes saved',
    SAVE_FAILED: 'Changes could not be saved'
};

Object.freeze(status);

module.exports = status;

},{}],43:[function(require,module,exports){
'use strict';

var ELEMENTS = {
    APP_CONTAINER: 'app-container',
    META_PROGRESS: 'meta_progress',
    META_PROGRESS_NEXT: 'meta_progress_next'
};

Object.freeze(ELEMENTS);

module.exports = ELEMENTS;

},{}],44:[function(require,module,exports){
'use strict';

var EVENTS = {
	SIDEBAR_OPEN: 'sidebar-open',
	SIDEBAR_CLOSE: 'sidebar-close',
	PAGE_NAME: 'pageName',
	NAV: 'nav',
	MAP: 'map'
};

Object.freeze(EVENTS);

module.exports = EVENTS;

},{}],45:[function(require,module,exports){
'use strict';

var ACTIONS = require('./actions.js');
var _ = require('lodash');

var PAGES = {
    MAP: 'map',
    NEW_MAP: 'new_map',
    COPY_MAP: 'copy_map',
    DELETE_MAP: 'delete_map',
    MY_MAPS: 'mymaps',
    TERMS_AND_CONDITIONS: 'terms',
    HOME: 'home'
};

_.extend();

Object.freeze(PAGES);

module.exports = PAGES;

},{"./actions.js":39,"lodash":undefined}],46:[function(require,module,exports){
'use strict';

var ROUTES = {
    MAPS_LIST: 'maps/list/',
    MAPS_DATA: 'maps/data/',
    MAPS_NEW_MAP: 'maps/new-map/',
    TERMS_AND_CONDITIONS: 'metamap/terms-and-conditions/',
    HOME: 'metamap/home/'
};

Object.freeze(ROUTES);

module.exports = ROUTES;

},{}],47:[function(require,module,exports){
'use strict';

var TABS = {
    TAB_ID_PRESENTER: 'presenter-tab',
    TAB_ID_ANALYTICS_MAP: 'analytics-tab-map',
    TAB_ID_ANALYTICS_THING: 'analytics-tab-thing',
    TAB_ID_PERSPECTIVES: 'perspectives-tab',
    TAB_ID_DISTINCTIONS: 'distinctions-tab',
    TAB_ID_ATTACHMENTS: 'attachments-tab',
    TAB_ID_GENERATOR: 'generator-tab',
    TAB_ID_STANDARDS: 'standards-tab'
};
Object.freeze(TABS);

module.exports = TABS;

},{}],48:[function(require,module,exports){
'use strict';

var TAGS = {
    META_CANVAS: 'meta-canvas',
    HOME: 'home',
    TERMS: 'terms',
    MY_MAPS: 'my-maps'
};

Object.freeze(TAGS);

module.exports = TAGS;

},{}],49:[function(require,module,exports){
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var IntegrationsBase = require('./_IntegrationsBase');
var Google = require('./google');

var Facebook = (function (_IntegrationsBase) {
    _inherits(Facebook, _IntegrationsBase);

    function Facebook(config, user) {
        _classCallCheck(this, Facebook);

        _get(Object.getPrototypeOf(Facebook.prototype), 'constructor', this).call(this, config, user);
        (function (d, s, id) {
            var js,
                fjs = d.getElementsByTagName(s)[0];
            if (d.getElementById(id)) {
                return;
            }
            js = d.createElement(s);
            js.id = id;
            js.src = "//connect.facebook.net/en_US/sdk.js";
            fjs.parentNode.insertBefore(js, fjs);
        })(document, 'script', 'facebook-jssdk');
        this.FB = window.FB;
    }

    _createClass(Facebook, [{
        key: 'init',
        value: function init() {
            _get(Object.getPrototypeOf(Facebook.prototype), 'init', this).call(this);
            this.integration.init({
                appId: this.config.appid,
                xfbml: this.config.xfbml,
                version: this.config.version
            });

            this.integration.Event.subscribe('edge.create', function (targetUrl) {
                Google.sendSocial('facebook', targetUrl);
            });

            this.integration.Event.subscribe('edge.remove', function (targetUrl) {
                Google.sendSocial('facebook', targetUrl);
            });

            this.integration.Event.subscribe('message.send', function (targetUrl) {
                Google.sendSocial('facebook', targetUrl);
            });
        }
    }, {
        key: 'integration',
        get: function get() {
            this.FB = this.FB || window.FB;
            return this.FB;
        }
    }]);

    return Facebook;
})(IntegrationsBase);

module.exports = Facebook;

},{"./_IntegrationsBase":55,"./google":57}],50:[function(require,module,exports){
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var IntegrationsBase = require('./_IntegrationsBase');

var Google = (function (_IntegrationsBase) {
  _inherits(Google, _IntegrationsBase);

  function Google(config, user) {
    _classCallCheck(this, Google);

    _get(Object.getPrototypeOf(Google.prototype), 'constructor', this).call(this, config, user);
    // Google Plus API
    (function () {
      var po = document.createElement('script');po.type = 'text/javascript';po.async = true;
      po.src = 'https://apis.google.com/js/platform.js';
      var s = document.getElementsByTagName('script')[0];s.parentNode.insertBefore(po, s);
    })();

    //Google Tag Manager API
    (function (w, d, s, l, i) {
      w[l] = w[l] || [];w[l].push({
        'gtm.start': new Date().getTime(), event: 'gtm.js'
      });var f = d.getElementsByTagName(s)[0],
          j = d.createElement(s),
          dl = l != 'dataLayer' ? '&l=' + l : '';j.async = true;j.src = '//www.googletagmanager.com/gtm.js?id=' + i + dl;f.parentNode.insertBefore(j, f);
    })(window, document, 'script', 'dataLayer', this.config.tagmanager);

    (function (i, s, o, g, r, a, m) {
      i['GoogleAnalyticsObject'] = r;i[r] = i[r] || function () {
        (i[r].q = i[r].q || []).push(arguments);
      }, i[r].l = 1 * new Date();a = s.createElement(o), m = s.getElementsByTagName(o)[0];a.async = 1;a.src = g;
      m.parentNode.insertBefore(a, m);
    })(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');
  }

  _createClass(Google, [{
    key: 'init',
    value: function init() {
      _get(Object.getPrototypeOf(Google.prototype), 'init', this).call(this);
      var mode = 'auto';
      var domain = window.location.host;
      if (domain.startsWith('localhost')) {
        mode = 'none';
      }
      this.integration('create', this.config.analytics, mode);
      this.integration('send', 'pageview');
    }
  }, {
    key: 'setUser',
    value: function setUser() {
      _get(Object.getPrototypeOf(Google.prototype), 'setUser', this).call(this);
      this.integration('set', 'userId', this.user.userId);
    }
  }, {
    key: 'sendEvent',
    value: function sendEvent(val, event, source, type) {
      if (this.integration) {
        if (source && type) {
          this.integration('send', event, source, type, val);
        } else {
          this.integration('send', event, val);
        }
      }
    }
  }, {
    key: 'updatePath',
    value: function updatePath(path) {
      if (this.integration) {
        this.integration('set', {
          page: path
        });
        this.integration('send', 'pageview');
      }
    }
  }, {
    key: 'integration',
    get: function get() {
      this.ga = this.ga || window.ga;
      return this.ga;
    }
  }], [{
    key: 'sendSocial',
    value: function sendSocial(network, targetUrl) {
      var type = arguments.length <= 2 || arguments[2] === undefined ? 'send' : arguments[2];

      if (window.ga) {
        window.ga('send', 'social', network, type, targetUrl);
      }
    }
  }, {
    key: 'sendEvent',
    value: function sendEvent(event, source, type, url) {
      if (window.ga) {
        window.ga('send', event, source, type, url);
      }
    }
  }]);

  return Google;
})(IntegrationsBase);

module.exports = Google;

},{"./_IntegrationsBase":55}],51:[function(require,module,exports){
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var IntegrationsBase = require('./_IntegrationsBase');

var Intercom = (function (_IntegrationsBase) {
    _inherits(Intercom, _IntegrationsBase);

    function Intercom(config, user) {
        _classCallCheck(this, Intercom);

        _get(Object.getPrototypeOf(Intercom.prototype), 'constructor', this).call(this, config, user);
        var intercomSettings = window.intercomSettings;
        var w = window;
        var ic = w.Intercom;
        if (typeof ic === "function") {
            ic('reattach_activator');
            ic('update', intercomSettings);
        } else {
            (function () {
                var l = function l() {
                    var s = d.createElement('script');
                    s.type = 'text/javascript';
                    s.async = true;
                    s.src = 'https://widget.intercom.io/widget/' + config.apiKey + '}';
                    var x = d.getElementsByTagName('script')[0];
                    x.parentNode.insertBefore(s, x);
                };

                var d = document;
                var i = function i() {
                    i.c(arguments);
                };
                i.q = [];
                i.c = function (args) {
                    i.q.push(args);
                };
                w.Intercom = i;

                if (w.attachEvent) {
                    w.attachEvent('onload', l);
                } else {
                    w.addEventListener('load', l, false);
                }
            })();
        }
        this.intercom = w.Intercom;
    }

    _createClass(Intercom, [{
        key: 'init',
        value: function init() {
            _get(Object.getPrototypeOf(Intercom.prototype), 'init', this).call(this);
        }
    }, {
        key: 'setUser',
        value: function setUser() {
            _get(Object.getPrototypeOf(Intercom.prototype), 'setUser', this).call(this);
            this.integration('boot', {
                app_id: this.config.appid,
                name: this.user.fullName, // TODO: The current logged in user's full name
                email: this.user.email, // TODO: The current logged in user's email address.
                created_at: this.user.createdOn.ticks // TODO: The current logged in user's sign-up date as a Unix timestamp.
            });
            this.sendEvent('update');
        }
    }, {
        key: 'sendEvent',
        value: function sendEvent() {
            var event = arguments.length <= 0 || arguments[0] === undefined ? 'update' : arguments[0];

            _get(Object.getPrototypeOf(Intercom.prototype), 'sendEvent', this).call(this, event);
            this.integration('update');
        }
    }, {
        key: 'updatePath',
        value: function updatePath(path) {
            this.integration('update');
        }
    }, {
        key: 'integration',
        get: function get() {
            this.intercom = this.intercom || window.Intercom;
            return this.intercom;
        }
    }]);

    return Intercom;
})(IntegrationsBase);

module.exports = Intercom;

},{"./_IntegrationsBase":55}],52:[function(require,module,exports){
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var IntegrationsBase = require('./_IntegrationsBase');
var Google = require('./google');

var Twitter = (function (_IntegrationsBase) {
    _inherits(Twitter, _IntegrationsBase);

    function Twitter(config, user) {
        _classCallCheck(this, Twitter);

        _get(Object.getPrototypeOf(Twitter.prototype), 'constructor', this).call(this, config, user);
        (function (d, s, id) {
            var js = undefined,
                fjs = d.getElementsByTagName(s)[0],
                t = window.twttr || {};
            if (d.getElementById(id)) return t;
            js = d.createElement(s);
            js.id = id;
            js.src = "https://platform.twitter.com/widgets.js";
            fjs.parentNode.insertBefore(js, fjs);

            t._e = [];
            t.ready = function (f) {
                t._e.push(f);
            };

            return t;
        })(document, "script", "twitter-wjs");
    }

    _createClass(Twitter, [{
        key: 'init',
        value: function init() {
            var _this = this;

            _get(Object.getPrototypeOf(Twitter.prototype), 'init', this).call(this);
            this.integration.ready(function (twitter) {
                twitter.widgets.load();
                twitter.events.bind('click', _this._clickEventToAnalytics);
                twitter.events.bind('tweet', _this._tweetIntentToAnalytics);
                twitter.events.bind('retweet', _this._retweetIntentToAnalytics);
                twitter.events.bind('favorite', _this._favIntentToAnalytics);
                twitter.events.bind('follow', _this._followIntentToAnalytics);
            });

            var tryCount = 0;
            var load = function load() {
                if (window.twttr && window.twttr.widgets) {
                    return window.twttr.widgets.load();
                } else if (tryCount < 5) {
                    tryCount += 1;
                    _.delay(load, 250);
                }
            };
        }
    }, {
        key: '_followIntentToAnalytics',
        value: function _followIntentToAnalytics(intentEvent) {
            if (!intentEvent) return;
            var label = intentEvent.data.user_id + " (" + intentEvent.data.screen_name + ")";
            Google.sendSocial('twitter', label, intentEvent.type);
        }
    }, {
        key: '_retweetIntentToAnalytics',
        value: function _retweetIntentToAnalytics(intentEvent) {
            if (!intentEvent) return;
            var label = intentEvent.data.source_tweet_id;
            Google.sendSocial('twitter', label, intentEvent.type);
        }
    }, {
        key: '_favIntentToAnalytics',
        value: function _favIntentToAnalytics(intentEvent) {
            this._tweetIntentToAnalytics(intentEvent);
        }
    }, {
        key: '_tweetIntentToAnalytics',
        value: function _tweetIntentToAnalytics(intentEvent) {
            if (!intentEvent) return;
            var label = "tweet";
            Google.sendSocial('twitter', label, intentEvent.type);
        }
    }, {
        key: '_clickEventToAnalytics',
        value: function _clickEventToAnalytics(intentEvent) {
            if (!intentEvent) return;
            var label = intentEvent.region;
            Google.sendSocial('twitter', label, intentEvent.type);
        }
    }, {
        key: 'integration',
        get: function get() {
            this.twttr = this.twttr || window.twttr;
            return this.twttr;
        }
    }]);

    return Twitter;
})(IntegrationsBase);

module.exports = Twitter;

},{"./_IntegrationsBase":55,"./google":57}],53:[function(require,module,exports){
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var IntegrationsBase = require('./_IntegrationsBase');
var Google = require('./google');

var UserSnap = (function (_IntegrationsBase) {
    _inherits(UserSnap, _IntegrationsBase);

    function UserSnap(config, user) {
        _classCallCheck(this, UserSnap);

        _get(Object.getPrototypeOf(UserSnap.prototype), 'constructor', this).call(this, config, user);
        var apiKey = undefined,
            s = undefined,
            x = undefined;
        if (config == null) {
            config = {};
        }
        apiKey = config.api;
        if (apiKey) {
            var usConf = {
                emailBox: true,
                emailBoxValue: user.email,
                emailRequired: true,
                consoleRecorder: true,
                mode: 'report',
                shortcut: true,
                beforeOpen: function beforeOpen(obj) {
                    Google.sendEvent('feedback', 'usersnap', 'widget', window.location.href);
                }
            };
            window.usersnapconfig = window._usersnapconfig = usConf;

            s = document.createElement('script');
            s.type = 'text/javascript';
            s.async = true;
            s.src = '//api.usersnap.com/load/' + apiKey + '.js';
            x = document.getElementsByTagName('head')[0];
            x.appendChild(s);
        }
        this.userSnap = window.UserSnap;
    }

    _createClass(UserSnap, [{
        key: 'init',
        value: function init() {
            _get(Object.getPrototypeOf(UserSnap.prototype), 'init', this).call(this);
        }
    }, {
        key: 'setUser',
        value: function setUser() {
            _get(Object.getPrototypeOf(UserSnap.prototype), 'setUser', this).call(this);
        }
    }, {
        key: 'integration',
        get: function get() {
            this.userSnap = this.userSnap || window.UserSnap;
            return this.userSnap;
        }
    }]);

    return UserSnap;
})(IntegrationsBase);

module.exports = UserSnap;

},{"./_IntegrationsBase":55,"./google":57}],54:[function(require,module,exports){
"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var IntegrationsBase = require('./_IntegrationsBase');

var ZenDesk = (function (_IntegrationsBase) {
    _inherits(ZenDesk, _IntegrationsBase);

    function ZenDesk(config, user) {
        _classCallCheck(this, ZenDesk);

        _get(Object.getPrototypeOf(ZenDesk.prototype), "constructor", this).call(this, config, user);
        var zO = {};
        window.zEmbed || (function (e, t) {
            var n = undefined,
                o = undefined,
                d = undefined,
                i = undefined,
                s = undefined,
                a = [],
                r = document.createElement("iframe");window.zEmbed = function () {
                a.push(arguments);
            }, window.zE = window.zE || window.zEmbed, r.src = "javascript:false", r.title = "", r.role = "presentation", (r.frameElement || r).style.cssText = "display: none", d = document.getElementsByTagName("script"), d = d[d.length - 1], d.parentNode.insertBefore(r, d), i = r.contentWindow, s = i.document;
            try {
                o = s;
            } catch (c) {
                n = document.domain, r.src = 'javascript:let d=document.open();d.domain="' + n + '";void(0);', o = s;
            }o.open()._l = function () {
                var o = this.createElement("script");n && (this.domain = n), o.id = "js-iframe-async", o.src = e, this.t = +new Date(), this.zendeskHost = t, this.zEQueue = a, this.body.appendChild(o);
                zO.logic = window.zE;
            }, o.write('<body onload="document._l();">'), o.close();
        })("https://assets.zendesk.com/embeddable_framework/main.js", config.site);

        zO.widget = window.zEmbed;
        zO.logic = window.zE;
    }

    _createClass(ZenDesk, [{
        key: "init",
        value: function init() {
            _get(Object.getPrototypeOf(ZenDesk.prototype), "init", this).call(this);
        }
    }, {
        key: "setUser",
        value: function setUser() {
            var _this = this;

            _get(Object.getPrototypeOf(ZenDesk.prototype), "setUser", this).call(this);
            this.integration(function () {
                _this.integration.identify({ name: _this.user.fullName, email: _this.user.email });
            });
        }
    }, {
        key: "integration",
        get: function get() {
            return window.zE;
        }
    }]);

    return ZenDesk;
})(IntegrationsBase);

var zenDesk = function zenDesk(config) {

    return zO;
};

module.exports = ZenDesk;

},{"./_IntegrationsBase":55}],55:[function(require,module,exports){
"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var IntegrationsBase = (function () {
	function IntegrationsBase(config, user) {
		_classCallCheck(this, IntegrationsBase);

		this.config = config;
		this.user = user;
	}

	_createClass(IntegrationsBase, [{
		key: "init",
		value: function init() {}
	}, {
		key: "setUser",
		value: function setUser() {}
	}, {
		key: "sendEvent",
		value: function sendEvent() {}
	}, {
		key: "updatePath",
		value: function updatePath() {}
	}, {
		key: "integration",
		get: function get() {
			return {};
		}
	}]);

	return IntegrationsBase;
})();

module.exports = IntegrationsBase;

},{}],56:[function(require,module,exports){
"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var IntegrationsBase = require('./_IntegrationsBase');

var AddThis = (function (_IntegrationsBase) {
    _inherits(AddThis, _IntegrationsBase);

    function AddThis(config, user) {
        _classCallCheck(this, AddThis);

        _get(Object.getPrototypeOf(AddThis.prototype), "constructor", this).call(this, config, user);
        (function (d, s, id) {
            var js,
                fjs = d.getElementsByTagName(s)[0],
                t = window.addthis || {};
            if (d.getElementById(id)) return t;
            js = d.createElement(s);
            js.id = id;
            js.src = "//s7.addthis.com/js/300/addthis_widget.js#pubid=" + config.pubid;
            fjs.parentNode.insertBefore(js, fjs);

            t._e = [];
            t.ready = function (f) {
                t._e.push(f);
            };

            return t;
        })(document, "script", "add-this-js");
        this.addthis = window.addthis;
    }

    _createClass(AddThis, [{
        key: "init",
        value: function init() {
            _get(Object.getPrototypeOf(AddThis.prototype), "init", this).call(this);
            // window.addthis.ready(function () {
            //     if (['#home', '#contact'].indexOf(window.location.hash) >= 0) {
            //         var tryCount = 0;
            //         var hideShares = function (keepGoing) {
            //             if ($('#at4-share') && $('#at4-share').length >= 1) {
            //                 $('#at4-share').parent().hide();
            //                 if (keepGoing) {
            //                     _.delay(hideShares, 3000);
            //                 }
            //             } else {
            //                 tryCount += 1;
            //                 if (tryCount < 60) {
            //                     _.delay(hideShares, 250);
            //                 }
            //             }
            //         }
            //         hideShares(true);
            //     }
            // });
        }
    }, {
        key: "integration",
        get: function get() {
            this.addthis = this.addthis || window.addthis;
            return this.addthis;
        }
    }]);

    return AddThis;
})(IntegrationsBase);

module.exports = AddThis;

},{"./_IntegrationsBase":55}],57:[function(require,module,exports){
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var IntegrationsBase = require('./_IntegrationsBase');

var Google = (function (_IntegrationsBase) {
  _inherits(Google, _IntegrationsBase);

  function Google(config, user) {
    _classCallCheck(this, Google);

    _get(Object.getPrototypeOf(Google.prototype), 'constructor', this).call(this, config, user);
    // Google Plus API
    (function () {
      var po = document.createElement('script');po.type = 'text/javascript';po.async = true;
      po.src = 'https://apis.google.com/js/platform.js';
      var s = document.getElementsByTagName('script')[0];s.parentNode.insertBefore(po, s);
    })();

    //Google Tag Manager API
    (function (w, d, s, l, i) {
      w[l] = w[l] || [];w[l].push({
        'gtm.start': new Date().getTime(), event: 'gtm.js'
      });var f = d.getElementsByTagName(s)[0],
          j = d.createElement(s),
          dl = l != 'dataLayer' ? '&l=' + l : '';j.async = true;j.src = '//www.googletagmanager.com/gtm.js?id=' + i + dl;f.parentNode.insertBefore(j, f);
    })(window, document, 'script', 'dataLayer', this.config.tagmanager);

    (function (i, s, o, g, r, a, m) {
      i['GoogleAnalyticsObject'] = r;i[r] = i[r] || function () {
        (i[r].q = i[r].q || []).push(arguments);
      }, i[r].l = 1 * new Date();a = s.createElement(o), m = s.getElementsByTagName(o)[0];a.async = 1;a.src = g;
      m.parentNode.insertBefore(a, m);
    })(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');
  }

  _createClass(Google, [{
    key: 'init',
    value: function init() {
      _get(Object.getPrototypeOf(Google.prototype), 'init', this).call(this);
      var mode = 'auto';
      var domain = window.location.host;
      if (domain.startsWith('localhost')) {
        mode = 'none';
      }
      this.integration('create', this.config.analytics, mode);
      this.integration('send', 'pageview');
    }
  }, {
    key: 'setUser',
    value: function setUser() {
      _get(Object.getPrototypeOf(Google.prototype), 'setUser', this).call(this);
      this.integration('set', 'userId', this.user.userId);
    }
  }, {
    key: 'sendEvent',
    value: function sendEvent(val, event, source, type) {
      if (this.integration) {
        if (source && type) {
          this.integration('send', event, source, type, val);
        } else {
          this.integration('send', event, val);
        }
      }
    }
  }, {
    key: 'updatePath',
    value: function updatePath(path) {
      if (this.integration) {
        this.integration('set', {
          page: path
        });
        this.integration('send', 'pageview');
      }
    }
  }, {
    key: 'integration',
    get: function get() {
      this.ga = this.ga || window.ga;
      return this.ga;
    }
  }], [{
    key: 'sendSocial',
    value: function sendSocial(network, targetUrl) {
      var type = arguments.length <= 2 || arguments[2] === undefined ? 'send' : arguments[2];

      if (window.ga) {
        window.ga('send', 'social', network, type, targetUrl);
      }
    }
  }, {
    key: 'sendEvent',
    value: function sendEvent(event, source, type, url) {
      if (window.ga) {
        window.ga('send', event, source, type, url);
      }
    }
  }]);

  return Google;
})(IntegrationsBase);

module.exports = Google;

},{"./_IntegrationsBase":55}],58:[function(require,module,exports){
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var riot = window.riot;
var NProgress = window.NProgress;
var pageBody = require('../tags/page-body.js');
var ELEMENTS = require('../constants/elements.js');
var Actions = require('../actions/Action.js');

var PageFactory = (function () {
    function PageFactory(eventer, metaFire) {
        _classCallCheck(this, PageFactory);

        this.metaFire = metaFire;
        this.eventer = eventer;
        this.actions = new Actions(metaFire, eventer, this);
        this.onReady();
    }

    _createClass(PageFactory, [{
        key: 'onReady',
        value: function onReady() {
            if (!this._onReady) {
                this._onReady = new Promise(function (fulfill, reject) {
                    $('#' + ELEMENTS.META_PROGRESS).remove();
                    riot.mount('*');
                    NProgress.configure({ parent: '#' + ELEMENTS.META_PROGRESS_NEXT });

                    _.delay(function () {
                        Metronic.init(); // init metronic core componets
                        Layout.init(); // init layout
                        Demo.init(); // init demo features
                        Index.init(); // init index page
                        Tasks.initDashboardWidget(); // init tash dashboard widget
                        fulfill();
                    }, 250);
                });
            }
            return this._onReady;
        }
    }, {
        key: 'navigate',
        value: function navigate(path, id, action) {
            var _actions;

            for (var _len = arguments.length, params = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
                params[_key - 3] = arguments[_key];
            }

            var act = (_actions = this.actions).act.apply(_actions, [path, id, action].concat(params));
            if (!act) {
                var _eventer;

                (_eventer = this.eventer)['do'].apply(_eventer, [path, path, { id: id, action: action }].concat(params));
            }
        }
    }]);

    return PageFactory;
})();

module.exports = PageFactory;

},{"../actions/Action.js":2,"../constants/elements.js":43,"../tags/page-body.js":65}],59:[function(require,module,exports){
'use strict';

var riot = require('riot');
var NProgress = window.NProgress;
var editor = require('../../canvas/editor');
var html = '\n<div class="portlet light">\n    <div class="portlet-body" id="diagram"></div>\n</div>\n<div id="overview-diagram" style="display: none;"></div>\n';

module.exports = riot.tag('meta-canvas', html, function (opts) {
    var _this = this;

    var MetaMap = require('../../../MetaMap.js');

    this.mapId = null;
    this.canvas = null;

    this.buildCanvas = function (map) {
        if (!_this.canvas) {
            $(_this.diagram).empty();
            $(_this['overview-diagram']).empty();

            var x = {
                mapId: _this.mapId,
                ccsTagging: {},
                safeApply: function safeApply(fn) {
                    if (fn) {
                        for (var _len = arguments.length, params = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                            params[_key - 1] = arguments[_key];
                        }

                        fn.apply(undefined, params);
                    }
                },
                $watch: function $watch() {},
                get: function get() {
                    return { then: function then() {} };
                },
                isTouchDevice: function isTouchDevice() {
                    return false;
                }
            };

            _this.update();

            x.mapData = map;
            map.metadata = {
                sandbox: null,
                canEdit: true
            };
            map.state_data = {
                "showNavigator": false,
                "currentTab": null,
                "perspectivePointKey": null,
                "distinctionThingKey": null
            };
            map.editor_options = {
                "defaultRelationshipDirection": "noArrows",
                "defaultThingLayout": "left",
                "perspectiveMode": "lines"
            };

            _this.canvas = MapEditorCtrl(x, x, x, x, x);
        } else {
            if (map.changed_by != MetaMap.User.userKey) {
                _this.canvas.map.load(map.data);
            }
        }
        NProgress.done();
    };

    this.build = function (opts) {
        if (opts.id != _this.mapId) {
            _this.canvas = null;
            if (_this.mapId) {
                MetaMap.MetaFire.off('maps/data/' + _this.mapId);
            }
            _this.mapId = opts.id;
            NProgress.start();

            MetaMap.MetaFire.on('maps/data/' + opts.id, _this.buildCanvas);
            MetaMap.Eventer.forget('map', _this.build);
        }
    };

    MetaMap.Eventer.every('map', this.build);

    this.correctHeight = function () {
        $(_this.diagram).css({
            height: window.innerHeight - 154 + 'px'
        });
    };

    this.on('update', function () {
        _this.correctHeight();
    });

    $(window).resize(function () {
        _this.correctHeight();
    });
});

},{"../../../MetaMap.js":1,"../../canvas/editor":23,"riot":"riot"}],60:[function(require,module,exports){
'use strict';

var riot = require('riot');

var html = '<a href="javascript:;" class="dropdown-toggle" data-toggle="dropdown" data-hover="dropdown" data-close-others="true">\n            <i class="fa fa-graduation-cap"></i>\n        </a>\n        <ul class="dropdown-menu">\n            <li>\n                <ul class="dropdown-menu-list scroller" style="height: 270px;" data-handle-color="#637283">\n                    <li if="{ help }"\n                        each="{ help }"\n                        onclick="{ parent.onClick }">\n                        <a href="{ link }">\n                            <i class="{ icon }"></i>\n                            <span class="title">{ title }</span>\n                        </a>\n                    </li>\n                </ul>\n            </li>\n        </ul>\n';

riot.tag('meta-help', html, function (opts) {
    var _this = this;

    var MetaMap = require('../../../MetaMap');

    this.onClick = function (event, params) {
        console.log(event, params);
        return true;
    };

    this.help = null;
    this.on('mount', function () {
        MetaMap.MetaFire.on('metamap/help', function (data) {
            _this.help = _.filter(_.sortBy(data, 'order'), function (d) {
                var include = d.archive != true;
                return include;
            });
            _this.update();
        });
    });
});

},{"../../../MetaMap":1,"riot":"riot"}],61:[function(require,module,exports){
'use strict';

var riot = require('riot');

var html = '<a href="javascript:;" class="dropdown-toggle" data-toggle="dropdown" data-hover="dropdown" data-close-others="true">\n                    <i class="fa fa-bell-o"></i>\n                    <span class="badge badge-success">\n                        { notifications.length }\n                    </span>\n                </a>\n                <ul class="dropdown-menu">\n                    <li class="external">\n                        <h3>\n                            <span class ="bold">{ notifications.length } pending</span> notification{ s: notifications.length == 0 || notifications.length > 1 }\n                        </h3>\n                        <a href="javascript:;">view all</a>\n                    </li>\n                    <li>\n                        <ul class="dropdown-menu-list scroller" style="height: 250px;" data-handle-color="#637283">\n                            <li if="{ notifications }"\n                                each="{ notifications }"\n                                onclick="{ parent.onClick }">\n                                <a href="javascript:;">\n                                    <span class="time">{ time }</span>\n                                    <span class="details">\n                                        <span class="label label-sm label-icon label-success">\n                                            <i class="fa fa-plus"></i>\n                                        </span>\n                                        { event }\n                                    </span>\n                                </a>\n                            </li>\n                        </ul>\n                    </li>\n                </ul>\n';

riot.tag('meta-notifications', html, function (opts) {
    var _this = this;

    var MetaMap = require('../../../MetaMap.js');

    this.notifications = [];

    this.onClick = function (event, params) {
        console.log(event, params);
        return true;
    };

    this.on('mount', function () {
        MetaMap.MetaFire.on('metamap/notifications', function (data) {
            _this.notifications = _.filter(_.sortBy(data, 'order'), function (d) {
                var include = d.archive != true;
                return include;
            });
            _this.update();
        });
    });
});

},{"../../../MetaMap.js":1,"riot":"riot"}],62:[function(require,module,exports){
'use strict';

var riot = require('riot');

var html = '<a href="javascript:;" class="dropdown-toggle" data-toggle="dropdown" data-hover="dropdown" data-close-others="true">\n                    <i class="fa fa-trophy"></i>\n                    <span class="badge badge-success">\n                        { points.length }\n                    </span>\n                </a>\n                <ul class="dropdown-menu">\n                    <li class="external">\n                        <h3>\n                            <span class ="bold">{ points.length } new </span> achievement{ s: points.length == 0 || points.length > 1 }\n                        </h3>\n                        <a href="javascript:;">view all</a>\n                    </li>\n                    <li>\n                        <ul class="dropdown-menu-list scroller" style="height: 250px;" data-handle-color="#637283">\n                            <li if="{ points }"\n                                each="{ points }"\n                                onclick="{ parent.onClick }">\n                                <a href="javascript:;">\n                                    <span class="time">{ time }</span>\n                                    <span class="details">\n                                        <span class="label label-sm label-icon label-success">\n                                            <i class="fa fa-plus"></i>\n                                        </span>\n                                        { event }\n                                    </span>\n                                </a>\n                            </li>\n                        </ul>\n                    </li>\n                </ul>\n';

riot.tag('meta-points', html, function (opts) {
    var _this = this;

    var MetaMap = require('../../../MetaMap.js');
    this.points = [];

    this.onClick = function (event, params) {
        console.log(event, params);
        return true;
    };

    this.on('mount', function () {
        MetaMap.MetaFire.on('users/' + MetaMap.User.userId + '/points', function (data) {
            _this.points = _.filter(_.sortBy(data, 'order'), function (d) {
                var include = d.archive != true;
                return include;
            });
            _this.update();
        });
    });
});

},{"../../../MetaMap.js":1,"riot":"riot"}],63:[function(require,module,exports){
'use strict';

var riot = require('riot');

var html = '<a href="javascript:;" class="dropdown-toggle" data-toggle="dropdown" data-hover="dropdown" data-close-others="true">\n                    <span class="username username-hide-on-mobile">\n                        { username }\n                    </span>\n                    <img alt="" height="39" width="39" class="img-circle" src="{ picture }" />\n                </a>\n                <ul class="dropdown-menu dropdown-menu-default">\n                    <li if="{ menu }"\n                        each="{ menu }"\n                        onclick="{ parent.onClick }">\n                        <a href="{ link }">\n                            <i class="{ icon }"></i> { title }\n                        </a>\n                    </li>\n                </ul>\n';

riot.tag('meta-user', html, function (opts) {
    var _this = this;

    var MetaMap = require('../../../MetaMap.js');

    this.menu = [];
    this.username = '';
    this.picture = '';

    this.logout = function () {
        MetaMap.logout();
    };

    this.linkAccount = function () {
        MetaMap.Auth0.linkAccount();
    };

    this.onClick = function (event, params) {
        switch (event.item.link) {
            case '#link-social-accounts':
                _this.linkAccount();
                return false;
                break;

            default:
                console.log(event, params);
                return true;
                break;
        }
    };

    this.on('mount', function () {
        MetaMap.MetaFire.on('metamap/user', function (data) {
            _this.username = MetaMap.User.displayName;
            _this.picture = MetaMap.User.picture;
            _this.menu = _.filter(_.sortBy(data, 'order'), function (d) {
                var include = d.archive != true;
                return include;
            });
            _this.update();
        });
    });
});

},{"../../../MetaMap.js":1,"riot":"riot"}],64:[function(require,module,exports){
'use strict';

var riot = require('riot');
require('../tools/shims');

var html = '\n<div class="page-actions">\n    <div class="btn-group">\n        <button type="button" class="btn red-haze btn-sm dropdown-toggle" data-toggle="dropdown" data-hover="dropdown" data-close-others="true">\n            <span class="hidden-sm hidden-xs">Actions&nbsp;</span>\n            <i class="fa fa-angle-down"></i>\n        </button>\n        <ul class="dropdown-menu" role="menu">\n            <li each="{ val, i in data }" class="{ start: i == 0, active: i == 0 }">\n                <a if="{ parent.getLinkAllowed(val) }" href="{ parent.getActionLink(val) }">\n                    <i class="{ val.icon }"></i> { val.title }\n                </a>\n            </li>\n            <li class="divider"></li>\n            <li>\n                <a href="#settings">\n                    <i class="fa fa-gear"></i> Settings\n                </a>\n            </li>\n        </ul>\n    </div>\n\n    <span style="padding-left: 5px;">\n        <span if="{ pageName }"\n                id="map_name"\n                data-type="text"\n                data-title="Enter map name">\n            { pageName }\n        </span>\n    </span>\n</div>\n';

module.exports = riot.tag('page-actions', html, function (opts) {
    var _this = this;

    var MetaMap = require('../../MetaMap');

    this.data = [];
    this.pageName = 'Home';
    this.url = MetaMap.config.site.db + '.firebaseio.com';
    this.loaded = false;

    this.getActionLink = function (obj) {
        var ret = obj.link;
        if (obj.url_params) {
            (function () {
                var args = [];
                _.each(obj.url_params, function (prm) {
                    args.push(_this[prm.name]);
                });
                ret = obj.link.format.call(obj.link, args);
            })();
        }
        return ret;
    };

    this.getLinkAllowed = function (obj) {
        var ret = true == obj['allowed-on']['*'];
        if (!ret) {
            var currentPage = MetaMap.Router.currentPath;
            ret = true == obj['allowed-on'][currentPage];
        }
        return ret;
    };

    this.bindTopageName = _.once(function () {
        MetaMap.MetaFire.on('maps/list/' + _this.mapId + '/name', function (name) {
            _this.pageName = name || '';
            _this.update();
        });
        _this.loaded = true;
    });

    MetaMap.Eventer.every('pageName', function (opts) {
        if (_this.loaded) {
            $(_this.map_name).editable('destroy');
        }
        if (_this.mapId) {
            MetaMap.MetaFire.off('maps/list/' + _this.mapId + '/name');
            MetaMap.MetaFire.on('maps/list/' + opts.id + '/name', function (name) {
                _this.pageName = name;
                _this.update();
            });
        }
        _this.pageName = opts.name || 'Home';
        _this.mapId = opts.id;
        _this.update();
        if (_this.mapId) {
            $(_this.map_name).editable({ unsavedclass: null }).on('save', function (event, params) {
                MetaMap.MetaFire.setData(params.newValue, 'maps/list/' + _this.mapId + '/name');
            });
            _this.bindTopageName();
        }
    });

    MetaMap.MetaFire.on('metamap/actions', function (data) {
        _this.data = _.filter(_.sortBy(data, 'order'), function (d) {
            var include = d.archive != true;
            return include;
        });
        _this.update();
    });
});

},{"../../MetaMap":1,"../tools/shims":78,"riot":"riot"}],65:[function(require,module,exports){
'use strict';

var riot = require('riot');
var pageHeader = require('./page-header');
var pageContainer = require('./page-container');
//const metaDialog = require('./components/meta-dialog');
var pageFooter = require('./page-footer');
var EVENTS = require('../constants/events');

var html = '\n<div id="page_body" class="page-header-fixed page-sidebar-closed-hide-logo page-sidebar-closed-hide-logo">\n\n    <div id="meta_page_header"></div>\n\n    <div class="clearfix">\n    </div>\n\n    <div id="meta_page_container"></div>\n\n</div>\n\n<div id="meta_page_footer"></div>';

module.exports = riot.tag('page-body', html, function (opts) {
    var _this = this;

    var MetaMap = require('../../MetaMap');

    this.on('mount', function () {
        riot.mount(_this.meta_page_header, 'page-header');
        riot.mount(_this.meta_page_container, 'page-container');
        //        riot.mount(this.meta_page_dialog, 'meta-dialog');
        riot.mount(_this.meta_page_footer, 'page-footer');
    });

    MetaMap.Eventer.on(EVENTS.SIDEBAR_CLOSE, function () {
        $(_this.page_body).addClass('page-sidebar-reversed');
    });

    MetaMap.Eventer.on(EVENTS.SIDEBAR_OPEN, function () {
        $(_this.page_body).removeClass('page-sidebar-reversed');
    });
});

},{"../../MetaMap":1,"../constants/events":44,"./page-container":66,"./page-footer":68,"./page-header":69,"riot":"riot"}],66:[function(require,module,exports){
'use strict';

var riot = require('riot');
var pageSidebar = require('./page-sidebar.js');
var pageContent = require('./page-content.js');

var html = '\n<div class="page-container">\n    <div id="meta_page_sidebar"></div>\n    <div id="meta_page_content"></div>\n</div>\n';

module.exports = riot.tag('page-container', html, function (opts) {
    var _this = this;

    var MetaMap = require('../../MetaMap');

    this.on('mount', function () {
        riot.mount(_this.meta_page_sidebar, 'page-sidebar');
        riot.mount(_this.meta_page_content, 'page-content');
    });
});

},{"../../MetaMap":1,"./page-content.js":67,"./page-sidebar.js":72,"riot":"riot"}],67:[function(require,module,exports){
'use strict';

var riot = require('riot');
var EVENTS = require('../constants/events');
var _ = require('lodash');

var html = '\n<div class="page-content-wrapper">\n    <div id="page-content" class="page-content">\n\n        <div class="page-head">\n\n        </div>\n\n\n        <div id="app-container">\n\n        </div>\n    </div>\n</div>\n';

module.exports = riot.tag('page-content', html, function (opts) {
    var _this = this;

    var MetaMap = require('../../MetaMap');

    MetaMap.Eventer.on(EVENTS.SIDEBAR_CLOSE, function () {
        var width = window.innerWidth;
        $(_this['app-container']).css({ width: width - 46 + 'px' });
    });

    $(window).on('resize', function () {
        $(_this['app-container']).css({ width: '100%' });
    });

    MetaMap.Eventer.on(EVENTS.SIDEBAR_OPEN, function () {
        $(_this['app-container']).css({ width: '100%' });
    });
});

},{"../../MetaMap":1,"../constants/events":44,"lodash":undefined,"riot":"riot"}],68:[function(require,module,exports){
'use strict';

var riot = require('riot');

var html = '\n<div class="page-footer" style="position: fixed; bottom: 0;">\n    <div class="page-footer-inner">\n        <a href="#terms">&copy;2015</a>\n    </div>\n</div>\n';

module.exports = riot.tag('page-footer', html, function (opts) {

    var MetaMap = require('../../MetaMap');
});

},{"../../MetaMap":1,"riot":"riot"}],69:[function(require,module,exports){
'use strict';

var riot = require('riot');
var pageLogo = require('./page-logo.js');
var pageActions = require('./page-actions.js');
var pageSearch = require('./page-search.js');
var pageTopMenu = require('./page-topmenu');

var html = '\n<div id="header-top" class="page-header navbar navbar-fixed-top">\n    <div id="meta_progress_next" style="overflow: inherit;"></div>\n    <div id="header-content" class="page-header-inner">\n\n        <div id="meta_page_logo"></div>\n        \n        <div id="meta_page_actions"></div>\n        \n        <div id="meta_page_top" class="page-top">\n            <div id="meta_page_search"></div>\n            \n            <div id="meta_page_topmenu"></div>\n        </div>\n\n    </div>\n\n</div>\n';

module.exports = riot.tag('page-header', html, function (opts) {
    var _this = this;

    var MetaMap = require('../../MetaMap');

    this.on('mount', function () {
        riot.mount(_this.meta_page_logo, 'page-logo');
        riot.mount(_this.meta_page_actions, 'page-actions');
        riot.mount(_this.meta_page_top, 'page-search');
        riot.mount(_this.meta_page_top, 'page-topmenu');
    });
});

},{"../../MetaMap":1,"./page-actions.js":64,"./page-logo.js":70,"./page-search.js":71,"./page-topmenu":73,"riot":"riot"}],70:[function(require,module,exports){
'use strict';

var riot = require('riot');
var EVENTS = require('../constants/events');

var html = '\n<div class ="page-logo">\n    <a id="meta_logo" href="#home">\n        <img src="metamap/assets/img/metamap_cloud.png" alt="logo" class ="logo-default" />\n    </a>\n    <div id="meta_menu_toggle" class ="menu-toggler sidebar-toggler" style="{ getDisplay(\'menu\') }">\n        <!--DOC: Remove the above "hide" to enable the sidebar toggler button on header-->\n    </div>\n</div>\n<a href="javascript:;" class ="menu-toggler responsive-toggler" data-toggle="collapse" data-target=".navbar-collapse">\n</a>\n';

module.exports = riot.tag('page-logo', html, function (opts) {
    var _this = this;

    var MetaMap = require('../../MetaMap');
    this.display = true;

    this.getDisplay = function (el) {

        if (!_this.display) {
            return 'display: none;';
        } else {
            return '';
        }
    };

    MetaMap.Eventer.on(EVENTS.SIDEBAR_CLOSE, function () {
        _this.display = false;
        _this.update();
    });

    MetaMap.Eventer.on(EVENTS.SIDEBAR_OPEN, function () {
        _this.display = true;
        _this.update();
    });
});

},{"../../MetaMap":1,"../constants/events":44,"riot":"riot"}],71:[function(require,module,exports){
'use strict';

var riot = require('riot');

var html = '\n<!-- DOC: Apply "search-form-expanded" right after the "search-form" class to have half expanded search box -->\n<form class="search-form" action="extra_search.html" method="GET">\n    <div class="input-group">\n        <input type="text" class="form-control input-sm" placeholder="Search..." name="query">\n            <span class="input-group-btn">\n                <a href="javascript:;" class="btn submit">\n                    <i class="fa fa-search"></i>\n                </a>\n            </span>\n        </div>\n</form>\n';

module.exports = riot.tag('page-search', html, function (opts) {

    var MetaMap = require('../../MetaMap');
});

},{"../../MetaMap":1,"riot":"riot"}],72:[function(require,module,exports){
'use strict';

var riot = require('riot');
var EVENTS = require('../constants/events');

var html = '\n<div class="page-sidebar-wrapper" style="{ getDisplay() }">\n    <div class="page-sidebar navbar-collapse collapse">\n        <ul class="page-sidebar-menu " data-keep-expanded="false" data-auto-scroll="true" data-slide-speed="200">\n\n            <li if="{ data }" onclick="{ parent.click }" each="{ data }">\n                <a if="{ icon }" href="javascript:;">\n                    <i class="{ icon }" style="color:#{ color };"></i>\n                    <span class="title">{ title }</span>\n                    <span class="{ arrow: menu.length }"></span>\n                </a>\n                <ul if="{ menu && menu.length }" class="sub-menu">\n                    <li each="{ menu }">\n                        <a href="javascript:;">\n                            <i class="{ icon }"></i>\n                            <span class="title">{ title }</span>\n                        </a>\n                    </li>\n                </ul>\n            </li>\n\n        </ul>\n\n    </div>\n</div>\n';

module.exports = riot.tag('page-sidebar', html, function (opts) {
    var _this = this;

    var MetaMap = require('../../MetaMap');

    this.click = function () {
        console.log('foo');
    };
    this.display = true;
    this.data = [];

    MetaMap.MetaFire.on('metamap/sidebar', function (data) {
        _this.data = _.filter(_.sortBy(data, 'order'), function (d) {
            var include = d.archive != true;
            if (include && d.menu && d.menu) {
                d.menu = _.filter(_.sortBy(d.menu, 'order'), function (m) {
                    return m.archive != true;
                });
            }
            return include;
        });
        _this.update();
    });

    this.getDisplay = function () {
        if (!_this.display) {
            return 'display: none;';
        } else {
            return '';
        }
    };

    MetaMap.Eventer.on(EVENTS.SIDEBAR_CLOSE, function () {
        _this.display = false;
        _this.update();
    });

    MetaMap.Eventer.on(EVENTS.SIDEBAR_OPEN, function () {
        _this.display = true;
        _this.update();
    });
});

},{"../../MetaMap":1,"../constants/events":44,"riot":"riot"}],73:[function(require,module,exports){
'use strict';

var riot = require('riot');
var metaPoints = require('./menu/meta-points.js');
var metaHelp = require('./menu/meta-help.js');
var metaUser = require('./menu/meta-user.js');
var metaNot = require('./menu/meta-notifications.js');

var html = '\n<div class="top-menu">\n    <ul class="nav navbar-nav pull-right">\n        <li class="separator hide"></li>\n        <li class="dropdown dropdown-extended dropdown-notification dropdown" id="header_notification_bar"></li>\n\n        <li class="separator hide"></li>\n        <li class="dropdown dropdown-extended dropdown-notification dropdown" id="header_points_bar"></li>\n\n        <li class="separator hide"></li>\n        <li class="dropdown" id="header_dashboard_bar" onclick="{ onClick }">\n            <a class="dropdown-toggle" href="#home">\n                <i class="fa fa-home"></i>\n            </a>\n        </li>\n            \n        <li class="separator hide"></li>\n        <li id="header_help_bar" class="dropdown dropdown-extended dropdown-notification dropdown"></li>\n            \n        <li class="separator hide"></li>\n        <li id="header_user_menu" class="dropdown dropdown-user dropdown"></li>\n    </ul>\n</div>\n';

module.exports = riot.tag('page-topmenu', html, function (opts) {
    var _this = this;

    this.onClick = function (event, params) {
        console.log(event, params);
        return true;
    };

    this.on('mount', function () {
        riot.mount(_this.header_points_bar, 'meta-points');
        riot.mount(_this.header_notification_bar, 'meta-notifications');
        riot.mount(_this.header_help_bar, 'meta-help');
        riot.mount(_this.header_user_menu, 'meta-user');
    });
});

},{"./menu/meta-help.js":60,"./menu/meta-notifications.js":61,"./menu/meta-points.js":62,"./menu/meta-user.js":63,"riot":"riot"}],74:[function(require,module,exports){
/// <reference path="../../../../typings/riotjs/riotjs.d.ts" />
/// <reference path="../../../../typings/nprogress/NProgress.d.ts" />

'use strict';

var riot = require('riot');
var NProgress = window.NProgress;
var ROUTES = require('../../constants/routes');

var html = '\n<div class="portlet light">\n\t\t\t\t<div class="portlet-body">\n\t\t\t\t\t<div class="row margin-bottom-30">\n\t\t\t\t\t\t<div if="{ header }" class="col-md-6">\n                            <h1>{ header.title }</h1>\n                            <p>{ header.text }</p>\n\t\t\t\t\t\t\t<ul class="list-unstyled margin-top-10 margin-bottom-10">\n\t\t\t\t\t\t\t\t<li each="{ areas }">\n\t\t\t\t\t\t\t\t\t<i class="{ icon }"></i> <b>{ title }</b> { text }\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t<!-- Blockquotes -->\n\t\t\t\t\t\t\t<blockquote class="hero">\n\t\t\t\t\t\t\t\t<p>{ quote.text }</p>\n\t\t\t\t\t\t\t\t<small>{ quote.by }</small>\n\t\t\t\t\t\t\t</blockquote>\n                            <div class="addthis_horizontal_follow_toolbox"></div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class ="col-md-6">\n                          <iframe if="{ header.youtubeid }"\n                                id="ytplayer"\n                                type="text/html"\n                                src="https://www.youtube.com/embed/{ header.youtubeid }"\n                                frameborder="0" allowfullscreen\n                                class ="fitvids"\n                                style="height: 327px; width: 100%; display: block; margin-left: auto; margin-right: auto; broder: 0;"\n                            />\n\t\t\t\t\t\t\t</iframe>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n                    <div class="headline">\n\t\t\t\t\t\t<h3>{ userName }{ vision.title }</h3>\n\t\t\t\t\t</div>\n                    <div>\n                        <p>{ vision.text }</p>\n                    </div>\n\t\t\t\t</div>\n\t\t\t</div>\n';

module.exports = riot.tag('home', html, function (opts) {
    var _this = this;

    var MetaMap = require('../../../MetaMap');

    this.areas = [];
    this.header = {};

    MetaMap.MetaFire.on(ROUTES.HOME, function (data) {
        _this.areas = _.filter(_.sortBy(data.areas, 'order'), function (d) {
            var include = d.archive != true;
            return include;
        });
        _this.quote = data.quote;
        _this.header = data.header;
        _this.vision = data.vision;

        _this.userName = MetaMap.User.fullName;

        _this.update();

        NProgress.done();
    });
});

},{"../../../MetaMap":1,"../../constants/routes":46,"riot":"riot"}],75:[function(require,module,exports){
'use strict';

var riot = require('riot');
var moment = require('moment');
var NProgress = window.NProgress;
var _ = require('lodash');
var ROUTES = require('../../constants/routes');
var PAGES = require('../../constants/pages');

var html = '\n<div class="portlet box grey-cascade">\n    <div class="portlet-title">\n        <div class="caption">\n            <i class="fa fa-icon-th-large"></i>MetaMaps\n        </div>\n        <div if="{ menu }" class="actions">\n            <a each="{ menu.buttons }" href="{ link }" onclick="{ parent.onActionClick }" class="btn btn-default btn-sm">\n                <i class="{ icon }"></i> { title }\n            </a>\n            <div class="btn-group">\n                <a class="btn btn-default btn-sm" href="javascript:;" data-toggle="dropdown">\n                    <i class="fa fa-cogs"></i> Tools <i class="fa fa-angle-down"></i>\n                </a>\n                <ul class="dropdown-menu pull-right">\n                    <li each="{ menu.menu }" onclick="{ parent.onMenuClick }">\n                        <a href="{ link }">\n                            <i class="{ icon }"></i> { title }\n                        </a>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    </div>\n    <div class="portlet-body">\n        <ul class="nav nav-tabs portlet-tabs">\n            <li onclick="{ parent.onTabSwitch }" each="{ val, i in tabs }" class="{ active: i == 0 }">\n                <a href="#mymaps_1_{ i }" data-toggle="tab" aria-expanded="{ true: i == 0 }">\n                { val.title }</a>\n            </li>\n        </ul>\n        <div class="table-toolbar">\n\n        </div>\n        <div class="tab-content">\n            <div each="{ val, i in tabs }" class="tab-pane fase in { active: i == 0 }" id="mymaps_1_{ i }">\n                <table class="table table-striped table-bordered table-hover" id="mymaps_table_{ i }">\n                    <thead>\n                        <tr>\n                            <th style="display: none;">\n                                MapId\n                            </th>\n                            <th class="table-checkbox">\n                                <input if="{ parent.currentTab == \'My Maps\' }" type="checkbox" class="group-checkable" data-set="#mymaps_table_{ i } .checkboxes"/>\n                            </th>\n                            <th style="display: none;">\n                                UserId\n                            </th>\n                            <th>\n                                Name\n                            </th>\n                            <th>\n                                Created On\n                            </th>\n                            <th>\n                                Status\n                            </th>\n                            <th>\n                                Action\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr if="{ parent.data && parent.data[i] }" each="{ parent.data[i] }" class="odd gradeX">\n                            <td style="display: none;" ><span data-selector="id" class ="mapid">{ id }</span></td>\n                            <td>\n                                <input if="{ parent.currentTab == \'My Maps\' }" type="checkbox" class="checkboxes" value="1"/>\n                            </td>\n                            <td style="display: none;">{ user_id }</td>\n                            <td if="{ val.editable }" class="meta_editable_{ i }" data-pk="{ id }" data-title="Edit Map Name">{ name }</td>\n                            <td if="{ !val.editable }">{ name }</td>\n                            <td class="center">{ created_at }</td>\n                            <td>\n                                <span class="label label-sm label-success">\n                                    Private\n                                </span>\n                            </td>\n                            <td>\n                                <button class="btn btn-sm blue filter-submit" onclick="{ parent.onOpen }">\n                                    <i class="fa fa-icon-eye-open"></i> Open\n                                </button>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>\n';

module.exports = riot.tag('my-maps', html, function (opts) {
    var _this = this;

    var MetaMap = require('../../../MetaMap.js');

    this.data = null;
    this.menu = null;
    this.tabs = _.sortBy([{ title: 'My Maps', order: 0, editable: true }, { title: 'Shared with Me', order: 1, editable: false }], 'order');
    this.currentTab = 'My Maps';

    this.onOpen = function (event) {
        MetaMap.Router.to('map/' + event.item.id);
    };

    this.onTabSwitch = function (event) {
        _this.currentTab = event.item.val.title;
        switch (_this.currentTab) {
            case 'My Maps':

                break;
        }
    };

    this.onActionClick = function (event, tag) {
        return true;
    };

    this.onMenuClick = function (event, tag) {
        if (_this.currentTab == 'My Maps') {
            switch (event.item.title.toLowerCase()) {
                case 'delete':
                    var deleteMaps = require('../../actions/DeleteMap.js');
                    var selected = _this['table0'].find('.active').find('.mapid');
                    var ids = [];
                    _.each(selected, function (cell) {
                        ids.push(cell.innerHTML);
                    });
                    deleteMaps.deleteAll(ids, PAGES.MY_MAPS);
                    var find = _this['table0'].find('tbody tr .checkboxes');
                    find.each(function () {
                        $(this).attr('checked', false);
                        $(this).parents('tr').removeClass('active');
                    });
                    jQuery.uniform.update(find);
                    break;
            }
        }
    };

    this.on('mount', function () {
        NProgress.start();
        MetaMap.MetaFire.on('metamap/mymaps', function (data) {
            if (data) {
                _this.menu = {
                    buttons: _.sortBy(data.buttons, 'order'),
                    menu: _.sortBy(data.menu, 'order')
                };
                _this.update();
            }
        });

        var buildTable = function buildTable(idx, list, editable) {
            try {
                _this.data = _this.data || {};
                _this.data[idx] = list;
                if (_this['table' + idx]) {
                    $('.meta_editable_' + idx).editable('destroy');
                    _this['dataTable' + idx].destroy();
                }

                _this.update();

                _this['table' + idx] = $(_this['mymaps_table_' + idx]);
                _this['dataTable' + idx] = _this['table' + idx].DataTable({

                    // Uncomment below line('dom' parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
                    // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js).
                    // So when dropdowns used the scrollable div should be removed.
                    //'dom': '<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>',

                    //'bStateSave': true, // save datatable state(pagination, sort, etc) in cookie.
                    'columns': [{
                        orderable: false
                    }, {
                        'orderable': false
                    }, {
                        'orderable': true
                    }, {
                        'orderable': true
                    }, {
                        'orderable': true
                    }, {
                        'orderable': false
                    }, {
                        'orderable': false
                    }]
                });
                //this[`table${idx}`]Tools = new $.fn.dataTable.TableTools(this[`dataTable${idx}`], {});

                var tableWrapper = _this['table' + idx].parent().parent().parent().find('#mymaps_' + idx + '_table_wrapper');

                _this['table' + idx].find('.group-checkable').change(function () {
                    var set = jQuery(this).attr('data-set');
                    var checked = jQuery(this).is(':checked');
                    jQuery(set).each(function () {
                        if (checked) {
                            $(this).attr('checked', true);
                            $(this).parents('tr').addClass('active');
                        } else {
                            $(this).attr('checked', false);
                            $(this).parents('tr').removeClass('active');
                        }
                    });
                    jQuery.uniform.update(set);
                });

                _this['table' + idx].on('change', 'tbody tr .checkboxes', function () {
                    $(this).parents('tr').toggleClass('active');
                });

                tableWrapper.find('.dataTables_length select').addClass('form-control input-xsmall input-inline'); // modify table per page dropdown

                if (editable) {
                    $('.meta_editable_' + idx).editable({ unsavedclass: null }).on('save', function (event, params) {
                        var id = this.dataset.pk;
                        MetaMap.MetaFire.setData(params.newValue, 'maps/list/' + id + '/name');
                        return true;
                    });
                }
                NProgress.done();
            } catch (e) {
                NProgress.done();
                MetaMap.error(e);
            }
        };

        MetaMap.MetaFire.getChild(ROUTES.MAPS_LIST).orderByChild('owner').equalTo(MetaMap.User.userId).on('value', function (val) {
            var list = val.val();
            var maps = _.map(list, function (obj, key) {
                obj.id = key;
                obj.created_at = moment(obj.created_at, 'YYYY-MM-DD');
                return obj;
            });
            buildTable(0, maps);
        });

        MetaMap.MetaFire.getChild(ROUTES.MAPS_LIST).on('value', function (val) {
            var list = val.val();
            var maps = _.map(list, function (obj, key) {
                if (obj.owner == MetaMap.User.userId || !obj.shared_with || obj.shared_with[MetaMap.User.userId] != true) {
                    return;
                } else {
                    obj.id = key;
                    obj.created_at = moment(new Date(obj.created_at), 'YYYY-MM-DD');
                    return obj;
                }
            });
            maps = _.filter(maps, function (map) {
                return map && map.id;
            });
            buildTable(1, maps);
        });
    });
});

},{"../../../MetaMap.js":1,"../../actions/DeleteMap.js":5,"../../constants/pages":45,"../../constants/routes":46,"lodash":undefined,"moment":undefined,"riot":"riot"}],76:[function(require,module,exports){
/// <reference path="../../../../typings/riotjs/riotjs.d.ts" />
/// <reference path="../../../../typings/nprogress/NProgress.d.ts" />

'use strict';

var riot = require('riot');
var NProgress = window.NProgress;
var ROUTES = require('../../constants/routes');

var html = '\n<div class="portlet light">\n\t\t\t\t<div class="portlet-body">\n\t\t\t\t\t<div class="row margin-bottom-30">\n\t\t\t\t\t\t<div if="{ header }" class="col-md-12">\n                            <h1>{ header.title }</h1>\n                            <p>{ header.text }</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n                    <div each="{ areas }">\n                        <div class="headline">\n    \t\t\t\t\t\t<h3>{ title }</h3>\n    \t\t\t\t\t</div>\n                        <div>\n                            <p>{ text }</p>\n                        </div>\n                        <ul class="list-unstyled margin-top-10 margin-bottom-10">\n\t\t\t\t\t\t\t<li each="{ items }">\n\t\t\t\t\t\t\t\t<i class="{ icon }"></i> <b>{ title }</b> { text }\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</ul>\n                    </div>\n\t\t\t\t</div>\n\t\t\t</div>\n';

module.exports = riot.tag('terms', html, function (opts) {
    var _this = this;

    var MetaMap = require('../../../MetaMap.js');

    this.areas = [];
    this.header = {};

    MetaMap.MetaFire.on(ROUTES.TERMS_AND_CONDITIONS, function (data) {
        _this.areas = _.filter(_.sortBy(data.sections, 'order'), function (d) {
            var include = d.archive != true;
            if (include) {
                d.items = _.filter(_.sortBy(d.items, 'order'), function (d) {
                    var include2 = d.archive != true;
                    return include2;
                });
            }
            return include;
        });

        _this.header = data.header;
        _this.userName = MetaMap.User.fullName;

        _this.update();

        NProgress.done();
    });
});

},{"../../../MetaMap.js":1,"../../constants/routes":46,"riot":"riot"}],77:[function(require,module,exports){
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var moment = require('moment');

var Common = (function () {
    function Common() {
        _classCallCheck(this, Common);
    }

    _createClass(Common, null, [{
        key: 'splitLines',
        value: function splitLines(text) {
            return text.split(/\n/);
        }
    }, {
        key: 'getEventTime',
        value: function getEventTime(t, now) {
            var time = moment(t, 'YYYY-MM-DD HH:mm:ss.SSS');
            var nowtime = moment(now, 'YYYY-MM-DD HH:mm:ss.SSS');
            // console.log('t:       ' + t);
            // console.log('now:     ' + now);
            // console.log('time:    ' + time.format()); // + ' ' + time.isValid());
            // console.log('nowtime: ' + nowtime.format()); // + ' ' + nowtime.isValid());
            return time.from(nowtime);
        }
    }, {
        key: 'classIf',
        value: function classIf(klass, b) {
            //console.log('classIf: ' + klass + ', ' + b);
            return b ? klass : '';
        }

        // avoid '$apply already in progress' error (source: https://coderwall.com/p/ngisma)
    }, {
        key: 'safeApply',
        value: function safeApply(fn) {
            if (fn && typeof fn === 'function') {
                fn();
            }
        }

        // source: http://ctrlq.org/code/19616-detect-touch-screen-javascript
    }, {
        key: 'isTouchDevice',
        value: function isTouchDevice() {
            return 'ontouchstart' in window || navigator.MaxTouchPoints > 0 || navigator.msMaxTouchPoints > 0;
        }
    }, {
        key: 'getTicksFromDate',
        value: function getTicksFromDate(date) {
            var ret = null;
            if (date && date.getTime) {
                ret = date.getTime() / 1000;
            }
            return ret;
        }
    }]);

    return Common;
})();

module.exports = Common;

},{"moment":undefined}],78:[function(require,module,exports){
'use strict';

if (!String.prototype.format) {
    String.prototype.format = function () {
        var args = arguments;
        return this.replace(/{(\d+)}/g, function (match, number) {
            return typeof args[number] != 'undefined' ? args[number] : match;
        });
    };
}

},{}],79:[function(require,module,exports){
'use strict';

var uuid = function uuid() {
    var hexDigits, i, s, uuid;
    s = [];
    s.length = 36;
    hexDigits = '0123456789abcdef';
    i = 0;
    while (i < 36) {
        s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);
        i += 1;
    }
    s[14] = '4';
    s[19] = hexDigits.substr(s[19] & 0x3 | 0x8, 1);
    s[8] = s[13] = s[18] = s[23] = '-';
    uuid = s.join('');
    return uuid;
};

module.exports = uuid;

},{}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
